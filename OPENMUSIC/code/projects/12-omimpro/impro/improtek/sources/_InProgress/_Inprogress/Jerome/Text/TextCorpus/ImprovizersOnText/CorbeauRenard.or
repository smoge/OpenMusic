(in-package :om)(if (find-class (quote improvizer) nil) (make-instance (quote improvizer) :vectext (make-array 1000 :initial-contents (eval-my-list (quote (nil (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Maî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rbeau," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rché," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Ten" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bec " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Maî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ard," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ché," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "tint " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Hé " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "bon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rbeau." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "jo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mblez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "beau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "men" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tir," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " Se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ppo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Phé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "nix " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "x des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "hô" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "bois." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mots " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ts le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rbeau " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sent " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "joi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "trer " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voix," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "vre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rge " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bec," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "to" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mber " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "proi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " Le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ard " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "s'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "bon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ppren" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tteur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Vit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pens " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Cet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "çon " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vaut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " Le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rbeau," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "hon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "fus," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tard," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "drait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :hashtransition (let ((hashtable (make-hash-table))) (loop for key in (listfor val in (list (list 91 42 31 14 11 10 9 7 6 5 3 2 1) (list 191 183 132 36 13 2) (list 116 112 77 67 50 40 22 20 9 3) (list 175 164 149 61 54 49 26 18 5 4) (list 175 98 49 5) (list 180 78 47 31 6) (list 184 165 17 7) (list 186 130 125 110 34 28 25 24 8) (list 169 80 40 20 9) (list 162 147 91 58 53 46 37 35 27 16 10) (list 143 106 85 60 41 30 29 11) (list 170 151 142 63 62 23 14 12) (list 191 132 13) (list 14) (list 179 163 136 44 42 15) (list 188 177 109 16) (list 17) (list 18) (list 19) (list 169 20) (list 21) (list 22) (list 170 23) (list 130 102 39 24) (list 69 25) (list 73 26) (list 96 89 27) (list 186 141 125 110 72 28) (list 29) (list 30) (list 31) (list 189 135 114 86 65 64 55 45 32) (list 33) (list 34) (list 147 103 94 35) (list 121 36) (list 83 53 37) (list 38) (list 130 102 39) (list 40) (list 160 106 41) (list 179 42) (list 145 115 57 51 43) (list 108 44) (list 45) (list 140 46) (list 154 47) (list 48) (list 49) (list 77 67 50) (list 145 57 51) (list 52) (list 83 53) (list 97 95 54) (list 55) (list 56) (list 57) (list 58) (list 153 100 91 90 59) (list 85 60) (list 88 61) (list 62) (list 63) (list 64) (list 156 65) (list 149 66) (list 67) (list 75 68) (list 69) (list 70) (list 71) (list 72) (list 73) (list 77 74) (list 75) (list 76) (list 77) (list 78) (list 182 79) (list 80) (list 81) (list 82) (list 83) (list 84) (list 85) (list 135 86) (list 157 134 87) (list 88) (list 89) (list 100 90) (list 91) (list 113 104 92) (list 93) (list 94) (list 95) (list 96) (list 97) (list 175 98) (list 99) (list 100) (list 101) (list 102) (list 103) (list 104) (list 127 105) (list 106) (list 158 107) (list 108) (list 109) (list 110) (list 183 111) (list 112) (list 113) (list 114) (list 115) (list 172 159 116) (list 117) (list 118) (list 119) (list 120) (list 121) (list 122) (list 123) (list 124) (list 125) (list 126) (list 127) (list 128) (list 129) (list 130) (list 142 131) (list 132) (list 133) (list 134) (list 135) (list 136) (list 138 137) (list 138) (list 139) (list 140) (list 141) (list 142) (list 143) (list 161 144) (list 145) (list 146) (list 147) (list 189 148) (list 149) (list 150) (list 151) (list 152) (list 153) (list 154) (list 155) (list 156) (list 157) (list 158) (list 159) (list 160) (list 161) (list 162) (list 163) (list 164) (list 165) (list 166) (list 167) (list 168) (list 169) (list 170) (list 171) (list 172) (list 173) (list 174) (list 175) (list 176) (list 177) (list 178) (list 179) (list 180) (list 181) (list 182) (list 183) (list 184) (list 185) (list 186) (list 187) (list 188) (list 189) (list 190) (list 191)) do (sethash hashtable key val)) hashtable) :hashsuppl (let ((hashtable (make-hash-table))) (loop for key in (listfor val in (list -1 0 0 0 3 0 0 0 2 0 0 0 1 11 0 9 6 3 7 8 1 2 11 7 7 3 9 7 10 10 5 0 6 7 9 1 9 11 23 8 10 14 0 14 31 9 5 3 4 2 42 1 36 3 31 2 50 9 9 10 3 11 11 31 31 3 49 7 24 8 9 27 25 49 67 25 73 5 7 8 50 51 52 58 59 31 10 60 26 58 58 0 7 34 53 26 53 4 26 89 37 38 34 91 2 40 42 43 15 27 1 2 91 31 42 2 6 7 8 9 35 2 3 26 27 91 104 9 37 38 11 12 31 86 85 14 14 136 44 45 27 130 10 2 50 7 34 31 65 10 11 9 58 46 31 64 86 106 115 40 143 9 14 3 6 6 17 18 19 22 42 115 9 53 97 14 15 10 41 5 5 78 110 6 9 27 14 15 147 11 12 5) do (sethash hashtable key val)) hashtable) :hashsuppl-> (let ((hashtable (make-hash-table))) (loop for key in (list 0 1 2 3 4 5 85 6 86 7 8 9 89 10 11 12 91 14 15 17 97 18 19 22 23 24 104 25 -1 26 106 27 110 31 34 35 115 36 37 38 40 41 42 43 44 45 46 49 50 130 51 52 53 136 58 59 60 143 64 65 67 147 73 78) for val in (list 91 110 143 163 97 191 134 183 156 145 118 184 99 177 189 190 125 186 187 166 174 167 168 169 38 68 126 75 0 123 157 185 182 154 146 120 171 52 128 129 159 178 170 107 138 139 153 73 144 141 81 82 173 137 152 84 87 160 155 148 74 188 76 181) do (sethash hashtable key val)) hashtable) :veclrs (make-array 1000 :initial-contents (eval-my-list (quote (nil 0 0 0 1 0 0 0 1 0 0 0 1 1 0 1 1 1 1 2 1 2 1 1 1 1 1 1 1 1 1 0 1 2 1 1 1 1 2 2 1 1 0 1 1 1 1 1 2 1 1 1 2 1 1 1 2 1 1 2 1 1 1 1 1 1 2 1 2 2 3 2 2 2 3 2 3 1 1 2 2 3 4 2 3 1 1 2 2 2 2 0 1 2 2 2 2 2 2 3 2 3 2 2 1 2 1 2 2 2 1 2 1 1 1 1 1 2 3 4 2 2 3 2 3 1 2 2 2 3 1 2 1 2 2 1 1 2 2 3 2 2 1 1 2 1 2 1 2 1 2 1 2 2 2 2 2 2 2 2 2 2 1 1 1 1 2 3 4 2 1 2 2 2 3 1 2 2 2 1 1 2 2 1 1 2 1 2 2 1 2 1 nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :maxetat 191 :hashrepeats nil :lrsmode (quote t) :comparateur (quote compareevents) :name "improvizer" :context nil :continuity 0 :navigationmode (quote continuity) :currentstateidx 0 :prevstateidx -1 :max-continuity 1000 :start-region (list 0 191) :fwsuffix (quote t) :bwsuffix (quote t) :bestsuffixmode nil :useestrada nil :usehindemith nil :refharmgrid nil :harmgridlength 48 :beats/measure 4 :reftempo 536 :currenttranspo 0 :lengthfactorsfromgrid (list 1 100) :besttranspomode (quote t) :firstwithouttranspomode (quote t) :authorizedtranspos (list 0) :randomprefixoccurrencemode (quote t) :tabou-mode nil :tabou (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :feature nil :hashlabeltranspo (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :from-file t))