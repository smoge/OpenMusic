(in-package :om)(if (find-class (quote improvizer) nil) (make-instance (quote improvizer) :vectext (make-array 3500 :initial-contents (eval-my-list (quote (nil (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "man " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Na" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "m'ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "m'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ste " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "»
Si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "quell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "let" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ils " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ls de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Pan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dis," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "met" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "trais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nô" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "En " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ple" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ta" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "drais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mpta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mpta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ton " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "So" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mple" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "On " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tend " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "d les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "toi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'gi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ron
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "tron," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "On " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'gi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ron
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "tron," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "On " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "rond." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Là," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "m'zell' " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "Lun" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "rdons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "nsi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "cun" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e;
" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
En" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "trez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rez
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ils " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rés." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "honn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "vre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Cen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llon " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Mais," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffit " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llon
" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "
Que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "donn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "plan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Fi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Terr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ppôt
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t
De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "En" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "trez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te;
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rne" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rez " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "stres " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "faut." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Me" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rci," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "me" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rci," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "n'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ste " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "l'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tends " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mpez," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pir
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r
Des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rsell" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "chi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Mau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "dois " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Tas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "traî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lle" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dous " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Va " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "donc," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rin" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Hé " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "No" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "da" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gens " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "oûls," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "lous " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "lou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "rous " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Met" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tous " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "

E" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "xeunt " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "nt les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "toi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "len" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lun" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "On " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tend:
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "On " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "On " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "rond." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Men" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'â" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Let" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tres " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "os," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "os," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "qua" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "és!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Pre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soirs," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rdess" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "us," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ste " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "flâ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ne" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mplai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ntes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "nerfs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mpris " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sés." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fants," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "quoi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rnell" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Pré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "x des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soirs," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Christs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sts des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rtoirs!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "laiss's " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tress" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Bro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "der " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "d'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rnels " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "can" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "»

Jo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ste " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jours," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "m'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gal " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rge," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moins," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "bonn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bless" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "quels " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gras " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chants " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "blancs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "quoi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "donc " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Ro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "land," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "den" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es?" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eurs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Len" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ttes," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "quitt's " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas!" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vent " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gris," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eurs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rs de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "ins " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nuls " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "croi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bras." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "»

Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "clés " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "l'ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "beau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ppa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ru" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Psitt!" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "hé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tés " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "pon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ctu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "els " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rments," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bal " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "cess" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tran" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ges " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ru" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Ah!" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "onn" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ats," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "thé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "â" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tres," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rnaux," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "mans!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llez," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sté" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rnell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vrai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mine" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "deaux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rés," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Peu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "trer?" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "laiss's " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "frais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Vrai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vient " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pass... " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "»

Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vien" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "dra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pau" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vres " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eurs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cés " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mords " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ess" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sants " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eurs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ssus," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "n'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "hô" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Qu'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "trai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "train " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "d'est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "chi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ffons." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Mou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "bro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "den" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "cle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dot," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "bret" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ttes," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "quitt's " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vien" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "dras " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Gu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "beau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mal," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "n'est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas?" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "»

Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vrai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'I" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "al " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "bo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "hè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "qua" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "és." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "là " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ves " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "gou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ttes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vient," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'eau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "pre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ron" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "xa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ctes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rnell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Seul " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller!" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Mur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er!" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "laiss's " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "t'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vas." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mess" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "mois," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ges," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "»Ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "fu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e;
" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "llu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "saient " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "J'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vin" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é
" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Hé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "las " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'as " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "»

Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vis " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "llu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Jeux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lés," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "che " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rquoi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "al " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "

Jeux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "che " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e;
" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
O" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llet " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "blanc," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "zur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é;
" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Oh " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "qu'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Car," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fun" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "

Gis," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llet," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "zur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "hu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "tin" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e
" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "toi," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fun" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Oh " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rai " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "dîner " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "

Vrai," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "l'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "phant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "clos " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "che " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rnell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Bon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ddha " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "trou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pleu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vers " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rs les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Nils " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ls des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chants " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'O" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rient," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "scu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Mais," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "sot " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "É" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "den " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Flo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
En " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Sè" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vres " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fins " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "be" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rgers " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
S'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ffrent " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "quets " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bleus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "mou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "tons " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sés," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llet " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xpi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bè" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mpe " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "flair " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "phant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "be" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rgers " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "ints " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ts de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pomm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lait," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ple " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mpu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ssant " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Tran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "squ'au " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pâ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Sè" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vres," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "gros " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Pan " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Tan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gra " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Ten" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bras " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "scients " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vres." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "

Sourds " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "van" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tés " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ris," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lau" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "és " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sca" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "rons " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'or " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mbris," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "quins " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pâ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rno" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "aient " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Chan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tant," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rgu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pris " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice ":
«Tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "frais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dès " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "mpren" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "na" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "bré " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soirs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ccou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "més," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "gaî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fants " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ts de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "â" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Seul " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lcon," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "brûlés " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ges " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
«J'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ni" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin: " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "m'ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mer " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "»O" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rgu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rgu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "rba" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Don " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Qui" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ffre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dou" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "da" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "da" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ton " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "vre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "He" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tés " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ots," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "O" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cto" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bres " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "Prin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rges " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Hi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vers " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "llots " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Quel " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "len" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rêt " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "to" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mne," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "d le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sang " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "s'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ban" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "donn" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e!" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "»
Gaz," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "hai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ches," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Feu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "sin" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "os," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ce" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rcu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ils " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ls des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "os," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Ah " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rtels " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ches." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "«Dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "jà " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "frou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "frou " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ban" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "traî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "»
Ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "mans " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "quais," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Pho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tos " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ques," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
E" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rpins," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ques," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
D'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "coup " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "p de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lai " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "«Oh " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "J'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peur," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "vons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rdu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "rou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Paul," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "bois " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mal " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Chut," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te..." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "»
Vé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tal " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
È" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Nous," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "«Ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llets " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sifs " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "el," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lun" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rdonn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mes." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "»
Vê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pres," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soirs," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chants " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vin" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
E" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lants " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ts des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soirs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "«Ils " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "m'ont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "brûlé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "bon" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "d des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "bois " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "frais," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "j'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mplo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "»
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vents " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "s'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lent," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "long " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "g des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "its " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Qu'est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "c'que " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "j'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Qu'est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "donc " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'ils " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lent " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "«Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rir," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Oh " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'ho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "spi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "»
Des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "be" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rceaux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fien" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Bons " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ples " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "gê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rnez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deux." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "O" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rgu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rgu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "rba" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Sci" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ffre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dou" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "da" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "da" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ton " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "vre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llons," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "drez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "froid." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
ELL" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "E
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Non; " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "drais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ter " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rs ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cor " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Dis," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " te " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rdu " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
ELL" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "E
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais; " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre..." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Ah " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " Tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "m'ont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "hi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "al " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "aî" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veux," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vers " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rs de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Dis," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
ELL" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "E
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cet " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vers," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
C'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rquoi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "quoi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " Ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Pri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "jà " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mbats " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
A " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mess" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "N'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "s eu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "â" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'Un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "Loi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "veut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "
Soit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "croix " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "x se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "font " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rtels," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ton " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dest" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ppell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Car " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "naî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ssons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "dois " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s te " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ress" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "sin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice ":
Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "quell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
J'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "gros " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "cons " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pho" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "to" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gra" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "phi" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "

De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'eau," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "fru" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "its," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "maints " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bacs," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "
Moi," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "naïf " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'hy" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "brant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tact " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Tremp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bats." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Bon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "
Poi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "nti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lleux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mba" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llé," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
In" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "scient," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "hè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Oh " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Veu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Vers " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rs les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pô" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "jon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "gleurs " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "gne" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rez " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fleurs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rs de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "teau " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fleurs." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "n'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "quels " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lets " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "gros " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "

Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "d'E" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Dan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ïdes " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "

Des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "prai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bles," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "
Loin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "n des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fles " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gens " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "els " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ge" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ants," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Maints " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "macs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ssa" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bles " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rdins " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "stincts " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "llir " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "quoi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rirr...
" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Cu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ssés " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lus " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "nte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "xpé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rien" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "met" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "qu'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leurs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "let" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tres " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rgu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sens " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ront " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rtyrs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Vers " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rs des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "chos " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "toi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lés " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "mou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
ELL" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "E
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "poi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gnent," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lli" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rdi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Car " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sens " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rquoi," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mpa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fleurs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ste" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "clo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "sess...
" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "as," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lle" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ras " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Gu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mal " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "sser " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tai" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fine " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "scen" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "my" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "stè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
On " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "gne" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seuls " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "terr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "as " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
ELL" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "E
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ah " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Car " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'as " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "là " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "c tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sent." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " tes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "francs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ront " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rmais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gards " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lors," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "scell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llons," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rmez" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rtell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Là," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bras " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "be" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rcé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ffo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "quez " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rfums " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ms de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "
Que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "sin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "cè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fort." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
ELL" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "E
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Tiens," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "n'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tend " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cor " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vez," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corr...
" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
LU" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I
" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
L'an" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tés " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "nten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "l'an" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lamp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Fais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "toi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ntai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "traî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bru" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "llan" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rsell" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "naî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ssons " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rtes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "mour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rdre," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lys " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " Ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tai" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Da" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ïa " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "L'Homm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mpa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "serfs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rbi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "llonn" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ants " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "clo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ques " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lles " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rpes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "nerfs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rves " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rtoi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ques." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'homm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ça " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "n'fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "

Pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "pre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rrect " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ress" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "orts," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
S'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ssais" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "onn" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "nes," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "s'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dmi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "s'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "man" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "che " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ine," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mpa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llons," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bell'," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lons." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "

Fau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "drait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voir," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cor " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "d'oi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "seaux," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tics " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fle" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "xes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "plis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pris " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "nes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Bref," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "beau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vert," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "chlo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'Homm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ça " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "n'fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "

Les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rtus " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Vo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ptés " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "quant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "chine," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "spu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ter " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vines " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "lois " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "quinent." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mpa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llons," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bell'," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lons." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "

Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "tient " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mets " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ple" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "ins " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'art," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "tond," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rfu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tru" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ffe " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tant," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "meurt " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tard " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sine " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
En " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sthu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mes." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Oh " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ple," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ez!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Non," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ça " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "

Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "be " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rsif " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mpte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "bstan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ges " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sifs " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "oi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ent " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'In" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "cen" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fols " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ge" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rmes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "scien" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Na" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rni" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte!" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "l'ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rse " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "chien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "boi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "feu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llets," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "noi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ïaut," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ïaut " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lun" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llets," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Rit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "err" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ot " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "train " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rdu," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "sto" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ppe," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lan" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ches " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "blo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "qué " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ffle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pet" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ots " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "
Croi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ent " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ouïr " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ïr les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chants " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "quets " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "D'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "paud " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "teau" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'or " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ril " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ste" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mers," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lops " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vents " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ltrant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leurs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "longs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xils " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "hu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "blots " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
La " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "bois " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
Ca" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ssé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "got " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "chau" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ffe" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mblo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ger " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
S'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vient " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "llir " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sca" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rgots," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "toi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "be" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rger " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "là" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "haut " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "gnon " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vent " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "sso" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "
Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rnet " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gras " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ssant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'tot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Ô " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "man" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "da" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rines " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "jan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lop " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "chi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ffonn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rbè" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "laud," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l'e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mbra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pur," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "c des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mots " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "â" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "bo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tte," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "
Qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mal," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "c ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grands " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "san" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "glots," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "beaux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "lacs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cs de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "al " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " Des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ronds " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'eau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lot " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :hashtransition (let ((hashtable (make-hash-table))) (loop for key in (append (listlistfor val in (append (list (list 123 85 42 24 16 12 10 9 6 4 3 2 1) (list 2385 886 762 293 201 147 141 127 82 62 49 36 2) (list 1998 1215 1124 1012 567 504 247 88 55 21 19 9 3) (list 476 330 268 208 173 144 100 81 76 31 8 6 4) (list 1962 1072 478 453 108 105 85 73 41 24 23 14 5) (list 3443 2485 2480 1001 910 839 808 208 173 6) (list 1131 434 393 182 148 132 65 61 27 22 18 16 7) (list 3355 1547 976 742 630 586 502 476 452 357 346 8) (list 3025 2430 1998 1966 1085 1008 662 9) (list 656 558 287 242 189 149 128 112 53 30 15 12 10) (list 1726 990 550 498 461 439 211 101 94 87 47 33 11) (list 1478 1213 804 547 273 242 93 75 60 12) (list 368 223 176 123 117 110 66 58 50 48 45 42 13) (list 2397 1898 1885 1451 1144 317 207 122 85 14) (list 1751 1126 997 822 656 517 282 244 239 213 116 15) (list 3336 1456 1270 899 545 370 345 61 27 16) (list 292 252 203 193 190 137 136 80 56 46 44 34 17) (list 2808 2318 2129 2122 685 670 356 187 107 18) (list 1988 1698 371 120 29 19) (list 2651 2003 1861 1580 1414 980 792 486 225 114 36 20) (list 2416 21) (list 2847 2696 1596 501 22) (list 2266 1330 480 238 108 91 23) (list 2351 1962 1402 1401 880 807 786 714 41 24) (list 1208 1093 991 828 760 679 428 347 246 194 67 25) (list 3307 3053 1102 390 216 175 26) (list 185 27) (list 3349 1391 1390 1226 676 475 393 188 135 28) (list 1324 29) (list 1184 1139 1005 53 30) (list 3054 2711 2706 1680 1551 877 576 457 283 100 76 31) (list 2755 1488 1485 1026 544 422 354 99 78 32) (list 1212 1163 97 33) (list 2207 1069 1045 684 666 494 359 297 233 203 193 34) (list 2254 1642 1261 1215 1050 512 504 271 35) (list 3095 1993 1749 792 36) (list 2193 1918 1166 718 309 69 37) (list 1196 1039 38) (list 39) (list 73 40) (list 41) (list 1857 1021 942 597 464 313 307 223 123 84 58 42) (list 1422 1052 744 556 489 338 261 259 209 191 164 129 43) (list 2751 2677 2260 1603 362 44) (list 2760 1719 1070 528 519 466 447 426 368 329 64 45) (list 2563 2303 2256 562 465 381 270 227 80 46) (list 2769 2568 2513 2321 1672 1090 933 600 498 493 47) (list 2159 2036 1636 1562 937 770 643 635 526 249 236 48) (list 1483 1374 1081 1018 816 706 385 308 279 201 49) (list 759 623 565 449 337 324 310 278 226 206 197 110 50) (list 3294 2452 1743 1326 1131 773 482 474 140 132 90 65 51) (list 2535 120 52) (list 1139 53) (list 1938 1486 1194 924 776 540 240 54) (list 2691 1297 55) (list 3453 2900 2821 2425 1424 372 56) (list 3425 3305 2654 879 811 747 516 228 57) (list 3012 2134 836 299 58) (list 2600 1703 1240 1223 796 781 683 311 267 199 59) (list 3396 3284 3021 60) (list 3336 1539 1497 1270 61) (list 3059 2988 2974 2817 2809 1304 633 141 62) (list 3010 3003 2020 1204 882 669 627 497 487 302 63) (list 1676 1346 1257 724 64) (list 474 65) (list 3279 3248 2697 2327 2264 1434 1419 686 682 613 531 66) (list 2594 2064 1619 1515 1235 1022 760 644 467 67) (list 3376 867 304 68) (list 69) (list 70) (list 1039 71) (list 72) (list 73) (list 2792 2789 1624 1536 1219 1153 748 74) (list 93 75) (list 3175 3136 3022 1551 930 76) (list 2268 2104 1921 1640 1382 1361 1002 985 743 661 651 650 77) (list 78) (list 2389 1866 1438 1230 978 79) (list 80) (list 1559 1360 1302 1115 883 695 555 421 264 234 81) (list 2448 2108 1771 1594 959 931 799 762 443 284 82) (list 3115 2639 2006 1259 1173 1019 1010 1000 115 83) (list 2702 2347 2069 1794 84) (list 1264 85) (list 1198 817 582 427 221 166 146 145 142 133 111 86) (list 3331 2839 2531 1490 1363 648 126 87) (list 2903 2557 1031 797 335 88) (list 2599 2571 1358 889 688 673 663 121 89) (list 2410 1743 1326 1131 90) (list 2266 238 91) (list 92) (list 93) (list 2771 803 784 94) (list 3103 2569 2094 1570 1440 874 693 649 268 95) (list 2727 2217 1288 99 96) (list 2405 97) (list 98) (list 99) (list 2831 2711 457 100) (list 2879 2249 1534 571 235 232 101) (list 3008 2555 1224 1064 934 722 469 342 196 169 127 102) (list 103) (list 104) (list 105) (list 2617 2079 2073 1444 1430 554 511 328 318 106) (list 107) (list 605 257 108) (list 1900 1731 886 881 841 812 181 109) (list 2247 110) (list 2223 2160 2034 1746 1435 940 725 588 427 111) (list 2119 2111 1736 1725 558 230 112) (list 3016 2565 1124 1027 869 567 286 113) (list 2003 1880 1861 1849 114) (list 2639 2068 1010 1000 115) (list 2444 2047 1757 1751 1651 1385 344 116) (list 2302 1149 1057 117) (list 2058 1954 1934 1929 1461 1373 1283 1281 920 636 380 198 118) (list 2526 1944 675 530 119) (list 120) (list 2599 1518 1358 1325 121) (list 2479 2300 1898 1885 317 122) (list 2139 1463 1315 1232 307 123) (list 2640 1695 1053 989 809 559 499 495 477 450 138 124) (list 2053 593 125) (list 648 126) (list 342 127) (list 2489 2009 1585 1501 1474 1455 719 460 431 285 280 128) (list 3184 2048 1970 1804 1479 1052 407 259 214 164 129) (list 2918 2385 2005 1169 1092 430 333 301 130) (list 1525 820 623 131) (list 132) (list 3290 671 582 398 166 133) (list 2539 1546 612 419 397 134) (list 2597 393 135) (list 292 136) (list 3150 2174 1158 1024 834 790 768 667 425 363 137) (list 3309 3238 2373 2341 1729 495 138) (list 2932 2400 2179 2011 569 322 139) (list 140) (list 141) (list 1715 925 872 817 611 221 170 142) (list 2054 672 616 143) (list 144) (list 2282 1851 1724 1629 1441 914 396 340 178 145) (list 146) (list 1476 1442 1250 205 147) (list 3036 2816 2503 2194 2113 1544 1225 777 434 182 148) (list 2656 2635 2631 2453 1597 1407 189 163 153 149) (list 3028 1489 1198 1185 1127 391 150) (list 1759 1476 151) (list 152) (list 406 153) (list 1532 154) (list 155) (list 156) (list 157) (list 158) (list 159) (list 160) (list 161) (list 162) (list 163) (list 1825 407 164) (list 2236 2153 1853 1697 1206 632 165) (list 582 418 166) (list 2450 2212 1554 1436 171 167) (list 3352 2186 168) (list 169) (list 170) (list 2450 2212 171) (list 3006 2076 180 172) (list 173) (list 2463 2276 2269 1560 866 679 347 174) (list 3105 175) (list 2306 1136 176) (list 1471 1007 837 710 678 591 532 375 353 330 325 250 177) (list 178) (list 179) (list 2834 180) (list 181) (list 182) (list 2908 2848 2237 1457 1227 183) (list 184) (list 185) (list 186) (list 187) (list 3450 2309 1740 1433 188) (list 2631 189) (list 2372 1972 1925 1214 522 518 432 424 388 355 350 190) (list 1368 1248 1243 1205 1046 364 332 319 191) (list 3334 3185 2543 1378 1342 698 192) (list 297 193) (list 3162 2142 389 303 194) (list 3043 1370 1317 936 927 658 211 195) (list 469 196) (list 2935 1575 1352 750 197) (list 1934 1709 1557 198) (list 2922 2731 2402 2098 1703 199) (list 2998 2796 2360 994 608 526 200) (list 2088 1543 955 201) (list 2930 2734 2109 1508 1167 721 692 334 275 241 202) (list 2653 2614 2207 666 203) (list 3461 2175 2074 204) (list 205) (list 3264 3261 2952 1760 590 206) (list 751 445 306 207) (list 3443 2480 1292 1151 208) (list 3023 2684 2344 1422 765 744 580 556 376 366 209) (list 2954 2382 2367 1931 828 215 210) (list 3043 1370 211) (list 2514 1686 1535 1072 785 312 212) (list 2924 2545 1924 896 213) (list 2048 1804 259 214) (list 3042 2382 215) (list 216) (list 1706 217) (list 218) (list 219) (list 220) (list 221) (list 2039 1889 1427 594 222) (list 2870 942 223) (list 2971 2899 1893 728 687 641 637 508 224) (list 3329 2502 2415 1721 980 225) (list 3243 3096 2241 337 226) (list 2984 2334 1576 1447 227) (list 228) (list 229) (list 230) (list 231) (list 232) (list 3304 3204 833 359 233) (list 2615 1365 1302 1099 234) (list 3203 2725 2554 235) (list 2187 1572 236) (list 2786 1142 773 609 237) (list 238) (list 1908 258 239) (list 2649 2546 2082 1938 240) (list 721 275 241) (list 3439 3434 3135 3015 1733 1478 242) (list 1956 1218 1105 909 753 713 573 245 243) (list 1655 1062 898 282 244) (list 1105 897 753 245) (list 2583 246) (list 3392 2820 2436 2066 1458 1129 645 247) (list 3215 2875 2591 1306 272 248) (list 643 249) (list 2523 1512 1492 995 353 250) (list 3348 2634 690 251) (list 252) (list 2618 2577 2564 2549 1926 349 253) (list 3247 254) (list 255) (list 256) (list 257) (list 258) (list 1804 259) (list 1663 1657 552 295 261 260) (list 261) (list 2468 1874 1800 1592 1480 939 891 863 379 320 262) (list 767 263) (list 264) (list 2616 265) (list 2589 266) (list 267) (list 2977 1440 1287 268) (list 2688 2272 2251 1781 1514 1280 1029 911 696 587 458 326 269) (list 3448 3413 3201 2496 653 270) (list 2985 271) (list 3215 272) (list 273) (list 3435 924 776 274) (list 275) (list 635 276) (list 1529 1113 277) (list 278) (list 2499 2242 1526 1018 706 279) (list 3232 2916 1585 460 280) (list 2582 2084 909 713 281) (list 282) (list 3429 2925 2706 2644 877 283) (list 2045 931 284) (list 2802 2489 1969 1819 1774 1474 1177 712 285) (list 1848 1124 869 286) (list 549 287) (list 2578 423 289 288) (list 289) (list 2199 290) (list 291) (list 292) (list 2291 1766 1609 1454 1172 871 668 563 433 373 293) (list 1192 489 470 361 294) (list 295) (list 296) (list 297) (list 3305 2654 298) (list 299) (list 1341 300) (list 301) (list 2506 627 472 302) (list 1252 303) (list 304) (list 2758 1948 1933 1616 305) (list 2660 306) (list 2139 1692 307) (list 3013 2799 308) (list 3299 1166 309) (list 2983 2914 2867 2287 1321 961 759 565 310) (list 3020 2976 1949 311) (list 2923 1072 312) (list 2841 2741 2593 1626 464 313) (list 2070 482 314) (list 1108 315) (list 316) (list 317) (list 905 328 318) (list 319) (list 2468 1871 320) (list 321) (list 322) (list 385 323) (list 324) (list 3405 3244 2936 2429 2248 591 375 325) (list 3258 3200 2226 1618 1239 947 326) (list 2824 1451 327) (list 328) (list 447 329) (list 3341 3302 1449 1347 330) (list 3460 3245 3237 1912 1416 1100 702 694 603 599 515 503 331) (list 332) (list 2385 333) (list 2734 334) (list 3189 2557 335) (list 2638 2607 336) (list 337) (list 2953 2171 1590 1523 918 338) (list 3277 2602 1664 1267 1187 1175 660 543 537 365 339) (list 2950 1629 396 340) (list 2839 1363 341) (list 342) (list 1793 1380 343) (list 2444 344) (list 345) (list 1533 346) (list 347) (list 2383 1120 1089 1049 1041 1014 348) (list 349) (list 2753 2220 1718 350) (list 2611 2321 351) (list 2785 352) (list 353) (list 1878 1865 1278 1162 354) (list 2218 2203 355) (list 356) (list 2233 1084 357) (list 3165 1534 358) (list 359) (list 1319 437 360) (list 361) (list 362) (list 3158 363) (list 1248 364) (list 365) (list 366) (list 367) (list 368) (list 2689 2012 1955 1200 566 369) (list 370) (list 1183 371) (list 372) (list 2865 2291 1766 1454 871 373) (list 2032 1977 1914 1690 1446 917 705 374) (list 375) (list 3381 2684 580 376) (list 377) (list 378) (list 379) (list 920 380) (list 2563 2317 2314 2157 1558 381) (list 2181 1274 1247 768 382) (list 383) (list 384) (list 385) (list 2816 1544 1396 386) (list 1531 387) (list 388) (list 389) (list 1135 1102 390) (list 391) (list 392) (list 393) (list 3333 2504 2071 1744 1602 394) (list 395) (list 396) (list 2539 397) (list 398) (list 399) (list 400) (list 401) (list 415 402) (list 403) (list 404) (list 405) (list 406) (list 407) (list 3277 2813 543 537 408) (list 409) (list 410) (list 411) (list 412) (list 413) (list 414) (list 415) (list 416) (list 417) (list 418) (list 419) (list 420) (list 421) (list 2755 2202 1026 422) (list 423) (list 424) (list 1738 1647 425) (list 2898 2182 426) (list 725 427) (list 3052 2663 2144 1336 1128 926 428) (list 2238 1620 429) (list 430) (list 431) (list 2372 814 432) (list 2031 717 433) (list 434) (list 1569 1498 1392 1207 794 546 439 435) (list 3161 2541 1301 436) (list 437) (list 438) (list 439) (list 2793 2735 1987 1694 1601 1406 1343 824 601 440) (list 1242 441) (list 442) (list 443) (list 2333 1556 640 444) (list 3345 445) (list 905 446) (list 447) (list 2205 1258 816 448) (list 2428 449) (list 3097 2288 450) (list 3155 3038 451) (list 452) (list 2365 453) (list 1452 1413 861 845 574 454) (list 455) (list 456) (list 457) (list 2688 2645 2520 1280 458) (list 2815 1521 1189 948 459) (list 460) (list 3363 3147 1822 1775 982 894 461) (list 2093 1606 1510 1509 1499 782 699 462) (list 463) (list 464) (list 1273 492 465) (list 2760 1448 654 528 466) (list 2958 467) (list 1317 468) (list 469) (list 470) (list 2005 471) (list 472) (list 473) (list 474) (list 1323 676 475) (list 476) (list 3087 2105 2026 809 592 477) (list 2642 1856 1730 1638 478) (list 3315 3058 2655 2627 787 754 681 479) (list 480) (list 1272 826 606 597 481) (list 482) (list 2787 2338 2274 1945 1354 483) (list 484) (list 485) (list 486) (list 2466 487) (list 2774 2507 1567 488) (list 1192 489) (list 2353 1667 1400 510 490) (list 2163 951 709 507 491) (list 492) (list 493) (list 1045 494) (list 2341 495) (list 2136 1753 1714 496) (list 497) (list 3255 2769 933 498) (list 3154 3148 2931 2052 989 499) (list 2289 2106 1959 500) (list 501) (list 3131 976 859 742 630 586 502) (list 702 603 515 503) (list 3214 1992 1642 504) (list 2152 862 621 505) (list 510 506) (list 507) (list 508) (list 2152 625 509) (list 510) (list 2191 2166 2079 2073 1869 554 511) (list 1261 512) (list 2847 2696 513) (list 976 859 742 630 586 514) (list 515) (list 3445 885 879 516) (list 2081 517) (list 2586 2423 1925 716 522 518) (list 1787 1719 815 519) (list 3442 520) (list 3389 1181 656 521) (list 522) (list 3425 747 523) (list 2134 524) (list 525) (list 526) (list 2856 527) (list 528) (list 2860 2316 2183 1677 529) (list 530) (list 531) (list 3110 2115 1161 901 678 579 532) (list 3303 2879 2249 1685 571 533) (list 3253 534) (list 1785 535) (list 536) (list 537) (list 3025 538) (list 539) (list 540) (list 2083 1821 541) (list 542) (list 543) (list 2710 544) (list 3431 3192 1289 545) (list 1498 546) (list 2131 1550 802 775 547) (list 3016 548) (list 549) (list 550) (list 1091 659 551) (list 552) (list 553) (list 554) (list 906 555) (list 2344 1333 556) (list 3063 1426 1249 557) (list 558) (list 2010 1752 559) (list 3088 2762 560) (list 561) (list 562) (list 2335 1203 563) (list 2193 1507 718 564) (list 2867 1321 565) (list 566) (list 567) (list 646 568) (list 569) (list 2462 2061 1965 570) (list 571) (list 3326 3174 3083 3073 2722 1494 1269 923 572) (list 573) (list 1413 574) (list 575) (list 576) (list 3176 2551 577) (list 2927 578) (list 579) (list 580) (list 632 581) (list 582) (list 2512 2244 2128 1728 1716 915 789 583) (list 1748 584) (list 585) (list 586) (list 2234 2155 587) (list 2118 588) (list 589) (list 3264 3261 590) (list 591) (list 2026 592) (list 593) (list 594) (list 595) (list 596) (list 597) (list 3347 837 710 598) (list 2141 599) (list 1672 600) (list 601) (list 3355 602) (list 702 603) (list 604) (list 605) (list 606) (list 607) (list 608) (list 773 609) (list 610) (list 611) (list 612) (list 727 613) (list 1763 1291 1147 1144 614) (list 615) (list 616) (list 617) (list 618) (list 619) (list 620) (list 621) (list 626 622) (list 623) (list 2501 1940 1883 962 957 641 624) (list 625) (list 626) (list 627) (list 3196 628) (list 629) (list 859 630) (list 631) (list 632) (list 633) (list 3433 692 634) (list 635) (list 3313 2562 2361 2188 2024 1777 636) (list 2874 944 637) (list 1632 913 638) (list 959 639) (list 640) (list 641) (list 2875 2591 642) (list 643) (list 1088 644) (list 2408 645) (list 646) (list 647) (list 648) (list 3292 2331 874 649) (list 650) (list 2716 1982 651) (list 2765 2272 2117 1781 1514 652) (list 2496 653) (list 654) (list 655) (list 656) (list 3409 3397 3084 2990 2657 1048 805 657) (list 2491 658) (list 659) (list 2602 660) (list 661) (list 1996 1579 1410 662) (list 2571 2299 889 663) (list 3018 2285 1584 1565 1395 664) (list 665) (list 666) (list 3093 834 667) (list 3152 1609 1506 704 668) (list 3195 2858 1204 669) (list 3358 1083 670) (list 671) (list 672) (list 1583 673) (list 2921 2324 674) (list 675) (list 676) (list 1434 677) (list 678) (list 2463 1614 679) (list 3127 2369 1095 806 680) (list 681) (list 1146 682) (list 1541 1223 683) (list 3143 3092 2099 684) (list 2808 685) (list 2327 1222 1160 686) (list 728 687) (list 1884 1564 688) (list 946 689) (list 690) (list 691) (list 692) (list 3267 693) (list 1671 694) (list 3138 2979 695) (list 2823 696) (list 2439 2235 1294 697) (list 698) (list 699) (list 1987 700) (list 3355 701) (list 702) (list 2296 703) (list 704) (list 705) (list 2499 1018 706) (list 707) (list 708) (list 951 709) (list 710) (list 1594 1348 902 711) (list 712) (list 2582 909 713) (list 714) (list 2148 715) (list 716) (list 2031 717) (list 718) (list 3146 719) (list 3229 1820 720) (list 3234 721) (list 3378 2700 722) (list 3003 2773 2768 1769 723) (list 1676 724) (list 725) (list 726) (list 727) (list 728) (list 729) (list 3131 730) (list 731) (list 732) (list 733) (list 734) (list 735) (list 736) (list 737) (list 738) (list 739) (list 740) (list 741) (list 976 742) (list 1328 1311 743) (list 744) (list 1634 1193 1047 745) (list 1972 1646 746) (list 747) (list 2789 1605 748) (list 3008 749) (list 750) (list 751) (list 2661 822 752) (list 753) (list 3058 754) (list 1688 755) (list 756) (list 757) (list 758) (list 759) (list 760) (list 3398 3086 2959 2281 2270 2041 1228 865 764 761) (list 762) (list 1862 1093 935 763) (list 764) (list 765) (list 2713 2214 766) (list 767) (list 768) (list 2902 2092 769) (list 2023 770) (list 3091 1573 796 781 771) (list 2855 2681 772) (list 773) (list 2391 1979 774) (list 775) (list 776) (list 2113 777) (list 2548 1712 1171 778) (list 779) (list 780) (list 781) (list 3034 782) (list 1538 929 783) (list 2882 784) (list 785) (list 786) (list 787) (list 788) (list 789) (list 2091 790) (list 3031 791) (list 3095 792) (list 2608 2503 793) (list 1300 794) (list 2561 795) (list 796) (list 2606 1031 797) (list 3190 798) (list 799) (list 800) (list 801) (list 802) (list 803) (list 1496 804) (list 3409 3397 3385 3375 3084 805) (list 3127 806) (list 2146 807) (list 808) (list 809) (list 3149 2342 2253 1133 810) (list 811) (list 2246 886 812) (list 813) (list 2372 814) (list 1787 1179 815) (list 2205 816) (list 2993 2211 2089 817) (list 2459 2161 1852 1799 1186 818) (list 819) (list 820) (list 821) (list 822) (list 2625 2149 1985 1669 1386 1068 1063 988 823) (list 1601 824) (list 825) (list 826) (list 827) (list 828) (list 2595 1335 829) (list 830) (list 831) (list 832) (list 833) (list 834) (list 835) (list 1340 836) (list 837) (list 2062 1623 996 838) (list 839) (list 3427 2475 2419 1429 1152 840) (list 841) (list 1012 842) (list 1904 843) (list 844) (list 845) (list 846) (list 847) (list 848) (list 849) (list 850) (list 851) (list 852) (list 853) (list 854) (list 855) (list 856) (list 857) (list 858) (list 859) (list 860) (list 861) (list 862) (list 3394 863) (list 1235 864) (list 865) (list 866) (list 1615 867) (list 2665 2574 2009 868) (list 869) (list 870) (list 871) (list 872) (list 3331 2994 873) (list 874) (list 2791 875) (list 876) (list 877) (list 3237 3226 3137 878) (list 879) (list 880) (list 1900 881) (list 2355 882) (list 2939 1920 1770 1115 883) (list 3460 1100 884) (list 885) (list 886) (list 2818 2720 1850 1772 1722 1610 1484 1415 1065 887) (list 888) (list 889) (list 1377 890) (list 891) (list 1483 892) (list 893) (list 894) (list 895) (list 896) (list 897) (list 1655 1653 898) (list 899) (list 3248 1540 1290 900) (list 901) (list 902) (list 903) (list 904) (list 905) (list 906) (list 907) (list 908) (list 909) (list 910) (list 3447 1293 911) (list 912) (list 913) (list 914) (list 2128 915) (list 2517 916) (list 3066 917) (list 918) (list 919) (list 920) (list 2683 2025 1779 1613 1238 921) (list 922) (list 923) (list 924) (list 925) (list 926) (list 927) (list 928) (list 929) (list 930) (list 931) (list 3357 2938 2020 1367 932) (list 933) (list 2612 1351 934) (list 935) (list 936) (list 2492 1562 1254 937) (list 2999 938) (list 939) (list 1746 940) (list 1889 941) (list 2870 942) (list 2742 2058 1943 1795 952 943) (list 944) (list 945) (list 946) (list 947) (list 1521 948) (list 949) (list 950) (list 951) (list 952) (list 953) (list 954) (list 955) (list 956) (list 957) (list 958) (list 959) (list 1918 960) (list 2914 961) (list 1883 962) (list 963) (list 964) (list 965) (list 966) (list 967) (list 968) (list 969) (list 970) (list 971) (list 972) (list 973) (list 974) (list 975) (list 976) (list 1211 977) (list 978) (list 979) (list 980) (list 981) (list 982) (list 983) (list 984) (list 985) (list 986) (list 987) (list 1985 988) (list 2052 989) (list 3239 2852 990) (list 2279 1704 1208 991) (list 2991 2955 1863 1236 992) (list 2278 1791 1286 993) (list 994) (list 2523 1877 995) (list 996) (list 2648 997) (list 2472 998) (list 1910 999) (list 1000) (list 1001) (list 2268 2104 1640 1382 1002) (list 3140 1329 1003) (list 1004) (list 1005) (list 1006) (list 1007) (list 2968 2430 1966 1008) (list 3133 1580 1036 1009) (list 1010) (list 1011) (list 1903 1012) (list 1013) (list 1041 1014) (list 1338 1158 1024 1015) (list 1506 1016) (list 1017) (list 1018) (list 1259 1019) (list 1020) (list 1021) (list 2594 2064 1316 1022) (list 2862 1120 1089 1023) (list 1505 1024) (list 2906 2297 1648 1025) (list 1026) (list 1879 1027) (list 3179 1028) (list 1029) (list 2766 2739 2521 1240 1030) (list 1031) (list 2393 1466 1388 1155 1060 1032) (list 2964 1033) (list 1471 1034) (list 1035) (list 1036) (list 2982 1037) (list 1038) (list 1039) (list 1040) (list 1041) (list 3387 1042) (list 1043) (list 1044) (list 1045) (list 2542 1046) (list 1645 1047) (list 1048) (list 3386 1157 1049) (list 2863 1050) (list 2986 1078 1051) (list 1052) (list 2178 1958 1053) (list 2387 2374 2018 1421 1054) (list 1055) (list 1056) (list 1057) (list 1058) (list 1059) (list 1060) (list 1061) (list 1062) (list 1600 1063) (list 1064) (list 1065) (list 2776 1661 1066) (list 1067) (list 1068) (list 1098 1069) (list 3340 1070) (list 2605 1788 1071) (list 1072) (list 2366 1957 1666 1662 1174 1073) (list 1074) (list 1075) (list 1076) (list 1077) (list 1078) (list 1079) (list 1080) (list 1081) (list 1256 1190 1114 1082) (list 1083) (list 1084) (list 1085) (list 1086) (list 1087) (list 1088) (list 1120 1089) (list 2850 1090) (list 1091) (list 2733 1169 1092) (list 1093) (list 2280 2065 1094) (list 2369 1095) (list 2422 1096) (list 1097) (list 1098) (list 1099) (list 1100) (list 2142 1101) (list 1102) (list 1103) (list 1104) (list 1105) (list 2085 1106) (list 1107) (list 1108) (list 1109) (list 1110) (list 1111) (list 1112) (list 1113) (list 1114) (list 3459 1115) (list 2980 2298 1116) (list 1117) (list 1118) (list 1119) (list 1120) (list 1121) (list 1122) (list 1123) (list 1124) (list 2417 1262 1125) (list 2693 2471 1126) (list 1798 1758 1127) (list 2663 1128) (list 1129) (list 3297 1130) (list 2410 1131) (list 3037 2017 1695 1132) (list 1133) (list 1134) (list 1135) (list 2306 1136) (list 1137) (list 1138) (list 1139) (list 1140) (list 1141) (list 1142) (list 1143) (list 2623 1144) (list 3315 1145) (list 1146) (list 1147) (list 2624 1148) (list 1149) (list 1150) (list 1151) (list 1152) (list 1153) (list 1154) (list 1155) (list 1156) (list 1157) (list 1158) (list 3159 1432 1356 1159) (list 1160) (list 1161) (list 1278 1162) (list 3407 2806 1163) (list 2406 1164) (list 1165) (list 1166) (list 2930 1508 1167) (list 1168) (list 1169) (list 1170) (list 1171) (list 1398 1172) (list 1173) (list 1174) (list 1175) (list 1176) (list 1177) (list 1178) (list 1179) (list 1180) (list 1181) (list 1182) (list 1183) (list 1184) (list 1185) (list 2459 1799 1186) (list 2709 1187) (list 1188) (list 2815 1189) (list 3458 1190) (list 1567 1191) (list 1192) (list 1193) (list 1296 1194) (list 1195) (list 1196) (list 1197) (list 1198) (list 3210 2729 2376 2224 2176 1630 1404 1199) (list 1200) (list 1201) (list 1202) (list 1203) (list 2858 1204) (list 3062 2467 1368 1205) (list 1206) (list 1207) (list 1208) (list 1516 1209) (list 3164 1210) (list 1211) (list 1212) (list 3408 1213) (list 3440 2783 2723 2132 1214) (list 2695 2424 1215) (list 2055 1216) (list 1217) (list 1218) (list 1219) (list 1220) (list 1221) (list 1222) (list 1223) (list 2767 1950 1792 1574 1224) (list 3108 3036 1225) (list 1226) (list 1227) (list 1228) (list 1229) (list 1230) (list 1231) (list 1315 1232) (list 1266 1233) (list 1234) (list 1235) (list 1285 1236) (list 1237) (list 1238) (list 2744 1239) (list 1809 1240) (list 1694 1406 1241) (list 1242) (list 1243) (list 2260 1244) (list 1245) (list 1246) (list 1247) (list 1248) (list 3063 1426 1249) (list 1250) (list 1251) (list 1252) (list 1253) (list 1254) (list 1255) (list 1256) (list 1257) (list 1258) (list 1259) (list 1444 1260) (list 1261) (list 1262) (list 2675 1942 1895 1263) (list 1264) (list 1265) (list 1266) (list 1267) (list 1268) (list 3384 1269) (list 1270) (list 1271) (list 1272) (list 1273) (list 1274) (list 1275) (list 1276) (list 1277) (list 1278) (list 1279) (list 1280) (list 2525 2156 1612 1373 1281) (list 3050 2228 1954 1929 1778 1283 1282) (list 2749 2747 1283) (list 2861 1284) (list 1285) (list 1286) (list 1287) (list 2404 2217 1288) (list 1289) (list 1290) (list 1291) (list 1292) (list 1293) (list 1294) (list 1295) (list 1296) (list 1297) (list 2651 1298) (list 1299) (list 1300) (list 1301) (list 1302) (list 2907 1309 1303) (list 1304) (list 1305) (list 1306) (list 2567 1307) (list 1308) (list 1309) (list 1310) (list 1311) (list 1312) (list 1313) (list 1314) (list 1315) (list 1316) (list 1317) (list 1318) (list 1319) (list 3145 1320) (list 1321) (list 1322) (list 1323) (list 1324) (list 2599 1325) (list 1743 1326) (list 2527 1327) (list 1328) (list 1329) (list 1907 1330) (list 1331) (list 1332) (list 1333) (list 1334) (list 1335) (list 2144 1336) (list 1337) (list 1338) (list 1339) (list 1340) (list 1341) (list 1342) (list 1343) (list 1344) (list 1345) (list 1346) (list 3302 1347) (list 1348) (list 2938 1349) (list 1350) (list 1351) (list 1352) (list 1353) (list 1354) (list 1355) (list 1356) (list 1357) (list 1358) (list 2256 1359) (list 1360) (list 3139 1974 1921 1578 1361) (list 1724 1362) (list 1363) (list 3339 1364) (list 1365) (list 1366) (list 1367) (list 1368) (list 1369) (list 1370) (list 1371) (list 1372) (list 1373) (list 3287 2229 1710 1678 1374) (list 1375) (list 1376) (list 1377) (list 1378) (list 3403 1379) (list 1380) (list 1381) (list 1382) (list 3343 2912 1473 1383) (list 1384) (list 1385) (list 1386) (list 1387) (list 1388) (list 1389) (list 1390) (list 2630 2629 1391) (list 1392) (list 3452 2392 1393) (list 1394) (list 1395) (list 1396) (list 1712 1397) (list 1398) (list 1399) (list 1400) (list 1401) (list 2147 1402) (list 1403) (list 1404) (list 1405) (list 1406) (list 3045 1824 1407) (list 1408) (list 1409) (list 1410) (list 1411) (list 1412) (list 1413) (list 1414) (list 2720 2447 1850 1722 1660 1415) (list 3213 2295 1912 1416) (list 2604 1417) (list 1418) (list 1419) (list 1420) (list 1421) (list 1422) (list 1658 1423) (list 1424) (list 1644 1425) (list 1426) (list 1427) (list 1428) (list 1429) (list 1430) (list 2174 2167 1431) (list 1432) (list 1740 1433) (list 1434) (list 3209 2511 1435) (list 2185 1916 1436) (list 2001 1437) (list 1438) (list 1439) (list 1440) (list 1441) (list 2951 1442) (list 1443) (list 1444) (list 2192 1445) (list 1446) (list 1447) (list 2760 1448) (list 1449) (list 3200 1808 1450) (list 1451) (list 1452) (list 1453) (list 1766 1454) (list 3228 2518 1455) (list 2575 1456) (list 1457) (list 3296 2436 1458) (list 1459) (list 1460) (list 1461) (list 3314 1796 1462) (list 1463) (list 1693 1464) (list 1465) (list 1466) (list 1467) (list 1468) (list 1469) (list 1470) (list 1471) (list 2715 1513 1472) (list 3343 1473) (list 1819 1474) (list 1475) (list 1476) (list 1477) (list 1478) (list 3276 3184 3074 1479) (list 1480) (list 1872 1481) (list 1482) (list 1483) (list 3212 2800 1484) (list 1488 1485) (list 1486) (list 3081 1487) (list 1488) (list 2728 1489) (list 1490) (list 2036 1491) (list 1492) (list 1493) (list 1494) (list 1495) (list 1496) (list 1497) (list 1498) (list 1499) (list 3035 1674 1500) (list 1847 1501) (list 2803 1952 1502) (list 1503) (list 1504) (list 1505) (list 1506) (list 1507) (list 1508) (list 1509) (list 1510) (list 1511) (list 1512) (list 1513) (list 2495 2117 1781 1514) (list 1619 1515) (list 1516) (list 1517) (list 1518) (list 1519) (list 1520) (list 1521) (list 1522) (list 1590 1523) (list 1524) (list 1525) (list 1526) (list 3438 3266 1527) (list 1528) (list 1529) (list 1530) (list 1531) (list 1532) (list 1533) (list 1534) (list 2529 1923 1686 1535) (list 1536) (list 1606 1537) (list 1538) (list 1539) (list 1540) (list 1541) (list 2796 2360 1542) (list 1543) (list 1544) (list 1545) (list 1546) (list 1547) (list 1548) (list 1549) (list 1550) (list 1551) (list 2667 1552) (list 1553) (list 1554) (list 1917 1555) (list 1556) (list 1702 1557) (list 2314 1558) (list 1559) (list 2276 1560) (list 1561) (list 1562) (list 2414 2151 1563) (list 1564) (list 1565) (list 1566) (list 1567) (list 1568) (list 1569) (list 2737 1980 1570) (list 3102 3072 1571) (list 1572) (list 1573) (list 1574) (list 2935 1575) (list 1576) (list 1577) (list 1578) (list 1579) (list 1580) (list 3330 1581) (list 1582) (list 1583) (list 2285 1584) (list 1585) (list 2666 1680 1586) (list 2520 1587) (list 1588) (list 1589) (list 1590) (list 1591) (list 1592) (list 3251 2714 1622 1593) (list 1594) (list 2482 1595) (list 1596) (list 3027 1597) (list 1598) (list 1599) (list 1600) (list 1601) (list 3333 1602) (list 3157 1603) (list 1604) (list 1605) (list 1606) (list 1607) (list 1608) (list 1609) (list 3113 2775 2126 1610) (list 1611) (list 1612) (list 1613) (list 1614) (list 1615) (list 1616) (list 1617) (list 1618) (list 1619) (list 1620) (list 1621) (list 1622) (list 1623) (list 1624) (list 1625) (list 1626) (list 1627) (list 1628) (list 1629) (list 2376 1630) (list 1631) (list 1632) (list 1633) (list 1634) (list 3001 1635) (list 1636) (list 1637) (list 1638) (list 1639) (list 1640) (list 1975 1641) (list 2718 1642) (list 2864 2425 1643) (list 1644) (list 1645) (list 1646) (list 1647) (list 1648) (list 1649) (list 1650) (list 1651) (list 1652) (list 1653) (list 1654) (list 1655) (list 1656) (list 1657) (list 1658) (list 2240 1659) (list 1660) (list 1661) (list 1662) (list 1663) (list 2837 1664) (list 1665) (list 1666) (list 2353 2078 1667) (list 2686 2029 1668) (list 2051 1669) (list 1670) (list 1671) (list 1672) (list 2093 1673) (list 1674) (list 1675) (list 1676) (list 2860 1677) (list 1678) (list 1679) (list 1680) (list 1681) (list 1682) (list 1683) (list 1684) (list 1685) (list 1686) (list 2627 1687) (list 1688) (list 1689) (list 1690) (list 1691) (list 1692) (list 1693) (list 1694) (list 1695) (list 2027 1696) (list 2844 1697) (list 1698) (list 1699) (list 1700) (list 1701) (list 1702) (list 2098 1703) (list 2279 1789 1704) (list 1705) (list 1706) (list 3107 1707) (list 1708) (list 1709) (list 1710) (list 1711) (list 1712) (list 1713) (list 1714) (list 1715) (list 2244 2231 2090 1716) (list 1717) (list 1718) (list 1719) (list 2899 1893 1720) (list 1721) (list 1722) (list 1995 1723) (list 1724) (list 1725) (list 1726) (list 2876 2110 1727) (list 1728) (list 1729) (list 1856 1730) (list 1731) (list 1732) (list 1733) (list 1734) (list 1735) (list 1736) (list 1737) (list 1738) (list 1739) (list 1740) (list 1741) (list 1742) (list 1743) (list 2071 1744) (list 1745) (list 1746) (list 2512 1747) (list 1748) (list 1749) (list 2102 1750) (list 1751) (list 1752) (list 1753) (list 1754) (list 1755) (list 1756) (list 1757) (list 2458 1758) (list 1759) (list 1760) (list 1761) (list 1762) (list 1763) (list 1764) (list 1765) (list 1766) (list 3153 1767) (list 1768) (list 1769) (list 1770) (list 1771) (list 1772) (list 3114 2448 1773) (list 2802 1774) (list 1775) (list 1776) (list 1777) (list 3050 1778) (list 1779) (list 1780) (list 1781) (list 2646 1782) (list 1783) (list 1784) (list 1785) (list 1786) (list 1787) (list 1788) (list 1789) (list 1790) (list 1791) (list 1792) (list 2443 1793) (list 2702 1794) (list 1795) (list 1796) (list 1797) (list 1798) (list 2459 1799) (list 1800) (list 1801) (list 1802) (list 1803) (list 1804) (list 1805) (list 1806) (list 1807) (list 1808) (list 1809) (list 1810) (list 1811) (list 1812) (list 1813) (list 1814) (list 1815) (list 1816) (list 1817) (list 1818) (list 1819) (list 1820) (list 1821) (list 1822) (list 1823) (list 1824) (list 1825) (list 1826) (list 1827) (list 1828) (list 1829) (list 1830) (list 1831) (list 1832) (list 1833) (list 1834) (list 1835) (list 1836) (list 1837) (list 1838) (list 1839) (list 1840) (list 1841) (list 1842) (list 1843) (list 1844) (list 1845) (list 1846) (list 1847) (list 1848) (list 1849) (list 2447 1911 1850) (list 2538 2127 1851) (list 2708 1852) (list 1853) (list 2845 1854) (list 1855) (list 1856) (list 1857) (list 1858) (list 1859) (list 1860) (list 1861) (list 1862) (list 1863) (list 1864) (list 1865) (list 1866) (list 1867) (list 1868) (list 1869) (list 1870) (list 1871) (list 1872) (list 1873) (list 1874) (list 3395 2441 2215 1875) (list 1876) (list 1877) (list 1878) (list 1879) (list 2003 1880) (list 1881) (list 1882) (list 1883) (list 1884) (list 2479 1898 1885) (list 1886) (list 1887) (list 1888) (list 1889) (list 1937 1890) (list 1891) (list 1892) (list 1893) (list 2470 1894) (list 1942 1895) (list 1896) (list 1897) (list 1898) (list 2351 1962 1899) (list 1900) (list 1901) (list 1902) (list 1903) (list 1904) (list 1905) (list 1906) (list 1907) (list 1908) (list 1909) (list 1910) (list 2447 1911) (list 1912) (list 3227 3112 1913) (list 1977 1914) (list 2223 1915) (list 1916) (list 1917) (list 1918) (list 3300 3061 3010 2896 2780 1919) (list 1920) (list 1921) (list 1922) (list 1923) (list 1924) (list 1925) (list 2219 1926) (list 2396 1927) (list 1928) (list 1929) (list 2750 2189 1930) (list 1931) (list 1932) (list 1933) (list 1934) (list 3051 2184 2034 1935) (list 1936) (list 1937) (list 1938) (list 3282 3230 1939) (list 1940) (list 1941) (list 1942) (list 2058 1943) (list 1944) (list 1945) (list 1946) (list 1947) (list 1948) (list 1949) (list 1950) (list 1951) (list 1952) (list 1953) (list 1954) (list 1955) (list 1956) (list 1957) (list 2399 1958) (list 1959) (list 1960) (list 1961) (list 1962) (list 2640 1963) (list 1964) (list 1965) (list 1966) (list 1997 1967) (list 1968) (list 2489 1969) (list 2381 1970) (list 1971) (list 1972) (list 2754 2724 2587 1973) (list 1974) (list 1975) (list 1976) (list 1977) (list 2337 2263 1978) (list 1979) (list 1980) (list 1981) (list 1982) (list 1983) (list 1984) (list 1985) (list 1986) (list 1987) (list 3241 1988) (list 1989) (list 1990) (list 1991) (list 1992) (list 1993) (list 2720 1994) (list 1995) (list 1996) (list 1997) (list 1998) (list 2558 1999) (list 2000) (list 2001) (list 2002) (list 2003) (list 2004) (list 2005) (list 2346 2006) (list 2007) (list 2008) (list 2009) (list 2010) (list 2011) (list 2012) (list 2013) (list 2014) (list 2015) (list 2016) (list 2017) (list 2018) (list 2379 2019) (list 2020) (list 2897 2021) (list 2022) (list 2023) (list 2024) (list 2683 2025) (list 2026) (list 2027) (list 2028) (list 2029) (list 2030) (list 2031) (list 2222 2032) (list 2313 2033) (list 2034) (list 2330 2035) (list 2036) (list 2797 2037) (list 2038) (list 2039) (list 2040) (list 2041) (list 2042) (list 2043) (list 2044) (list 2045) (list 2046) (list 2047)) (list (list 2048) (list 2049) (list 3076 2050) (list 2051) (list 2052) (list 2053) (list 2054) (list 2055) (list 2056) (list 2675 2057) (list 2058) (list 2362 2059) (list 2060) (list 2061) (list 2062) (list 2063) (list 2064) (list 2065) (list 2066) (list 2465 2067) (list 2068) (list 2069) (list 2070) (list 2071) (list 2072) (list 2073) (list 2074) (list 2075) (list 3006 2076) (list 2835 2077) (list 2078) (list 2079) (list 2080) (list 2081) (list 2082) (list 2083) (list 2084) (list 2085) (list 2086) (list 2087) (list 2088) (list 2089) (list 2244 2231 2090) (list 2091) (list 2092) (list 2093) (list 2094) (list 2095) (list 2333 2096) (list 2097) (list 2098) (list 2099) (list 2100) (list 2101) (list 2102) (list 2103) (list 2104) (list 2105) (list 2106) (list 2107) (list 2108) (list 2109) (list 2110) (list 2111) (list 2112) (list 2113) (list 3208 2114) (list 3110 2115) (list 2116) (list 2117) (list 2118) (list 2119) (list 2120) (list 2121) (list 2122) (list 2258 2123) (list 2124) (list 2125) (list 2126) (list 2127) (list 2128) (list 2232 2129) (list 3160 2130) (list 2131) (list 2132) (list 3425 2133) (list 2134) (list 2135) (list 2136) (list 2170 2137) (list 2138) (list 2139) (list 3347 2140) (list 2141) (list 2142) (list 2143) (list 2144) (list 2145) (list 2146) (list 2147) (list 2148) (list 2149) (list 2150) (list 2151) (list 2152) (list 2153) (list 2154) (list 2155) (list 2156) (list 2157) (list 2158) (list 2159) (list 2160) (list 2161) (list 2162) (list 2163) (list 2164) (list 2165) (list 2166) (list 2174 2167) (list 2168) (list 2169) (list 2170) (list 2171) (list 2172) (list 2173) (list 2174) (list 2175) (list 2176) (list 2177) (list 2178) (list 2461 2400 2179) (list 2180) (list 2181) (list 2182) (list 2183) (list 2184) (list 2185) (list 2186) (list 2187) (list 2188) (list 2189) (list 2190) (list 2191) (list 2192) (list 2193) (list 2194) (list 2195) (list 2196) (list 2197) (list 2198) (list 2199) (list 2200) (list 2201) (list 2202) (list 2203) (list 2204) (list 2205) (list 2206) (list 2207) (list 2568 2208) (list 2209) (list 2210) (list 2211) (list 2212) (list 2213) (list 2214) (list 2215) (list 2216) (list 2217) (list 2218) (list 2219) (list 2220) (list 2221) (list 2222) (list 2223) (list 3210 2224) (list 2967 2878 2225) (list 2226) (list 2525 2227) (list 2746 2228) (list 2229) (list 2230) (list 2231) (list 2232) (list 2233) (list 2234) (list 2235) (list 2236) (list 2237) (list 2238) (list 2239) (list 2240) (list 2241) (list 2242) (list 2243) (list 2244) (list 2245) (list 2246) (list 2247) (list 2248) (list 2249) (list 3103 3071 2726 2250) (list 2251) (list 2252) (list 2253) (list 2254) (list 3032 2255) (list 2256) (list 2326 2318 2308 2257) (list 2258) (list 2259) (list 2260) (list 2261) (list 2262) (list 2263) (list 2510 2264) (list 2265) (list 2266) (list 2267) (list 2268) (list 2269) (list 2270) (list 2911 2271) (list 2272) (list 3294 2452 2273) (list 2274) (list 2275) (list 2276) (list 2277) (list 2278) (list 2279) (list 2280) (list 3086 2910 2281) (list 2282) (list 2283) (list 2284) (list 2285) (list 3299 2286) (list 2287) (list 2288) (list 2289) (list 2290) (list 2291) (list 2292) (list 2293) (list 2294) (list 2295) (list 2296) (list 2297) (list 2298) (list 2299) (list 2300) (list 2301) (list 2302) (list 2303) (list 2304) (list 2305) (list 2306) (list 2307) (list 2308) (list 3450 2309) (list 2310) (list 2311) (list 2312) (list 2313) (list 2314) (list 2315) (list 2316) (list 2317) (list 2326 2318) (list 2319) (list 2320) (list 2321) (list 2903 2322) (list 2323) (list 2324) (list 2325) (list 2326) (list 2327) (list 2328) (list 2329) (list 2330) (list 2331) (list 2332) (list 2333) (list 2334) (list 2335) (list 2498 2336) (list 2337) (list 2338) (list 2412 2339) (list 2340) (list 2341) (list 2342) (list 2343) (list 2344) (list 2345) (list 2346) (list 2347) (list 2348) (list 2349) (list 2350) (list 2351) (list 2352) (list 2353) (list 2354) (list 2355) (list 2356) (list 2357) (list 2358) (list 2359) (list 2360) (list 3049 2873 2682 2361) (list 2362) (list 2363) (list 2364) (list 2365) (list 2366) (list 2367) (list 2368) (list 2369) (list 2370) (list 2371) (list 2372) (list 3309 2373) (list 2374) (list 2375) (list 2376) (list 2377) (list 2378) (list 2379) (list 2380) (list 2381) (list 2382) (list 2383) (list 2384) (list 2385) (list 2386) (list 2387) (list 2388) (list 2389) (list 2390) (list 2391) (list 2392) (list 2393) (list 2394) (list 2395) (list 2396) (list 2397) (list 2398) (list 2399) (list 2400) (list 2401) (list 2402) (list 2403) (list 2404) (list 2405) (list 2406) (list 2407) (list 2408) (list 2409) (list 2410) (list 2411) (list 2412) (list 2413) (list 2414) (list 2415) (list 2416) (list 2417) (list 2418) (list 2475 2419) (list 2420) (list 2421) (list 2422) (list 2586 2423) (list 2695 2424) (list 2425) (list 3198 2426) (list 2427) (list 2428) (list 2429) (list 2430) (list 2431) (list 2432) (list 2433) (list 2434) (list 2435) (list 2436) (list 2437) (list 3412 2438) (list 2439) (list 2440) (list 2441) (list 2442) (list 2443) (list 2444) (list 2445) (list 2446) (list 2447) (list 2448) (list 2449) (list 2450) (list 2451) (list 2452) (list 2453) (list 3178 2454) (list 2455) (list 2456) (list 2457) (list 2458) (list 2459) (list 2460) (list 2461) (list 2462) (list 2463) (list 2820 2464) (list 2465) (list 2466) (list 2467) (list 2468) (list 2469) (list 2470) (list 2471) (list 2472) (list 2473) (list 2474) (list 2475) (list 2476) (list 2477) (list 2478) (list 2479) (list 2480) (list 2778 2481) (list 2482) (list 2483) (list 2484) (list 2485) (list 2486) (list 2487) (list 2488) (list 2489) (list 2990 2490) (list 2491) (list 2492) (list 2493) (list 2494) (list 2495) (list 2496) (list 2497) (list 2498) (list 2499) (list 3068 2500) (list 2501) (list 2502) (list 2503) (list 2504) (list 2505) (list 2506) (list 2507) (list 2508) (list 2509) (list 2510) (list 2511) (list 2512) (list 2513) (list 2514) (list 2530 2515) (list 2516) (list 2517) (list 2518) (list 2519) (list 2520) (list 2521) (list 2522) (list 2523) (list 3258 2524) (list 2525) (list 2526) (list 2527) (list 2528) (list 2529) (list 2530) (list 2531) (list 2532) (list 2533) (list 2534) (list 2535) (list 2536) (list 2537) (list 2538) (list 2539) (list 3463 2560 2540) (list 2541) (list 2542) (list 2543) (list 2544) (list 2545) (list 2546) (list 2547) (list 2548) (list 2549) (list 2550) (list 2551) (list 2552) (list 2553) (list 2554) (list 2555) (list 3182 2613 2556) (list 2557) (list 2558) (list 2559) (list 2560) (list 2561) (list 2562) (list 2563) (list 2564) (list 2565) (list 2566) (list 2567) (list 2568) (list 3455 3415 2569) (list 2570) (list 2571) (list 2572) (list 2573) (list 2574) (list 2575) (list 2576) (list 2577) (list 2578) (list 2579) (list 2580) (list 2581) (list 2582) (list 2583) (list 2584) (list 2585) (list 2586) (list 2827 2587) (list 2588) (list 2589) (list 2590) (list 2591) (list 2592) (list 2593) (list 2594) (list 2595) (list 2596) (list 2597) (list 2598) (list 2599) (list 3033 2997 2600) (list 2732 2601) (list 2602) (list 2603) (list 2604) (list 2605) (list 2606) (list 2607) (list 2608) (list 2609) (list 2610) (list 2611) (list 2612) (list 2613) (list 2614) (list 2615) (list 2616) (list 2617) (list 2618) (list 2619) (list 2620) (list 2621) (list 2622) (list 2623) (list 2624) (list 2625) (list 2626) (list 2627) (list 2628) (list 2629) (list 2630) (list 2631) (list 3046 2632) (list 2633) (list 2634) (list 2635) (list 2636) (list 2637) (list 2638) (list 2639) (list 2640) (list 2641) (list 2642) (list 2643) (list 2644) (list 2688 2645) (list 2646) (list 2647) (list 2648) (list 2649) (list 2650) (list 2651) (list 3134 2652) (list 2653) (list 2654) (list 2655) (list 2656) (list 2657) (list 3376 2658) (list 2758 2659) (list 2660) (list 2661) (list 2662) (list 2663) (list 2664) (list 2665) (list 2666) (list 2667) (list 2668) (list 2669) (list 2670) (list 2671) (list 2672) (list 2673) (list 2674) (list 2675) (list 2676) (list 2677) (list 2678) (list 2679) (list 2680) (list 2681) (list 2682) (list 2683) (list 2684) (list 2685) (list 2686) (list 2706 2687) (list 2688) (list 2689) (list 3281 3080 2690) (list 2691) (list 2692) (list 2693) (list 2694) (list 2695) (list 2696) (list 2697) (list 2928 2698) (list 2699) (list 2700) (list 2701) (list 2702) (list 2703) (list 2704) (list 2705) (list 2706) (list 2832 2707) (list 2708) (list 2709) (list 2710) (list 2711) (list 3023 2712) (list 2713) (list 2714) (list 2715) (list 2716) (list 2717) (list 2718) (list 2719) (list 2720) (list 2721) (list 3083 2722) (list 3424 2723) (list 2724) (list 2725) (list 2726) (list 2830 2727) (list 2728) (list 2729) (list 2730) (list 2731) (list 2732) (list 2733) (list 2734) (list 2735) (list 2736) (list 2737) (list 2738) (list 2739) (list 2740) (list 2741) (list 2742) (list 2743) (list 2744) (list 2745) (list 2746) (list 2747) (list 2749 2748) (list 2749) (list 2750) (list 2751) (list 2752) (list 2753) (list 2754) (list 2755) (list 2756) (list 2757) (list 2758) (list 2759) (list 2760) (list 2761) (list 2762) (list 3099 2763) (list 2764) (list 2765) (list 2766) (list 2767) (list 2768) (list 3255 2769) (list 2782 2770) (list 2771) (list 2772) (list 2884 2773) (list 2774) (list 2775) (list 2776) (list 2777) (list 2778) (list 2779) (list 2896 2780) (list 2781) (list 2782) (list 2783) (list 2784) (list 2785) (list 2786) (list 2787) (list 2788) (list 2789) (list 3117 2790) (list 2791) (list 2792) (list 2793) (list 2794) (list 2795) (list 2796) (list 2797) (list 2798) (list 2799) (list 2800) (list 2801) (list 2802) (list 2803) (list 2804) (list 2805) (list 2806) (list 2807) (list 2808) (list 3359 2809) (list 3207 2810) (list 2811) (list 2812) (list 2813) (list 2814) (list 2815) (list 2816) (list 2817) (list 2818) (list 2819) (list 2820) (list 2821) (list 2822) (list 2823) (list 2824) (list 2825) (list 2826) (list 2827) (list 2828) (list 2829) (list 2830) (list 2831) (list 2832) (list 2833) (list 2834) (list 2835) (list 2836) (list 2837) (list 2950 2838) (list 2839) (list 2840) (list 2841) (list 2842) (list 2843) (list 2844) (list 2845) (list 2846) (list 2847) (list 2848) (list 2849) (list 2850) (list 2851) (list 2852) (list 2853) (list 2854) (list 2855) (list 2856) (list 2857) (list 2858) (list 2859) (list 2860) (list 2861) (list 2862) (list 2863) (list 2864) (list 2865) (list 2866) (list 2867) (list 2868) (list 2869) (list 2870) (list 2871) (list 2872) (list 2873) (list 2874) (list 2875) (list 2876) (list 2877) (list 2878) (list 2879) (list 3353 2880) (list 2881) (list 2882) (list 2883) (list 2884) (list 2885) (list 2886) (list 2887) (list 2888) (list 2889) (list 2890) (list 2891) (list 2892) (list 2893) (list 2894) (list 2895) (list 2896) (list 2897) (list 2898) (list 2899) (list 2900) (list 2905 2901) (list 2902) (list 2903) (list 3453 2904) (list 2905) (list 2906) (list 2907) (list 2908) (list 2909) (list 2910) (list 2911) (list 2912) (list 2913) (list 2914) (list 2915) (list 2916) (list 2917) (list 2918) (list 2919) (list 2920) (list 2921) (list 2922) (list 2923) (list 2924) (list 2925) (list 2926) (list 2927) (list 2928) (list 2929) (list 2930) (list 3154 2931) (list 2932) (list 2933) (list 2934) (list 2935) (list 3405 3380 2936) (list 2937) (list 2938) (list 2939) (list 2940) (list 2941) (list 2942) (list 2943) (list 2944) (list 2945) (list 2946) (list 2947) (list 2948) (list 2949) (list 2950) (list 2951) (list 2952) (list 2953) (list 2954) (list 2955) (list 2956) (list 2957) (list 2958) (list 2959) (list 2960) (list 2961) (list 2962) (list 2963) (list 2964) (list 2965) (list 2966) (list 2967) (list 2968) (list 2969) (list 2970) (list 2971) (list 2972) (list 2973) (list 2974) (list 3360 2975) (list 2976) (list 2977) (list 2978) (list 2979) (list 2980) (list 2981) (list 2982) (list 2983) (list 2984) (list 2985) (list 2986) (list 2987) (list 2988) (list 3040 2989) (list 2990) (list 2991) (list 2992) (list 2993) (list 2994) (list 2995) (list 2996) (list 2997) (list 2998) (list 2999) (list 3000) (list 3001) (list 3002) (list 3003) (list 3004) (list 3005) (list 3006) (list 3007) (list 3008) (list 3009) (list 3010) (list 3011) (list 3012) (list 3013) (list 3014) (list 3015) (list 3016) (list 3017) (list 3018) (list 3019) (list 3020) (list 3284 3021) (list 3022) (list 3023) (list 3382 3024) (list 3025) (list 3026) (list 3027) (list 3028) (list 3029) (list 3030) (list 3031) (list 3032) (list 3033) (list 3034) (list 3035) (list 3036) (list 3037) (list 3038) (list 3039) (list 3040) (list 3041) (list 3042) (list 3043) (list 3044) (list 3045) (list 3046) (list 3047) (list 3048) (list 3049) (list 3050) (list 3051) (list 3052) (list 3053) (list 3054) (list 3055) (list 3056) (list 3057) (list 3058) (list 3059) (list 3060) (list 3061) (list 3062) (list 3063) (list 3064) (list 3065) (list 3066) (list 3067) (list 3068) (list 3069) (list 3070) (list 3071) (list 3102 3072) (list 3423 3326 3174 3125 3073) (list 3276 3074) (list 3075) (list 3076) (list 3077) (list 3078) (list 3079) (list 3080) (list 3081) (list 3082) (list 3083) (list 3385 3375 3126 3084) (list 3085) (list 3086) (list 3087) (list 3088) (list 3089) (list 3312 3090) (list 3091) (list 3092) (list 3093) (list 3094) (list 3095) (list 3096) (list 3097) (list 3098) (list 3099) (list 3100) (list 3101) (list 3102) (list 3119 3103) (list 3104) (list 3105) (list 3106) (list 3107) (list 3108) (list 3109) (list 3110) (list 3111) (list 3112) (list 3113) (list 3114) (list 3115) (list 3116) (list 3117) (list 3118) (list 3119) (list 3124 3120) (list 3121) (list 3124 3122) (list 3123) (list 3371 3124) (list 3423 3326 3275 3174 3125) (list 3375 3126) (list 3127) (list 3128) (list 3129) (list 3130) (list 3131) (list 3132) (list 3133) (list 3134) (list 3135) (list 3136) (list 3237 3226 3137) (list 3138) (list 3139) (list 3140) (list 3141) (list 3142) (list 3143) (list 3144) (list 3145) (list 3146) (list 3147) (list 3148) (list 3149) (list 3150) (list 3151) (list 3152) (list 3153) (list 3154) (list 3155) (list 3156) (list 3157) (list 3158) (list 3159) (list 3160) (list 3161) (list 3162) (list 3163) (list 3164) (list 3165) (list 3166) (list 3167) (list 3168) (list 3169) (list 3170) (list 3171) (list 3172) (list 3173) (list 3326 3174) (list 3225 3175) (list 3176) (list 3177) (list 3178) (list 3179) (list 3180) (list 3181) (list 3182) (list 3183) (list 3184) (list 3402 3185) (list 3186) (list 3187) (list 3188) (list 3189) (list 3190) (list 3191) (list 3192) (list 3193) (list 3194) (list 3195) (list 3196) (list 3197) (list 3198) (list 3199) (list 3200) (list 3201) (list 3202) (list 3203) (list 3204) (list 3205) (list 3206) (list 3207) (list 3208) (list 3209) (list 3210) (list 3211) (list 3212) (list 3213) (list 3214) (list 3215) (list 3216) (list 3217) (list 3218) (list 3219) (list 3220) (list 3221) (list 3222) (list 3223) (list 3224) (list 3225) (list 3226) (list 3227) (list 3228) (list 3229) (list 3230) (list 3437 3231) (list 3232) (list 3233) (list 3234) (list 3235) (list 3236) (list 3237) (list 3238) (list 3239) (list 3240) (list 3241) (list 3242) (list 3243) (list 3244) (list 3245) (list 3246) (list 3247) (list 3248) (list 3249) (list 3250) (list 3251) (list 3252) (list 3253) (list 3254) (list 3255) (list 3256) (list 3257) (list 3258) (list 3259) (list 3260) (list 3261) (list 3262) (list 3263) (list 3264) (list 3265) (list 3266) (list 3267) (list 3268) (list 3269) (list 3270) (list 3271) (list 3272) (list 3273) (list 3274) (list 3275) (list 3276) (list 3277) (list 3278) (list 3279) (list 3280) (list 3281) (list 3282) (list 3283) (list 3284) (list 3285) (list 3286) (list 3287) (list 3288) (list 3289) (list 3290) (list 3338 3291) (list 3292) (list 3293) (list 3294) (list 3295) (list 3296) (list 3297) (list 3298) (list 3299) (list 3300) (list 3301) (list 3302) (list 3303) (list 3304) (list 3305) (list 3306) (list 3307) (list 3308) (list 3309) (list 3310) (list 3311) (list 3312) (list 3313) (list 3314) (list 3315) (list 3316) (list 3317) (list 3318) (list 3319) (list 3320) (list 3321) (list 3322) (list 3323) (list 3324) (list 3325) (list 3326) (list 3327) (list 3328) (list 3329) (list 3330) (list 3331) (list 3332) (list 3333) (list 3334) (list 3335) (list 3336) (list 3337) (list 3338) (list 3339) (list 3340) (list 3341) (list 3342) (list 3343) (list 3344) (list 3345) (list 3346) (list 3347) (list 3348) (list 3349) (list 3350) (list 3351) (list 3352) (list 3353) (list 3354) (list 3355) (list 3356) (list 3357) (list 3358) (list 3359) (list 3360) (list 3361) (list 3362) (list 3363) (list 3364) (list 3365) (list 3366) (list 3367) (list 3368) (list 3369) (list 3370) (list 3371) (list 3372) (list 3373) (list 3374) (list 3375) (list 3376) (list 3377) (list 3378) (list 3379) (list 3380) (list 3381) (list 3382) (list 3383) (list 3384) (list 3385) (list 3386) (list 3387) (list 3388) (list 3389) (list 3390) (list 3391) (list 3392) (list 3393) (list 3394) (list 3395) (list 3396) (list 3397) (list 3398) (list 3399) (list 3400) (list 3401) (list 3402) (list 3403) (list 3404) (list 3405) (list 3406) (list 3407) (list 3408) (list 3409) (list 3410) (list 3411) (list 3412) (list 3413) (list 3414) (list 3415) (list 3416) (list 3417) (list 3418) (list 3419) (list 3420) (list 3421) (list 3422) (list 3423) (list 3424) (list 3425) (list 3446 3426) (list 3427) (list 3428) (list 3429) (list 3430) (list 3431) (list 3432) (list 3433) (list 3434) (list 3435) (list 3436) (list 3437) (list 3438) (list 3439) (list 3440) (list 3441) (list 3442) (list 3443) (list 3444) (list 3445) (list 3446) (list 3447) (list 3448) (list 3449) (list 3450) (list 3451) (list 3452) (list 3453) (list 3454) (list 3455) (list 3456) (list 3457) (list 3458) (list 3459) (list 3460) (list 3461) (list 3462) (list 3463) (list 3464) (list 3465) (list 3466))) do (sethash hashtable key val)) hashtable) :hashsuppl (let ((hashtable (make-hash-table))) (loop for key in (append (listlist 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466)) for val in (append (list -1 0 0 0 0 3 0 3 2 0 0 9 0 4 9 6 0 6 2 1 2 6 4 4 0 9 15 6 18 9 3 9 10 16 2 19 1 2 3 4 23 12 0 16 12 16 10 12 1 12 6 18 29 1 2 16 4 41 10 11 15 1 16 44 50 12 24 1 36 36 37 38 39 10 11 30 3 31 12 45 3 1 4 41 13 0 10 2 12 50 22 73 74 10 3 31 32 94 95 30 10 1 2 3 4 16 17 22 1 49 85 9 2 19 82 14 12 12 50 51 88 13 41 0 85 86 101 9 42 1 49 50 85 6 27 16 16 123 12 50 61 85 2 3 85 85 1 6 9 85 146 147 148 15 61 141 142 143 144 145 146 147 148 128 6 132 3 100 101 141 166 4 5 24 25 12 3 144 166 171 108 147 24 25 26 16 17 27 148 16 42 10 33 24 10 101 49 117 58 47 48 10 33 85 146 49 13 5 42 24 194 4 14 128 209 25 10 11 60 61 141 4 41 2 19 49 45 56 85 111 30 100 33 80 100 47 50 90 14 53 201 11 4 14 242 24 2 10 47 176 6 16 9 15 16 17 107 238 213 42 259 12 45 80 4 41 58 94 12 45 34 247 11 53 240 47 48 49 48 127 242 243 30 81 127 112 9 9 287 15 27 135 1 42 259 191 192 56 57 42 129 62 193 67 49 206 122 48 36 49 58 211 41 50 51 120 121 105 190 261 123 138 48 49 176 268 13 317 44 176 16 190 129 201 87 19 225 42 3 144 86 126 82 115 15 7 173 16 252 189 46 47 249 31 189 17 7 100 232 292 293 43 136 190 338 208 43 44 9 15 18 55 292 49 324 208 259 260 261 117 45 136 137 138 322 147 148 189 193 25 149 133 134 42 338 339 133 132 145 146 147 148 149 150 151 152 163 338 339 396 397 398 399 400 401 163 164 165 133 16 80 31 287 189 136 44 110 24 42 129 127 189 292 147 10 33 359 433 434 6 16 80 81 49 206 317 328 48 49 123 6 7 4 2 3 31 99 268 48 279 10 10 211 312 45 44 66 194 195 293 129 301 63 64 27 7 123 4 6 22 41 313 16 17 18 19 62 292 293 4 41 464 46 33 137 1 62 46 123 2 21 7 330 34 42 489 490 223 504 505 105 34 21 501 502 56 14 189 44 13 14 517 56 57 58 199 45 465 117 118 65 176 100 101 127 128 407 8 9 53 127 128 407 31 15 434 11 112 286 10 42 259 489 510 80 208 85 111 123 9 12 45 292 36 309 368 112 123 138 176 532 11 242 453 9 30 6 65 531 375 164 165 16 34 512 513 268 110 146 205 324 476 124 221 478 479 480 176 330 46 439 7 502 17 107 480 58 199 236 140 141 133 65 13 85 142 21 501 502 503 504 129 130 223 508 621 301 34 512 513 208 580 61 201 275 117 223 3 81 443 623 247 248 66 246 567 124 125 94 76 76 268 269 465 519 520 24 194 550 338 76 8 88 48 201 202 136 292 62 17 132 142 88 117 118 474 65 531 173 4 478 65 58 33 17 65 223 88 176 250 61 633 94 330 80 268 42 191 461 439 601 602 136 667 373 278 293 489 490 597 81 284 280 23 14 517 432 563 127 53 240 101 62 63 426 133 612 686 21 501 502 503 504 505 506 507 508 509 510 511 512 513 76 208 9 189 522 73 101 196 206 14 244 478 16 34 35 36 309 66 3 81 24 760 208 261 262 381 46 47 58 199 608 434 546 273 147 16 46 47 770 461 11 93 211 23 478 132 582 136 34 35 147 434 47 770 87 3 81 147 434 546 93 11 656 679 23 5 476 16 56 108 127 431 518 447 141 42 129 130 206 751 10 439 22 480 42 209 85 111 230 231 232 666 56 57 597 4 5 4 108 2 3 4 453 21 501 502 503 504 621 622 623 624 625 626 627 628 629 452 453 504 261 66 760 173 67 127 285 55 372 141 86 648 4 14 282 330 515 23 108 62 80 330 515 811 3 8 662 42 261 48 279 460 211 212 244 243 15 65 531 710 443 444 445 554 81 284 712 5 268 223 637 144 582 292 373 337 261 379 176 532 571 273 141 427 194 461 782 75 283 62 497 101 762 194 47 42 261 110 221 222 117 636 687 688 325 458 706 707 708 942 198 199 200 49 623 637 638 36 309 623 728 729 730 731 732 733 734 735 736 737 738 739 740 741 31 78 223 224 127 460 11 75 76 4 14 822 498 10 24 12 58 199 249 837 14 112 113 114 5 76 6 18 29 12 176 8 19 114 108 841 24 347 136 667 704 705 82 23 41 66 347 1014 80 421 112 3 268 58 796 9 12 176 1007 1008 36 69 70 1012 1013 44 45 46 493 190 744 656 347 34 9 128 123 3 4 14 116 58 796 1031 242 243 822 101 886 4 14 822 33 44 58 311 42 744 1047 1048 1049 1050 10 47 48 62 669 356 8 247 248 643 1022 46 550 129 762 24 679 14 822 1068 233 883 193 389 242 243 244 41 313 314 52 53 240 275 276 1081 882 8 1085 1086 1087 1088 80 81 284 285 4 14 149 427 246 88 89 123 809 193 389 175 50 51 52 10 47 236 65 613 478 681 613 14 116 13 207 839 73 87 1031 656 1048 1014 17 685 531 353 32 47 48 308 201 550 1091 147 777 292 82 1072 338 81 284 431 814 519 520 15 370 29 149 817 338 268 458 1081 487 488 744 53 36 37 9 149 12 368 12 45 562 668 190 164 434 990 6 7 976 32 11 189 34 2 9 242 73 33 684 685 682 101 147 27 182 760 31 78 13 122 42 261 863 991 117 920 325 1029 439 440 190 43 44 45 381 363 556 146 62 302 194 936 48 1081 63 447 1018 105 511 1124 41 84 122 1232 338 100 571 60 22 480 464 381 1158 1159 1160 1161 99 457 117 117 1281 66 1235 992 267 95 544 899 613 207 910 696 744 1193 54 19 792 793 435 233 6 61 2 247 33 233 1302 7 742 77 78 1230 1231 1021 467 33 359 563 564 50 474 28 120 89 7 742 1002 22 105 554 555 209 828 427 347 1014 834 835 299 191 439 61 62 63 329 710 931 932 933 196 50 482 136 1158 18 120 45 80 76 144 340 33 233 81 931 1204 209 210 94 268 1280 48 2 88 889 191 101 342 1000 1001 81 82 115 822 87 1031 15 27 27 434 87 88 663 385 777 1171 293 489 23 23 85 1198 58 1240 148 30 76 661 9 242 573 19 886 330 44 64 65 123 1053 208 2 55 190 1248 221 5 839 105 136 1158 187 676 110 166 31 78 58 267 144 146 82 1259 292 373 226 465 329 325 326 453 55 372 127 15 182 246 9 12 117 13 122 58 796 1031 10 87 1031 1032 1033 76 1382 284 149 150 201 241 128 261 42 261 891 886 31 53 886 1484 149 86 47 249 532 571 93 803 60 545 461 101 127 12 66 1022 1023 1015 563 1166 461 461 47 249 1471 651 66 1208 18 120 688 946 947 49 337 129 130 278 201 275 276 385 386 153 345 357 211 73 461 782 60 899 682 199 200 385 132 133 7 6 434 546 75 4 85 166 81 443 197 380 80 173 194 936 223 687 663 1081 1190 433 434 94 100 235 770 1223 196 226 80 1360 661 1008 141 142 672 663 279 30 457 458 1521 1522 259 261 176 710 2 21 148 242 243 1062 823 393 43 56 747 1536 33 666 667 886 268 1280 920 678 866 304 324 325 1514 428 261 1592 837 73 211 312 42 338 339 1198 223 637 208 744 10 47 123 477 5 1001 330 503 55 1424 1046 745 424 1024 81 82 115 244 897 244 897 213 259 1422 19 1414 1065 1072 259 338 4 1072 489 14 822 94 693 599 461 1499 722 723 528 1373 279 1585 173 174 175 176 532 1534 478 754 292 373 206 306 1463 1240 1131 42 164 18 3 81 443 1556 198 990 25 216 101 196 197 1373 385 1396 137 495 141 582 252 349 518 223 224 1414 76 1361 111 10 85 582 137 477 108 201 241 12 110 111 189 424 1158 1432 28 1324 1325 393 261 939 582 583 35 114 115 558 495 2 19 114 115 1126 150 205 50 65 613 1451 1452 1453 201 721 722 882 81 886 81 284 460 47 635 1281 920 1471 1513 176 532 533 534 431 814 1070 1703 991 992 1223 342 83 942 1461 14 1126 1185 261 50 90 238 258 43 44 329 1449 1239 1030 1031 1466 1467 1468 1469 1470 1471 1472 1473 719 540 460 439 1406 163 1479 1480 1481 1482 1483 1484 1485 1486 1487 1488 1489 1490 1491 1492 1493 1494 1495 1496 1497 1498 1499 1500 285 113 1414 144 817 164 16 137 1729 41 110 111 112 113 762 991 176 353 78 42 489 510 318 319 1480 259 261 58 199 994 353 1026 113 36 309 961 687 121 108 109 110 940 14 517 518 1719 1124 1262 223 687 1884 23 880 82 1010 1011 842 76 1002 1329 238 997 998 1849 1415 292 373 110 1435 1554 959 62 882 1360 100 1534 212 517 252 12 117 1281 42 209 67 304 197 110 940 1889 239 49 623 1893 1894 942 118 482 193 303 304 310 1223 127 1501 117 1281 368 242 1072 1052 499 88 121 1898 123 138 569 1007 3 81 284 128 744 745 80 1360 1640 1912 1913 50 773 1569 649 650 985 986 987 461 699 18 21 501 502 503 35 1414 1722 661 1966 8 85 166 1436 1026 1879 293 470 82 24 67 867 558 138 368 10 11 12 50 1131 1053 81 931 136 768 769 635 920 591 1695 489 1667 517 716 373 197 1934 86 1490 13 85 221 24 760 4 14 282 283 82 115) (list 213 489 1667 1668 988 124 142 1215 1124 1262 1942 123 138 569 837 41 1021 1093 246 19 114 83 313 1743 489 510 203 166 171 1072 1666 510 56 516 239 540 280 1105 58 199 200 816 1715 789 768 1672 94 81 443 1556 1702 683 34 35 1749 1000 1001 476 499 3 81 201 1726 111 53 776 65 531 1471 1513 587 111 15 16 17 16 136 667 1609 1850 914 17 434 546 1213 522 523 123 495 49 206 306 597 598 1100 828 1335 679 806 1401 714 822 47 1562 508 164 7 586 1280 380 46 47 110 817 489 490 42 489 510 1430 137 495 2136 337 489 510 2166 203 1198 42 1052 138 45 381 425 528 1934 1435 167 235 635 1929 489 510 1444 563 147 7 8 9 287 289 16 80 421 354 518 815 201 202 46 47 48 816 170 208 765 1874 267 1287 354 1925 349 432 2031 1914 1198 176 325 1280 1281 1373 816 2089 2128 356 586 696 164 182 428 1422 1658 225 278 816 2089 56 811 109 324 532 94 268 123 809 34 88 1358 17 2122 190 1243 292 373 1977 65 50 90 5 1001 173 760 76 651 50 482 80 1559 991 992 1703 1093 760 144 142 672 1583 308 309 449 499 55 372 2 19 1414 1415 702 1024 1115 662 121 14 116 45 193 389 1135 45 2256 187 135 292 373 2032 1557 465 528 380 2256 148 189 350 87 88 673 380 2317 685 117 1934 2034 648 2094 2095 226 562 373 1977 482 46 493 494 809 80 555 129 2005 83 223 687 1884 1898 1072 1666 108 881 63 64 65 682 1541 635 2058 450 451 452 1072 209 1093 1094 108 812 813 137 1053 144 1629 123 1053 2018 284 1969 214 347 190 332 123 1053 31 78 50 773 1392 1031 189 1925 1926 13 1072 1957 2178 117 198 267 1287 96 1163 643 644 1129 1130 482 2338 47 1562 224 20 1124 5 839 24 679 1095 517 1214 1642 44 447 448 324 1007 55 372 1454 1455 1456 1457 3 268 696 261 1874 1223 1792 343 997 998 1910 1772 141 170 268 2272 148 112 113 114 115 1757 1798 1052 2178 569 678 246 2066 486 1204 319 223 1893 1125 997 1124 2417 2418 41 223 687 1884 207 81 1594 3 4 5 8 1966 1967 1968 656 657 936 249 1512 1513 652 562 2335 705 49 623 224 792 393 129 301 487 373 1977 2263 1434 1746 46 211 85 582 915 1454 1585 1586 1029 199 994 325 2226 118 1326 357 1534 2514 86 11 12 50 51 19 1414 1850 396 434 435 1045 191 211 212 239 776 777 252 30 576 16 80 234 101 201 334 1998 133 2539 794 635 380 252 112 247 1306 2207 94 8 662 66 67 867 1455 16 252 287 30 283 284 712 245 679 1095 2422 1972 264 265 223 641 211 312 1021 828 133 134 28 1324 58 550 659 330 1416 1070 796 335 792 148 189 350 933 2555 202 233 264 105 252 10 47 236 1142 1143 1147 822 211 1686 27 1390 1390 188 12 176 250 148 10 87 335 114 1962 123 477 14 282 457 1781 837 996 239 54 1297 201 202 297 478 148 656 67 304 305 751 1126 1127 67 867 1585 1551 14 822 988 2052 2053 2054 2055 2056 42 43 46 47 770 771 2360 2024 375 489 1667 282 2644 368 53 54 1124 1125 517 2423 512 65 48 201 721 342 1793 42 489 1667 2686 144 1851 1186 543 99 208 765 1592 1471 650 1640 1641 1992 1993 100 571 1213 1972 234 2249 95 1488 1198 117 198 2600 1091 333 439 434 1569 268 1029 311 312 942 920 1238 2226 2227 1282 1282 2747 1929 43 252 349 1972 421 656 2657 2658 226 1447 123 559 30 76 651 1029 1223 722 497 11 93 101 722 487 1609 1065 5 2480 959 1918 497 2769 1213 350 351 236 482 56 747 94 874 73 439 65 682 1541 2036 122 307 1483 1772 1773 1501 176 353 1162 33 684 61 147 148 163 407 1187 1188 385 61 886 173 2463 55 80 695 326 14 517 2586 2724 2725 2726 99 2706 178 179 2076 1662 1663 339 340 211 312 123 1695 1696 1853 34 512 182 347 1089 498 989 47 770 771 526 562 1203 63 1676 1283 1022 1049 1642 372 563 564 110 940 941 58 199 2360 636 641 1726 1198 2224 532 461 782 783 2771 2772 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2020 425 1719 55 136 768 2321 55 2900 1024 1302 182 1093 2280 2270 1382 959 960 278 279 128 129 2 88 673 198 311 212 282 576 577 2697 308 1166 498 138 58 1223 1574 324 710 1348 882 234 2725 2726 2830 2831 2832 2833 2834 2835 2836 2837 1441 205 337 209 991 45 465 466 760 268 1029 1030 1031 1032 110 2223 2224 1007 9 12 223 9 15 61 49 310 267 693 694 1115 1008 1036 309 226 270 1050 15 61 127 2489 991 48 816 872 87 88 2599 199 937 744 1634 101 722 203 2074 2075 73 748 36 1918 56 57 307 201 241 547 88 663 49 310 59 75 2711 338 537 21 1596 149 582 789 790 2254 2599 781 1499 1224 1131 450 61 2988 128 214 210 439 1406 2631 58 199 2360 1777 1934 427 25 30 8 9 242 753 61 36 1918 1204 1248 582 915 916 705 2499 324 2248 2249 1570 571 1478 2048 2049 2686 2687 2688 2689 1486 2720 2721 804 1093 2280 476 559 10 47 770 683 666 790 791 225 449 559 2762 100 2249 3071 2249 173 174 216 1706 1224 2113 2114 330 1912 1609 1772 82 73 2789 1570 3102 3071 3102 3119 3120 3121 3072 3083 805 41 223 728 729 8 1008 2651 241 75 877 694 1360 1002 65 682 683 359 1319 718 460 498 809 136 136 667 1766 2930 450 393 1602 362 1158 2129 435 193 1208 1209 357 2249 3071 3102 3119 3120 3121 3122 3123 3124 75 576 148 2453 1027 100 101 2555 241 1478 191 47 48 201 334 797 31 544 16 292 668 627 1642 2425 329 1449 269 80 234 232 684 2808 2809 2113 1434 2223 48 1483 1415 503 271 94 1570 3102 3119 3120 3121 3122 3123 3124 3174 3136 1912 1454 719 1938 278 279 719 720 241 3135 3136 137 989 439 1987 19 225 324 330 252 253 899 42 261 1592 532 533 722 2768 47 249 2523 587 588 589 110 588 589 278 1526 692 1570 3102 3119 3120 3121 3122 3123 3124 3073 407 6 65 368 2689 1938 310 3020 12 117 1373 49 50 132 86 648 268 2272 182 1457 1129 663 2285 1918 63 1346 532 232 297 24 25 189 2372 559 3088 3089 635 1461 1144 7 357 3165 3166 3167 3168 3169 3170 3171 3172 3173 12 223 224 1580 872 439 1601 191 11 60 132 3290 1363 1069 329 1471 1472 443 444 306 2139 250 27 132 166 167 2879 699 700 81 931 669 2808 2974 278 279 460 94 1570 3102 3119 3120 3121 3122 3123 3122 3123 3124 3125 2657 201 721 196 2935 375 3023 1267 1268 3083 1048 1041 519 520 244 245 246 504 862 1874 59 804 760 8 9 128 3184 1378 196 2935 353 1162 1212 804 246 2436 2437 269 46 2568 1570 3102 3119 3120 3121 3122 3123 3124 2722 2132 5 839 14 282 31 544 61 633 241 273 1938 3230 1526 241 1213 518 519 207 330 515 3425 910 269 2256 2308 1391 1392 2903 46 2568 268 458 1189 1114 883 203 133 2539 1569 1570 3102 3119)) do (sethash hashtable key val)) hashtable) :hashsuppl-> (let ((hashtable (make-hash-table))) (loop for key in (listfor val in (listdo (sethash hashtable key val)) hashtable) :veclrs (make-array 3500 :initial-contents (eval-my-list (quote (nil 0 0 0 0 1 0 1 1 0 0 1 0 1 1 1 0 1 1 1 2 1 1 1 0 1 2 1 2 2 1 1 2 1 1 2 1 2 3 4 2 1 0 1 1 1 1 1 1 1 1 2 3 1 2 1 1 2 1 2 2 1 1 2 2 1 1 1 2 2 3 4 5 1 2 2 1 2 2 2 1 1 1 2 2 0 1 1 1 2 2 2 3 2 1 2 3 3 4 2 1 1 2 3 4 1 2 2 1 2 1 1 1 2 2 2 2 1 2 3 2 2 2 0 1 2 2 1 1 1 2 3 1 1 2 2 1 1 1 2 2 1 1 2 1 1 1 1 1 1 2 3 4 2 3 3 4 5 6 7 8 9 10 2 1 2 1 2 3 2 2 2 3 1 2 2 1 2 2 3 2 2 1 2 3 3 4 2 2 1 1 1 2 1 1 2 2 2 2 2 3 1 2 1 2 2 2 2 1 1 2 1 2 2 2 2 2 3 3 4 3 1 2 1 2 2 2 2 2 2 2 3 2 2 2 2 2 3 2 2 2 2 1 2 2 2 1 1 2 2 2 2 1 2 3 4 3 3 3 1 2 1 2 3 2 2 3 2 1 2 2 2 2 2 3 2 3 4 2 2 2 3 2 2 2 2 2 1 2 2 3 3 1 1 2 2 3 2 3 3 2 2 2 2 2 3 3 2 2 2 2 2 2 2 3 4 5 2 2 2 2 2 2 3 2 2 2 3 2 2 1 2 2 2 2 2 3 2 1 2 2 3 2 3 3 2 2 1 2 2 2 3 3 2 2 2 2 2 3 2 3 2 2 2 2 2 2 3 1 2 2 2 2 2 3 2 2 3 4 2 2 2 3 4 3 2 3 3 2 2 2 2 3 1 2 3 2 2 2 3 4 5 6 7 8 9 5 2 3 4 5 6 7 8 9 6 7 8 3 2 2 2 2 2 2 2 2 1 1 2 2 2 2 2 1 2 3 3 4 1 2 2 3 2 3 3 4 2 3 2 1 2 2 1 2 2 3 2 2 3 2 1 2 3 2 2 2 2 3 2 2 3 3 4 2 2 1 1 1 2 2 3 2 3 4 5 2 2 3 1 2 3 3 2 2 1 2 2 1 1 2 2 2 2 1 2 3 3 2 3 2 2 2 3 4 2 2 2 2 2 3 3 2 3 4 3 2 3 2 3 3 2 2 3 3 4 3 2 3 3 2 3 3 2 2 2 2 2 3 3 1 2 2 3 2 2 1 2 1 1 2 2 2 2 3 2 2 1 2 2 3 2 3 2 2 3 2 2 3 3 2 3 1 2 3 4 2 2 2 3 3 2 2 2 2 3 4 2 3 2 2 2 3 2 3 3 3 3 3 3 4 2 2 2 3 2 2 3 4 5 6 2 3 2 3 3 3 2 3 4 2 3 2 2 3 2 2 2 2 3 3 2 3 2 2 2 2 3 2 2 2 2 3 3 3 4 1 2 2 2 2 2 2 2 3 4 2 2 2 2 2 2 2 2 3 3 2 3 2 1 2 2 2 2 2 2 2 2 2 3 2 3 2 2 2 2 2 2 2 2 3 4 2 3 3 3 2 3 4 3 2 3 3 2 2 3 3 3 2 2 3 2 2 3 3 2 3 3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 2 2 1 2 3 2 2 3 3 3 3 2 2 2 3 4 3 2 1 2 1 2 2 2 3 3 2 3 2 3 4 2 3 3 2 2 2 3 4 2 2 3 2 2 2 2 3 2 2 3 2 3 2 3 2 2 2 2 3 3 3 3 2 2 2 2 2 1 2 2 2 3 3 3 2 1 2 3 3 4 2 2 2 3 3 2 1 2 3 4 5 3 2 3 3 2 3 2 2 2 3 4 3 2 3 4 5 6 7 8 9 10 11 12 13 14 15 3 4 2 2 2 3 2 2 2 3 2 3 2 2 3 2 2 3 2 3 2 2 2 2 2 3 3 1 2 3 2 2 2 3 4 2 3 3 3 3 2 3 3 3 4 5 3 3 3 4 2 2 2 3 3 2 2 3 3 2 3 2 3 4 3 2 2 2 2 3 3 3 2 3 2 2 2 2 2 2 2 2 3 2 3 3 4 3 3 3 4 5 3 3 4 5 4 3 3 4 2 3 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 2 3 2 3 2 3 3 3 4 2 2 3 2 1 1 1 2 3 3 3 2 2 3 4 2 2 2 2 3 2 3 2 2 3 2 3 1 2 2 3 4 5 2 2 3 2 2 3 2 3 2 2 2 2 3 2 2 3 4 5 3 3 4 3 4 2 3 4 4 2 2 2 2 2 2 2 1 1 2 2 3 2 3 4 2 3 3 2 2 2 2 3 3 2 2 3 1 2 3 4 5 6 3 2 3 2 3 3 3 2 3 4 3 2 2 2 2 1 2 2 3 4 3 3 2 3 2 3 4 2 3 4 4 5 3 4 5 4 3 2 3 4 5 6 2 3 3 4 1 2 2 2 2 2 3 1 2 2 3 3 2 3 4 3 2 3 3 3 2 3 3 3 3 3 3 3 3 2 3 2 3 3 2 3 3 3 3 2 3 3 2 2 3 2 3 3 2 2 2 2 3 3 4 4 5 4 3 3 2 2 2 2 3 3 3 4 2 2 2 3 2 2 1 2 2 2 3 3 2 2 2 2 1 2 3 3 3 2 2 1 2 2 2 2 3 4 3 2 2 2 2 2 2 3 3 3 3 2 3 2 2 3 3 3 2 3 2 2 3 4 3 3 2 2 2 3 3 3 3 4 3 3 3 2 3 2 2 3 3 4 3 2 3 3 2 3 3 3 3 4 5 6 3 4 2 2 3 2 3 3 3 3 3 3 3 3 3 3 2 3 3 2 3 4 4 3 2 2 2 2 2 3 4 3 3 3 4 4 5 3 3 2 3 3 4 3 3 3 3 3 2 3 3 2 2 3 4 3 3 2 2 3 3 4 4 2 2 2 3 4 3 3 3 4 5 3 3 3 3 3 3 3 2 3 2 2 3 2 3 3 3 3 2 3 2 3 3 2 2 2 3 2 2 3 3 4 2 3 3 3 2 3 2 3 2 2 2 3 3 3 3 4 4 4 2 2 2 2 2 3 2 2 3 3 3 2 3 2 2 2 2 3 4 2 2 2 1 2 2 3 2 2 3 3 2 3 3 3 2 2 2 3 2 3 2 2 2 3 2 3 3 3 3 3 4 2 2 3 2 2 2 2 2 2 3 2 3 3 3 4 3 2 3 4 5 2 3 3 2 3 2 3 2 2 2 2 3 2 2 2 2 3 2 2 2 3 3 4 3 4 3 3 2 2 3 2 2 3 4 4 3 3 2 2 2 3 3 3 2 2 2 3 3 4 5 3 3 2 3 3 3 3 4 3 4 4 3 3 2 2 2 3 3 3 3 3 4 3 2 3 2 2 2 3 3 2 2 2 2 3 3 3 3 2 2 3 2 3 3 3 4 3 4 2 2 3 3 3 3 3 3 4 3 3 2 3 3 3 3 2 3 4 4 5 2 3 2 3 2 3 2 2 3 4 4 2 2 2 3 3 2 3 4 2 2 3 3 3 3 3 3 4 3 2 2 3 3 3 2 3 3 3 4 2 2 3 2 3 2 2 2 2 2 3 2 3 2 3 3 3 3 3 3 4 3 3 4 4 4 3 4 2 2 3 3 2 2 2 2 2 2 2 3 3 3 3 2 3 3 4 3 3 3 4 2 3 4 5 3 3 2 3 3 3 3 4 4 3 2 1 2 2 2 2 3 4 4 2 2 3 2 3 4 3 3 4 2 3 2 2 2 3 3 2 3 3 2 3 2 2 1 2 2 2 2 2 3 3 2 3 2 3 3 4 3 4 5 2 2 3 2 3 3 3 4 2 2 2 2 3 4 3 3 3 3 3 3 3 4 5 2 3 4 3 3 2 2 3 3 2 3 3 3 3 4 2 3 4 5 3 4 3 3 3 4 3 3 3 3 3 3 3 3 2 2 3 4 4 2 3 3 4 4 4 5 5 6 7 8 9 10 11 12 3 3 3 2 3 3 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 3 3 3 2 2 2 2 2 3 2 2 3 4 5 2 2 2 3 3 2 2 3 3 4 3 2 3 2 3 4 4 3 3 3 3 4 3 3 2 3 4 3 2 3 4 4 2 3 3 3 4 2 3 2 3 4 4 2 3 4 3 3 4 4 4 2 3 3 3 3 3 2 3 3 2 3 3 3 2 2 3 3 2 2 2 3 3 2 3 4 3 2 3 3 4 3 3 3 2 3 4 3 3 3 4 3 3 2 2 2 2 2 2 3 4 1 2 3 3 2 2 3 3 2 3 2 3 3 3 4 3 3 3 3 4 3 4 5 3 3 2 2 3 4 5 3 3 4 3 3 2 1 2 3 3 4 2 3 2 2 2 3 2 2 2 2 3 4 2 3 2 2 3 2 3 4 3 3 3 2 2 3 3 4 3 3 4 2 3 2 3 2 2 2 2 2 3 4 3 3 3 2 3 4 4 2 2 2 2 3 4 2 2 3 3 2 3 2 2 2 3 3 3 3 2 3 2 2 3 2 3 3 2 3 3 3 3 3 3 3 4 3 3 3 3 3 2 2 3 4 5 3 3 4 4 4 5 2 2 2 2 2 2 2 2 3 2 3 3 4 3 3 2 3 4 2 3 3 4 3 3 2 2 3 3 3 4 3 2 2 3 4 3 4 3 2 3 2 3 3 3 3 2 3 3 2 2 3 3 3 3 4 2 2 2 3 3 2 3 3 3 3 3 3 2 3 4 2 2 2 2 2 2 3 3 3 3 3 3 3 3 3 2 3 3 3 2 2 3 4 3 3 3 2 3 3 3 4 3 4 2 3 4 3 3 2 3 3 3 4 3 3 3 3 4 4 2 2 3 3 4 3 3 4 3 3 3 3 2 2 2 2 3 3 3 3 4 2 3 3 3 3 2 3 2 2 2 2 3 2 3 2 3 2 3 4 3 2 3 2 3 2 2 2 3 2 3 2 3 2 3 3 2 2 2 2 3 4 3 4 3 2 2 3 2 2 3 4 3 3 3 3 3 3 3 2 2 3 4 2 3 3 3 4 3 4 4 3 4 3 3 2 3 3 2 3 3 3 4 3 2 3 4 3 3 4 3 3 3 4 3 2 3 4 2 2 3 2 3 3 3 3 4 5 2 3 2 3 3 4 5 3 4 3 3 3 4 5 2 2 2 3 2 3 4 2 2 2 3 2 2 3 3 4 3 2 2 3 1 2 2 3 2 3 3 3 2 3 4 3 2 3 3 2 3 3 4 4 4 3 4 3 4 3 4 3 3 3 3 2 2 3 2 2 3 3 3 3 2 3 4 4 3 2 3 4 5 6 7 2 2 3 2 3 3 4 4 3 4 5 3 2 3 2 3 2 2 3 4 5 5 4 2 3 3 3 2 3 3 3 3 2 3 3 3 3 3 4 2 3 3 4 3 2 3 3 4 5 2 3 4 5 2 3 3 3 4 5 4 3 4 4 3 3 3 3 2 2 3 3 3 4 5 3 3 2 2 2 2 3 3 3 4 3 3 4 3 4 3 3 3 4 3 3 2 3 2 3 3 3 4 3 2 3 3 3 2 3 3 3 4 3 2 3 2 2 3 3 2 3 2 2 3 3 3 3 2 2 2 3 3 2 2 3 2 3 3 3 3 3 2 2 3 4 4 3 2 3 4 3 3 4 3 3 2 3 3 2 2 3 3 4 2 2 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 2 2 3 4 5 4 4 2 3 2 3 3 3 2 3 3 2 2 2 3 3 2 1 2 2 3 3 3 3 4 3 3 4 2 3 3 2 2 2 2 3 4 4 3 4 2 3 3 3 2 3 4 5 6 7 8 9 3 4 2 3 4 5 4 4 3 2 3 3 4 2 2 3 2 3 3 4 3 2 2 3 3 3 4 3 2 3 4 2 3 3 3 3 2 3 3 3 3 3 4 4 5 2 3 3 3 3 3 3 3 3 2 3 3 3 3 2 2 3 3 3 3 4 3 3 4 4 5 5 4 5 4 3 2 3 3 3 2 3 4 3 4 2 2 2 3 3 3 3 3 3 2 3 2 3 3 3 3 3 3 3 4 3 4 3 3 4 3 3 2 3 2 3 3 2 2 3 4 3 3 4 3 3 4 3 3 3 4 4 3 2 2 3 4 5 3 4 3 2 2 2 3 2 2 3 3 3 3 4 4 5 6 4 3 3 4 4 3 4 3 4 2 3 3 2 3 3 2 3 2 2 3 3 3 2 3 4 4 3 4 3 4 3 3 3 3 3 3 4 3 3 4 3 3 4 4 3 2 2 3 3 2 3 4 4 5 4 5 6 7 8 9 10 11 12 13 14 15 3 3 3 2 2 3 3 2 3 3 3 2 2 3 3 3 3 4 3 4 3 4 2 2 3 3 3 3 3 3 4 3 3 4 2 2 2 3 4 3 3 4 3 3 4 5 6 7 8 9 10 11 12 13 3 3 3 2 2 2 3 4 3 2 3 4 5 6 2 3 4 3 3 2 2 2 2 3 2 3 3 3 4 3 3 4 3 3 3 3 2 3 2 3 2 2 3 3 3 4 3 3 3 2 3 2 3 2 3 4 3 3 2 3 2 3 3 3 3 3 2 3 3 3 3 3 3 2 3 2 3 3 2 3 4 3 3 3 3 3 2 2 2 3 3 3 3 2 3 3 2 3 4 4 3 3 2 2 2 3 2 3 2 2 3 3 3 2 3 4 4 5 4 4 5 3 3 3 3 4 4 5 6 7 3 3 4 3 2 3 2 2 2 2 3 3 3 3 4 3 3 2 3 3 3 4 3 2 3 3 4 3 3 4 3 3 3 3 3 2 3 3 4 4 5 5 6 7 5 4 4 2 3 3 4 3 3 3 3 3 3 3 3 3 2 3 4 3 4 4 3 2 2 2 2 3 3 3 2 2 3 3 3 3 3 3 2 3 3 3 4 5 5 6 7 8 9 10 3 3 2 3 3 2 3 4 3 4 2 2 3 4 3 3 2 3 3 3 3 3 3 4 3 4 3 3 3 3 3 4 5 3 3 3 2 3 3 3 3 2 3 4 5 6 7 8 9 10 11 4 3 3 3 3 3 4 3 4 4 4 5 2 2 2 3 3 3 3 3 2 3 3 2 2 3 3 4 3 4 3 3 4 3 4 5 3 3 4 3 4 3 3 4 5 6 7 8 9 10 6 3 2 2 2 3 3 3 4 3 3 3 3 4 4 2 3 3 3 2 3 3 3 4 3 3 4 3 3 3 2 3 2 3 2 3 4 3 3 3 2 3 4 5 6 7 8 9 10 11 12 3 2 3 3 3 2 3 2 2 3 2 3 3 3 3 3 4 3 4 4 5 3 2 2 3 4 3 3 4 2 3 3 3 3 3 4 4 3 3 4 5 6 7 8 9 8 9 10 11 3 2 3 3 4 4 3 3 4 4 3 3 3 4 3 4 5 2 3 3 3 3 2 2 3 2 3 3 3 4 3 4 4 4 2 3 4 3 3 3 3 4 5 6 7 8 9 10 4 4 2 3 2 3 3 3 3 3 3 3 3 4 4 3 3 3 4 3 2 3 3 3 3 3 4 3 4 3 2 3 3 3 4 4 4 2 2 3 3 4 4 5 nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :maxetat 3466 :hashrepeats nil :lrsmode (quote t) :comparateur (quote compareevents) :name "improvizer" :context nil :continuity 0 :navigationmode (quote continuity) :currentstateidx 0 :prevstateidx -1 :max-continuity 1000 :start-region (list 0 3466) :fwsuffix (quote t) :bwsuffix (quote t) :bestsuffixmode nil :useestrada nil :usehindemith nil :refharmgrid nil :harmgridlength 48 :beats/measure 4 :reftempo 536 :currenttranspo 0 :lengthfactorsfromgrid (list 1 100) :besttranspomode (quote t) :firstwithouttranspomode (quote t) :authorizedtranspos (list 0) :randomprefixoccurrencemode (quote t) :tabou-mode nil :tabou (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :feature nil :hashlabeltranspo (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :from-file t))