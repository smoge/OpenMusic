(in-package :om)(if (find-class (quote improvizer) nil) (make-instance (quote improvizer) :vectext (make-array 4500 :initial-contents (eval-my-list (quote (nil (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Lon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gtemps," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ché " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "bonn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rfois," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "x se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rmaient " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "n'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re: " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "«Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "m'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dors." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rcher " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "somm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "m'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "llait; " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ser " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mains " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ffler " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re; " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "n'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "cess" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rmant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fle" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fle" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vaient " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pris " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er; " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mblait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rlait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "l'ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "vra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ge: " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "qua" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "or," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Fran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "çois " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "I" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rles " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "Quint." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Cet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rvi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lques " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "quait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "cai" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lles " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "emp" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chait " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mpte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ge" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "oir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "n'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "llu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "çait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gi" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble," :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temp" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sy" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sten" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re; " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "jet " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "vre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "bre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "m'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ppli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "quer " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "non; " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vrais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "vu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tonn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "trou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "san" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sprit," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ppa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mpré" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "hen" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble," :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vrai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "man" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "quell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "j'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ffle" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "trains " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moins " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gné," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chant " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "oi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "seau " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rêt," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "stan" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "camp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rte " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "geur " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "hâ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vers " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sta" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "va " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vé " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l'e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xci" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "doit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "veaux," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ctes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ccou" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "més," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "cen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lamp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tran" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "gè" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vent " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "len" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ceur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "our." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "
J'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ppu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "dre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ple" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ines " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fraî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ches," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ttais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "llu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "met" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rder " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "Bien" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "C'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "stant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rtir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cher " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "hô" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tel " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llé " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rce" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Quel " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "bon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "jà " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "tin!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mest" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ques " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ront " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vés," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "rra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "sonn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vien" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "dra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rter " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cours." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "L'e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "spé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ran" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "d'ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "donn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffrir." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "Ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ste" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cru " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ppro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chent," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gnent." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "spa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ru." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "C'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vient " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "d'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gaz; " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rni" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mest" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "dra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rest" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffrir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rmais," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rfois " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "n'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "courts " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ils " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "stant," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "d'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ments " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rgan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ques " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "boi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "d'ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vrir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "xer " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ka" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "sco" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "pe " :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "go" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ûter " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "grâ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "men" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tan" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "scien" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "somm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "taient " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "plon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gés " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "meu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bles," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "n'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "qu'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "quel " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rnais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "m'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rmant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "joint " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "eff" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ort " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "â" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "rou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "terr" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eurs " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tines " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "cell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "cle " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "rât " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cles " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "qu'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "da" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "J'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cet " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ne" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "somm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "j'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "rou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "m'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pper " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mains " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ns de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "cle," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "me" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cau" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "j'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mplè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rner " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ves." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lque" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "fois," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "E" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "na" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "quit " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cô" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'A" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "dam," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "nais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "somm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rmé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "plais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "point " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "nt de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "go" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ûter," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "m'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "gin" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "c'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ffrait." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "sien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "pre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "s'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "joi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ndre," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "m'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "llais." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " Le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rest" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "hu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mains " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ppa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ntain " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tté" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lques " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ments " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ine; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "chau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "rba" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "poids " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ds de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Si," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lque" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "fois," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "traits " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "llais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "donn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "but: " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "rou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ceux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rtent " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voir " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leurs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "s'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ginent " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "go" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ûter " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "Peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "van" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ssait," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "homm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dort," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "tient " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rcle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fil " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rdre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lte " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "stinct " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "llant " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "point " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "nt de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "terr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ccu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "pe," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "s'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "squ'à " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leurs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rangs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vent " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ler," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mpre." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vers " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rs le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "tin " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lque " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mni" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "somm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "train " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "n de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "stu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ffé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "cell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment," :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffit " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bras " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rrê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ter " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ler " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "sau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l'heu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "me" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qu'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vient " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cher." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "s'il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "s'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ssou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pit " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rgen" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "xemp" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "dîner " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lors " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rs le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rse" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mplet " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rbi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tés," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "fe" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ger " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tess" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l'e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "spa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "d'ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vrir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pau" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "croi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ché " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lques " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "mois " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tré" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "somm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tendît " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sprit; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lors " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "lâ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "plan " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "m'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmi," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "m'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "llais " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "j'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "gno" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "trou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "stant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais; " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mpli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l'e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sten" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "fré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mal: " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'homm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rnes; " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lors " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rs le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "non " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lque" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "uns " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ceux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tés " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "j'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ait " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "d'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "haut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rer " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "d'où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "n'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rtir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seul; " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ssais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dess" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "us " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cles " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on," :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "fu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "vu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lamp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "col " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ttu," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mpo" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "saient " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "traits " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "gin" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "x de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi." :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Peu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mmo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mpo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "non " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tres," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mmo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "d'ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "llais " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "nsi," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sprit " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "s'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rcher," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssir," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rnait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ys," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "gou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rdi " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rchait," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "près " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rer " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "me" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mbres " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mur," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "meu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bles," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "stru" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nomm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "meu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "trou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Sa " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cô" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "oux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pau" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ccess" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eurs " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rs des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mbres " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmi," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "qu'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "murs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bles," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ge" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lon " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "gin" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rbi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "llonn" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "aient " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "nè" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bres." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "hé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rmes," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eût " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "den" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ppro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "rcon" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "stan" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ppe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "cun " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rtes," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tres," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l'e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sten" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loir," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "m'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rmant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "rou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cô" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ky" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rchant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "viner " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rien" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "s'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "gin" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ait," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "xemp" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "lda" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "quin " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais: " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "«Tiens," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "j'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "m'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "quoi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "man " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "bon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soir»," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "camp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "chez " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "pè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es; " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cô" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "quel " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sais," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ga" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "rdiens " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ssé " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sprit " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "n'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ppe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "laient " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "fla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lleu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Bo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "hê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "d'u" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rne," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "spen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chaî" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "net" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "al " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "Sien" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cher " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mbra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "chez " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gran" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rents," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ntains " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "qu'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ctu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "els " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pré" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ter " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "xa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cte" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "verr" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l'heu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llé." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "
Pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de; " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on: " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "chez " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Mme " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Sai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Loup," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "camp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "gne; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu!" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "Il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moins " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dix " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "doit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "dîner!" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "J'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rai " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soirs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "trant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "men" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Mme " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Sai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Loup," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "d'en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "sser " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bit." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Car " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ssé " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mbra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "nos " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ret" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rs les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rdifs," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "c'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "flets " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "rou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ges " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre." :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "C'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mè" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Tan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "chez " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "Mme " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Sai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Loup," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "plais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "trou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rtir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "qu'à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "vre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "clair " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lun" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "mins " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rai " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmi " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "dîner," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rçois," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "trons," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rsé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "feux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "x de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lamp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seul " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ces " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rno" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "fu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "raient " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lques " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "des; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vent," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "brè" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "trou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "stin" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ait " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "x les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tres " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rses " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ppo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "n'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lons," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "val " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rir," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ons " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ccess" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ves " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "kin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "to" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "sco" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "pe." :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "vu " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tôt " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mbres " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ssais " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ppe" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ler " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vaient " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mbres " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "d'hi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "quand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ché," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "blo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ttit " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "nid " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tress" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "c les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "cho" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "spa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes: " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "coin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "n de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ller," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "haut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rtu" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "bout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "châ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "bord " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "Dé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "bats " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ses," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "men" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ter " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mble " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "lon " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "chni" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "oi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "seaux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "s'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ppu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "fin" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment; " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "temps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "al " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "l le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "plais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "go" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ûte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "tir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "hors " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "(comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'hi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "ron" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mer " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "nid " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "terr" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ain " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "terr" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e)," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "feu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "tret" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "man" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "teau " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "d'air " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "chaud " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "fu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "meux," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "tra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rsé " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "lu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eurs " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "rs des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sons " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "llu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "d'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mpa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "lpa" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lcô" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "chau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rne " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "creu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "zon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rden" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tours " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "the" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ques," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ffles " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fraî" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "chi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ssent " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "vien" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "nent " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "gles," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sines " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gné" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "sont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "froi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mbres " :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "d'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "l'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "clair " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lun" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ppu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lets " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tr'ou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "verts," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "jet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "squ'au " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ed " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "clair " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lun" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ppu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "aux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "vo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lets " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tr'ou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "verts," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "jet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "squ'au " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ed " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "chell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "dort " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sque " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ple" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "air," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "san" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "lan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "cé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bri" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "poi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "nte " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "d'un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on-; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rfois " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "Lou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "is " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "XVI," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "gai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mê" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "er " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soir " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "n'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "trop " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lheu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "reux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lonn" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tes " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "aient " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "gè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rtaient " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vec " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tant " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "grâ" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "trer " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rver " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit; " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rfois " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "trai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "cell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pet" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "creu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "py" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "hau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deux " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ges " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "d'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jou," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "dès " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pre" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "to" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "qué " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ncu " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'ho" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "deaux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lets " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "so" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "len" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ffé" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ja" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ca" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ssait " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "haut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "n'eu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sse " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "là" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tran" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mpi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "to" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble " :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eds " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "qua" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dran" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "gu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lai" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rrant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "que" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "gles " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "creu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "sait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vif " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "plé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ni" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "champ " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "el " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ccou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "emp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "n'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "vu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "où " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "sé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "s'eff" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "rçant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " se " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "slo" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "quer," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rer " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "hau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "xa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "cte" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "fo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "remp" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "squ'en " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "haut " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "sque " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tonn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "oir," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ffert " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "its," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "tan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "dis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "lit," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vés," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "na" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ve," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ttant: " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "squ'à " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eût " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "chan" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "deaux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gné " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "pi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "gla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bli" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cru" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ell" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "sin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ssé " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mplè" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "te" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "vé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ble" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "hau" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "teur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ppa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "L'ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de!" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "na" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "geu" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "len" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "par " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "lais" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ser " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ffrir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "sprit " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "pen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "t des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "nes " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sta" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "lla" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "soi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re; " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lgré " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "heu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "reux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "x de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "trou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "car " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " ses " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seuls " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "mo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ens " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "mpu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ssant " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "nous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "dre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "lo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "gis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "bi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ta" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble." :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Ce" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rtes," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "j'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "bien " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "llé " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "nten" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ant," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "corps " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rni" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "fois " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "bon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "an" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ce" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rrê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "r de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi," :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ché " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "sous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s mes " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rtu" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mis " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "ppro" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "xi" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ti" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 7 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pla" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ri" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "reau," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "min" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "fen" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ê" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ru" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "deux " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rtes." :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "Mais " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "beau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "sa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "n'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "s les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "meu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "gno" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ran" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ve" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "il " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "m'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "stant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "sin" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "on " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "l'i" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "stin" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "cte," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moins " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "croi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "pré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sen" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "po" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ssi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ble," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "bran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "le " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "tait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "donn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "mé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "gé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "né" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ne " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "che" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rchais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pas " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ren" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "do" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "t de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "su" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te; " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ssais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "plus " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rti" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "nu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "it " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ppe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ler " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "no" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "tre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "d'au" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "tre" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "fois," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "Co" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "mbra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "chez " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ma " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gran" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "d'tan" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "te," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Ba" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lbec," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "Pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ris," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "Don" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "è" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "res," :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "Ven" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "se," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "lleurs " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " me " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ppe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ler " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "li" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "eux," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pe" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "rsonn" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "j'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "j'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vais " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "vu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "d'ell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "es," :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " ce " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "qu'on " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "m'en " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "vait " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "con" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "té " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :hashtransition (let ((hashtable (make-hash-table))) (loop for key in (append (listlistlist 4094 4095 4096 4097 4098 4099 4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199 4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274)) for val in (append (list (list 32 25 15 14 10 8 7 6 5 4 3 2 1) (list 2945 1994 735 595 518 509 324 223 211 208 140 125 2) (list 648 508 471 466 445 269 203 185 130 61 49 43 3) (list 4020 1014 199 174 134 97 89 79 63 36 23 14 4) (list 251 249 163 136 103 42 32 30 25 18 13 10 5) (list 4144 2234 2156 1390 802 436 370 255 233 177 126 86 6) (list 519 284 197 149 143 124 77 64 34 29 22 19 7) (list 761 533 525 510 437 355 323 167 145 102 80 21 8) (list 1443 439 339 309 258 121 114 101 65 62 51 28 9) (list 3935 2725 2108 932 495 475 342 190 184 76 25 10) (list 2664 1740 895 642 345 218 178 116 90 85 72 50 11) (list 1721 1303 1172 756 406 387 373 278 247 228 97 12) (list 2126 1349 1284 898 444 329 13) (list 2600 1509 1425 1160 961 476 420 301 128 14) (list 684 537 472 281 220 210 148 104 60 39 20 17 15) (list 2083 1714 879 851 447 348 252 186 160 94 16) (list 4214 3777 3448 2671 2435 1709 521 17) (list 2599 2316 1986 1395 1295 1223 1105 1095 637 267 169 42 18) (list 2023 1739 1586 925 861 294 133 124 77 74 46 19) (list 3515 3174 1647 1351 1199 768 667 655 575 503 481 181 20) (list 3987 3647 3567 1710 1275 577 533 21) (list 3452 2221 2114 1541 1403 889 792 763 692 22) (list 2441 1525 993 947 307 276 174 134 36 23) (list 3298 3127 2649 2451 1238 669 616 545 287 158 121 28 24) (list 2162 1232 495 475 358 25) (list 3869 647 643 499 446 395 272 271 193 175 146 144 26) (list 3940 2622 2544 910 703 686 629 350 53 27) (list 3650 1383 28) (list 3695 2306 1459 1373 1369 827 730 463 458 173 29) (list 1552 1227 1128 818 559 498 431 365 322 188 152 56 30) (list 2894 1886 1883 1143 742 483 461 207 71 48 45 32 31) (list 3960 3734 3551 1883 1143 414 207 71 70 32) (list 337 254 240 222 166 159 131 100 81 78 66 40 33) (list 4060 3292 2066 1260 724 435 316 143 34) (list 3866 3655 3348 1587 1460 1264 1175 957 956 35) (list 997 276 36) (list 2796 2688 1230 1014 248 129 89 38 37) (list 2688 89 38) (list 3632 2275 39) (list 1929 1323 854 504 384 311 222 166 142 113 40) (list 4274 2478 1864 824 332 281 220 112 93 60 41) (list 3571 3019 1105 267 42) (list 1762 1749 1119 866 697 445 432 415 269 244 185 49 43) (list 2567 2433 1959 1655 1424 1217 1136 1131 590 567 118 44) (list 2585 461 69 45) (list 3735 3173 1944 1835 46) (list 1914 1707 1363 1128 882 818 606 431 56 47) (list 3085 1605 155 48) (list 1818 1654 697 456 415 269 244 49) (list 3775 3768 2996 2992 2711 1910 847 665 409 116 96 50) (list 4162 3106 2734 2470 1183 397 341 51) (list 3869 3582 3299 3138 3102 2932 52) (list 53) (list 2816 1464 1159 922 813 54) (list 4018 294 55) (list 56) (list 2976 301 57) (list 3811 58) (list 59) (list 60) (list 3764 2778 2436 2426 2271 1352 1130 552 471 61) (list 2265 1690 1660 786 721 592 298 289 99 62) (list 3014 2486 2353 2047 2018 1724 1371 1184 917 633 195 63) (list 4141 3167 1594 1301 994 687 654 558 421 64) (list 3101 1701 1447 1400 1058 1031 958 826 783 683 354 75 65) (list 1813 1278 1204 1001 928 794 337 315 254 231 159 100 66) (list 2645 2357 2264 1930 408 203 67) (list 2567 1217 590 68) (list 69) (list 207 70) (list 3734 71) (list 3086 2677 2553 1269 620 85 72) (list 4212 4101 2101 2006 1755 1379 1335 1196 905 734 676 83 73) (list 1739 1646 1168 1069 925 605 540 74) (list 2611 2286 1447 683 610 75) (list 3529 1434 903 661 184 76) (list 3483 3042 1586 1456 1090 861 682 124 77) (list 3038 2754 2064 1779 1595 1234 646 464 202 92 78) (list 4020 2764 1735 1416 557 425 381 369 262 162 120 108 79) (list 2797 1540 1037 761 750 477 374 362 80) (list 1073 1044 964 423 331 81) (list 4105 3726 2679 2664 2368 2090 1780 1324 1116 980 227 82) (list 2284 83) (list 3550 2292 2195 742 84) (list 85) (list 2404 989 679 352 86) (list 2521 2131 1531 1450 1326 411 334 87) (list 3631 2026 88) (list 89) (list 2526 2456 1426 1182 452 351 263 246 90) (list 2842 2428 1990 1924 1512 1174 1111 659 480 326 197 91) (list 2754 1704 92) (list 3018 1405 93) (list 1903 94) (list 2857 2693 978 785 95) (list 2095 96) (list 4242 3239 1622 1283 394 373 97) (list 3807 2058 1731 1526 1327 566 426 392 130 98) (list 3275 2046 298 99) (list 434 100) (list 3580 2532 1315 1084 987 712 114 101) (list 3336 2563 1894 999 963 691 584 355 102) (list 3780 2011 2009 1912 1607 1428 744 672 601 594 344 251 103) (list 1681 1054 892 778 715 487 484 470 210 191 148 104) (list 1591 802 769 333 257 177 105) (list 3359 3347 3134 2878 1180 739 574 106) (list 588 107) (list 108) (list 3457 2953 2687 1014 109) (list 2275 110) (list 111) (list 112) (list 4104 2898 2122 1815 1406 113) (list 3580 2608 1315 1084 987 114) (list 2558 1744 1691 1401 543 508 466 288 283 239 115) (list 116) (list 1698 973 914 875 780 720 449 360 264 117) (list 118) (list 3562 1496 119) (list 843 120) (list 3523 1238 494 158 121) (list 3581 3283 3227 3107 1893 1443 1368 1059 657 238 230 122) (list 4099 3616 1062 932 123) (list 124) (list 3168 2945 2884 1949 1176 1112 807 518 490 140 125) (list 4082 2972 2167 2156 1955 1449 126) (list 3784 3229 3091 3030 2756 1567 1192 990 912 765 127) (list 1593 961 128) (list 1257 129) (list 130) (list 3486 2208 1215 979 556 265 240 131) (list 2482 1639 1508 1333 1006 612 599 312 242 232 225 136 132) (list 2924 430 133) (list 2441 1525 541 134) (list 3725 2765 2689 1725 1161 823 704 407 135) (list 4239 3155 2052 136) (list 3072 2931 2031 1253 1109 1004 878 745 690 462 309 237 137) (list 4252 2581 2143 190 138) (list 2063 139) (list 140) (list 3446 2861 2714 2529 2033 1554 141) (list 166 142) (list 4060 3292 1260 1029 143) (list 2925 2460 1991 1600 1151 271 144) (list 3180 3093 2819 2346 145) (list 3648 2787 970 146) (list 3782 2933 2911 2321 1907 1885 147) (list 3260 2964 148) (list 2730 2037 1821 1150 949 663 489 379 321 182 180 149) (list 3867 3766 2024 1545 764 436 150) (list 3984 1728 502 151) (list 1552 152) (list 3035 2662 2154 609 153) (list 608 154) (list 155) (list 156) (list 157) (list 158) (list 4111 3791 1769 1278 1204 1190 942 598 159) (list 4147 160) (list 4146 2565 1249 161) (list 1312 162) (list 1829 1799 1565 1003 844 706 419 217 163) (list 4118 2166 1994 1583 1396 1285 1099 735 613 595 208 164) (list 3123 2723 2714 2247 1554 165) (list 166) (list 3779 3635 2786 2087 1793 1056 1051 167) (list 2654 2319 1559 759 751 699 585 551 168) (list 2599 169) (list 3078 531 193 170) (list 171) (list 172) (list 173) (list 3816 3525 947 174) (list 2345 1906 1579 1451 1247 967 395 388 175) (list 3942 2484 2387 1601 1506 1219 982 532 176) (list 738 177) (list 1923 1716 178) (list 4106 3473 2527 1977 1590 829 527 179) (list 2883 2730 2555 1544 548 180) (list 4229 3995 3147 2716 801 181) (list 3994 2071 1672 517 379 321 182) (list 4218 2740 2105 1892 826 183) (list 1387 184) (list 2380 1063 185) (list 186) (list 187) (list 3310 2667 188) (list 2931 2880 2217 1842 878 237 189) (list 4252 190) (list 2136 1388 1054 662 191) (list 2587 2506 2499 1986 1395 1341 815 637 192) (list 193) (list 3137 2461 809 339 194) (list 4088 3211 2538 2259 195) (list 3256 1857 196) (list 197) (list 2226 2072 1461 1214 1070 693 664 562 459 198) (list 2344 1837 570 296 199) (list 4144 3899 3369 2520 1390 1185 911 757 582 370 200) (list 2325 1875 201) (list 202) (list 2634 589 203) (list 1819 1065 1008 915 867 623 563 427 204) (list 2696 1959 205) (list 206) (list 207) (list 4270 4118 2669 208) (list 3328 2904 1377 728 710 376 209) (list 1178 210) (list 3534 3175 2528 639 211) (list 4135 2643 1950 1723 1048 930 212) (list 213) (list 3042 1586 214) (list 1490 215) (list 216) (list 217) (list 218) (list 3839 2678 2263 1896 1792 1210 848 723 627 492 453 219) (list 2492 2478 220) (list 2447 2410 2082 1978 1574 1156 1022 652 576 537 488 221) (list 3634 986 384 222) (list 1211 929 223) (list 3602 3050 1415 224) (list 2030 1287 225) (list 368 226) (list 227) (list 3425 1280 387 228) (list 1859 616 287 229) (list 230) (list 337 231) (list 2268 1141 1006 612 599 232) (list 2990 233) (list 3707 3104 1916 680 632 583 535 258 234) (list 1940 235) (list 3600 236) (list 3883 237) (list 3507 3335 3227 2201 1443 238) (list 2558 1744 239) (list 2339 2208 556 240) (list 2065 1162 417 385 241) (list 2617 242) (list 4269 1943 1309 1268 1142 243) (list 3157 1818 456 244) (list 4173 4158 2323 1632 1520 245) (list 246) (list 1858 1839 1721 1172 406 402 391 278 247) (list 248) (list 2592 2027 1502 249) (list 2053 1075 858 832 791 550 525 330 323 250) (list 3962 3287 3025 2011 1607 744 708 601 344 251) (list 3308 1714 1708 1310 1228 1193 1144 977 348 252) (list 3318 441 439 253) (list 2445 315 254) (list 1922 1897 1852 1191 855 255) (list 3823 2738 2158 1485 1343 256) (list 4095 257) (list 1293 632 258) (list 3719 2234 1854 1484 1239 959 259) (list 2613 1086 754 306 260) (list 261) (list 262) (list 2456 263) (list 264) (list 265) (list 1902 266) (list 267) (list 4206 3475 3023 2176 1862 816 483 268) (list 697 269) (list 1869 1831 1549 1479 1399 955 876 512 399 284 270) (list 3889 2621 271) (list 863 272) (list 3423 2422 2393 1201 273) (list 274) (list 275) (list 276) (list 4211 2811 1182 277) (list 402 278) (list 3426 1222 1155 799 279) (list 1083 280) (list 281) (list 2184 1966 1850 1626 1088 1023 752 656 528 522 282) (list 3428 508 283) (list 399 284) (list 3920 2228 2016 1791 1740 1474 1421 1078 895 828 740 285) (list 1303 1081 1011 756 328 286) (list 287) (list 555 543 288) (list 4137 2288 1660 289) (list 3935 3731 2108 1455 1441 290) (list 291) (list 292) (list 293) (list 294) (list 3932 2294 1070 295) (list 2344 1837 570 296) (list 297) (list 298) (list 4138 2306 1459 458 299) (list 300) (list 301) (list 3253 3121 2510 2475 302) (list 303) (list 304) (list 305) (list 306) (list 307) (list 4198 4156 3641 2335 1674 1514 1413 318 308) (list 690 309) (list 3108 2401 2270 1384 850 774 684 670 536 529 310) (list 3496 1050 1028 788 311) (list 2989 1761 1639 1561 1508 1333 1267 831 312) (list 977 313) (list 314) (list 315) (list 435 316) (list 2795 2057 1188 966 822 317) (list 318) (list 319) (list 320) (list 321) (list 4066 3664 3307 2930 2153 322) (list 3047 2848 2181 1766 1092 883 550 525 323) (list 3337 1047 939 375 324) (list 4010 3213 2385 2373 2110 1289 1067 614 491 325) (list 3947 1213 326) (list 3613 2841 327) (list 1081 328) (list 2418 329) (list 330) (list 2922 1797 1225 331) (list 3570 2823 2183 332) (list 4192 2576 333) (list 334) (list 3298 335) (list 4098 3970 336) (list 337) (list 3957 2766 2423 2421 804 647 628 338) (list 4002 339) (list 4039 2005 1696 988 722 658 546 442 340) (list 3106 341) (list 2379 2370 342) (list 343) (list 344) (list 1347 579 479 345) (list 1290 346) (list 2009 1912 1428 347) (list 4042 2093 348) (list 2673 349) (list 1040 350) (list 1616 452 390 351) (list 2404 1530 352) (list 353) (list 4076 3101 2098 902 354) (list 355) (list 2820 1919 1794 1683 833 356) (list 3694 1277 357) (list 358) (list 359) (list 360) (list 4122 3922 3620 2570 361) (list 362) (list 3316 363) (list 364) (list 365) (list 3981 366) (list 367) (list 368) (list 1237 369) (list 4093 582 370) (list 4193 3795 2523 2405 770 371) (list 3768 2992 372) (list 3239 373) (list 374) (list 3416 2978 1047 375) (list 3505 376) (list 2489 1446 377) (list 1753 378) (list 2071 379) (list 1307 380) (list 3684 2686 2254 381) (list 3067 2777 2626 1804 1313 506 382) (list 383) (list 384) (list 1802 385) (list 386) (list 387) (list 1906 1247 395 388) (list 703 389) (list 390) (list 2638 1721 1172 1154 406 391) (list 392) (list 4073 3775 2996 393) (list 2519 1283 394) (list 395) (list 1511 1418 719 678 675 642 396) (list 397) (list 3364 1659 398) (list 2376 399) (list 4237 3789 400) (list 401) (list 402) (list 403) (list 404) (list 405) (list 406) (list 3154 2986 1012 407) (list 408) (list 1771 409) (list 2096 410) (list 411) (list 2630 2439 1582 1477 1108 857 469 412) (list 413) (list 414) (list 1654 415) (list 1901 416) (list 417) (list 2952 1803 1206 425 418) (list 419) (list 420) (list 1594 1198 421) (list 422) (list 423) (list 3182 424) (list 425) (list 3060 2517 1731 1687 426) (list 3380 623 427) (list 428) (list 429) (list 430) (list 3034 1707 431) (list 4067 3742 3675 2239 2213 1519 432) (list 3832 3027 2589 1690 592 457 433) (list 434) (list 435) (list 1727 436) (list 3201 2748 758 437) (list 2564 2347 1359 1038 438) (list 439) (list 3128 2185 879 784 440) (list 3318 441) (list 442) (list 1968 443) (list 444) (list 445) (list 4133 4130 3136 3061 2962 2406 2147 674 450 446) (list 3079 1248 447) (list 3517 1145 448) (list 3130 449) (list 3215 450) (list 3940 1463 1382 451) (list 1720 1616 1529 452) (list 1921 453) (list 2813 1984 1252 1118 1098 454) (list 455) (list 456) (list 457) (list 458) (list 459) (list 3772 3117 2889 841 460) (list 1834 461) (list 3999 3802 3552 3476 2196 462) (list 3231 1843 730 497 463) (list 2282 1941 464) (list 1481 465) (list 466) (list 3822 3794 3667 3200 781 467) (list 3845 3630 2525 468) (list 2439 469) (list 470) (list 3764 3671 3628 2870 2762 2351 1130 471) (list 3691 2876 2559 2546 2302 1328 974 694 472) (list 2874 2402 2050 1953 1389 907 760 653 485 473) (list 2649 2451 1695 669 474) (list 2162 475) (list 476) (list 2977 2178 477) (list 3352 635 478) (list 479) (list 480) (list 3993 3057 2803 667 481) (list 3148 1680 514 482) (list 483) (list 3188 2869 2845 2498 1785 1676 1504 934 892 484) (list 3502 2874 1694 1389 907 485) (list 3997 3097 2542 2245 937 486) (list 2761 2505 487) (list 3896 652 488) (list 4228 3813 3436 2129 489) (list 3445 2884 1949 1376 518 490) (list 3946 2385 2373 2313 491) (list 492) (list 2516 581 493) (list 494) (list 495) (list 3530 2744 2582 2465 1442 496) (list 497) (list 4250 3741 3326 2939 498) (list 1809 1364 499) (list 3622 3139 3062 2674 2480 2424 2236 968 500) (list 501) (list 502) (list 503) (list 4128 3468 2223 1266 504) (list 3059 2909 1300 789 505) (list 506) (list 3953 507) (list 508) (list 3049 2860 1750 1732 1066 1017 509) (list 3277 2885 510) (list 3485 2906 2859 2749 2146 1909 511) (list 2620 1869 1399 1338 1077 512) (list 2409 1849 768 513) (list 514) (list 3045 515) (list 516) (list 517) (list 1949 1376 518) (list 3797 3770 3176 2780 2660 2390 1733 519) (list 2429 520) (list 521) (list 522) (list 894 523) (list 524) (list 525) (list 3636 2886 2172 1895 526) (list 527) (list 528) (list 529) (list 3554 3001 2219 1861 1295 1095 872 714 530) (list 531) (list 532) (list 533) (list 534) (list 3707 535) (list 3892 1625 1294 536) (list 4164 3855 2831 1574 537) (list 4078 1976 1677 1657 779 700 538) (list 3592 3549 2035 1755 1649 734 539) (list 1807 540) (list 3806 541) (list 3127 542) (list 543) (list 4152 3429 1536 747 544) (list 3653 1776 545) (list 3271 2330 1696 546) (list 3473 547) (list 2883 548) (list 549) (list 550) (list 2598 1035 551) (list 3722 2709 552) (list 3898 2871 553) (list 3270 554) (list 555) (list 556) (list 4092 3314 2764 2455 2273 557) (list 3865 2255 1301 558) (list 2640 1841 1208 559) (list 1915 560) (list 3374 561) (list 562) (list 3933 563) (list 3218 2711 1354 564) (list 565) (list 566) (list 3421 1688 567) (list 3848 568) (list 569) (list 570) (list 571) (list 572) (list 573) (list 574) (list 4202 2807 837 575) (list 3076 2804 2410 2327 2082 1022 576) (list 3567 577) (list 2551 1556 672 578) (list 579) (list 580) (list 581) (list 582) (list 4124 3598 1624 583) (list 584) (list 1559 585) (list 1292 586) (list 587) (list 588) (list 589) (list 590) (list 1494 866 591) (list 1690 592) (list 2563 1072 593) (list 594) (list 2166 709 595) (list 1935 1102 1018 640 596) (list 597) (list 942 598) (list 1141 599) (list 3926 2053 1075 832 600) (list 601) (list 3194 2075 1652 602) (list 2553 620 603) (list 604) (list 605) (list 3084 1808 1518 1128 606) (list 3035 609 607) (list 608) (list 609) (list 1433 610) (list 4006 611) (list 612) (list 1099 613) (list 2110 1289 1125 614) (list 3153 2314 615) (list 616) (list 2171 999 963 617) (list 618) (list 619) (list 620) (list 4208 1500 1437 621) (list 622) (list 623) (list 4222 772 624) (list 625) (list 626) (list 627) (list 628) (list 1318 944 629) (list 630) (list 3358 631) (list 632) (list 1856 633) (list 3415 2260 634) (list 3384 635) (list 636) (list 637) (list 4226 4204 4070 2350 1681 778 715 638) (list 639) (list 640) (list 641) (list 642) (list 2993 1422 981 643) (list 3103 2926 1580 644) (list 2149 806 645) (list 646) (list 3957 2421 647) (list 3916 3216 3144 1453 971 954 864 717 648) (list 2858 1918 1402 1114 698 649) (list 2199 2074 650) (list 651) (list 652) (list 3857 3512 3262 2832 2548 2160 936 653) (list 4141 654) (list 3467 3241 1610 1305 1199 655) (list 1850 1088 656) (list 3645 3283 657) (list 3472 2005 658) (list 3272 2969 2415 1703 1111 659) (list 3585 1534 660) (list 1667 661) (list 1388 662) (list 663) (list 3690 3116 2072 1642 664) (list 2360 665) (list 4182 3673 2960 2840 2428 1772 666) (list 667) (list 4140 3659 2759 1953 1357 668) (list 669) (list 4058 1384 952 871 774 670) (list 3647 671) (list 3835 672) (list 3026 1135 673) (list 674) (list 719 675) (list 1993 1645 676) (list 3258 677) (list 678) (list 3595 679) (list 680) (list 681) (list 4126 682) (list 4005 2611 683) (list 4219 4077 3160 1573 1410 684) (list 2479 2320 2257 1505 1200 716 685) (list 1158 910 686) (list 1366 687) (list 4210 688) (list 3641 689) (list 690) (list 3477 1558 1133 691) (list 3955 692) (list 1613 840 693) (list 3691 3294 2302 694) (list 4069 3711 3208 1272 695) (list 696) (list 697) (list 698) (list 3142 699) (list 733 700) (list 2021 798 701) (list 702) (list 703) (list 704) (list 3951 3522 3341 3264 1013 749 705) (list 3460 706) (list 791 707) (list 708) (list 2166 709) (list 710) (list 3065 711) (list 712) (list 850 713) (list 714) (list 778 715) (list 1505 716) (list 3144 954 717) (list 4133 718) (list 719) (list 3619 720) (list 2362 2305 721) (list 722) (list 3874 723) (list 821 724) (list 2975 2596 2212 1597 1227 725) (list 726) (list 727) (list 728) (list 3536 3506 2142 1663 729) (list 730) (list 731) (list 732) (list 733) (list 734) (list 2713 1994 735) (list 3179 3112 1846 920 808 736) (list 737) (list 738) (list 739) (list 1788 740) (list 741) (list 3738 742) (list 2145 743) (list 3962 3025 2165 1607 744) (list 3836 3367 2200 1557 1026 745) (list 3196 2583 2197 746) (list 747) (list 748) (list 749) (list 1043 750) (list 751) (list 752) (list 3719 3162 753) (list 754) (list 755) (list 756) (list 2520 1874 1623 757) (list 758) (list 3721 759) (list 760) (list 3503 3451 2833 1037 761) (list 2054 762) (list 763) (list 764) (list 3703 765) (list 4053 2578 766) (list 767) (list 768) (list 2808 802 769) (list 4193 3237 770) (list 771) (list 772) (list 773) (list 871 774) (list 3161 1626 775) (list 776) (list 777) (list 778) (list 1976 1677 1657 779) (list 2699 2304 780) (list 781) (list 1764 782) (list 783) (list 784) (list 2693 785) (list 786) (list 3833 787) (list 788) (list 789) (list 2900 1123 790) (list 791) (list 3927 2221 889 792) (list 1701 1409 1058 885 793) (list 794) (list 2087 795) (list 796) (list 797) (list 798) (list 1222 799) (list 800) (list 801) (list 802) (list 3863 1546 1240 1186 803) (list 804) (list 805) (list 806) (list 807) (list 808) (list 809) (list 4003 810) (list 811) (list 812) (list 813) (list 814) (list 815) (list 4247 4206 2176 816) (list 817) (list 818) (list 1589 819) (list 1210 820) (list 821) (list 822) (list 823) (list 2987 1104 824) (list 3689 2929 2824 825) (list 3007 1892 826) (list 3815 2281 886 827) (list 3920 3838 3611 1844 895 828) (list 1543 829) (list 4012 830) (list 831) (list 3926 832) (list 2919 1767 833) (list 2799 834) (list 835) (list 3205 836) (list 837) (list 838) (list 839) (list 840) (list 841) (list 842) (list 843) (list 844) (list 3686 3172 2901 845) (list 846) (list 847) (list 3219 848) (list 849) (list 850) (list 851) (list 4167 3949 3465 3441 2190 1229 852) (list 2854 2431 2187 853) (list 854) (list 4266 1938 855) (list 3564 856) (list 857) (list 858) (list 2337 1878 1093 859) (list 860) (list 861) (list 2925 1169 862) (list 863) (list 4132 1453 864) (list 1424 865) (list 866) (list 1819 1008 867) (list 3729 2695 1065 868) (list 869) (list 870) (list 871) (list 3001 1861 872) (list 4172 873) (list 874) (list 875) (list 3131 876) (list 3980 3809 1339 877) (list 878) (list 879) (list 1996 1360 1297 1194 880) (list 881) (list 882) (list 3047 1092 883) (list 889 884) (list 885) (list 886) (list 3800 887) (list 888) (list 889) (list 2180 890) (list 891) (list 2498 892) (list 3282 1966 893) (list 894) (list 895) (list 3362 2826 2680 1982 1697 896) (list 4080 3166 2998 2985 897) (list 898) (list 3248 899) (list 900) (list 901) (list 902) (list 903) (list 2299 2043 904) (list 1669 905) (list 3895 3820 2174 2036 906) (list 907) (list 3662 3660 3244 2702 2549 984 908) (list 909) (list 910) (list 4144 911) (list 912) (list 3605 1981 913) (list 914) (list 3728 915) (list 3730 3198 2562 916) (list 3382 917) (list 3532 2651 1255 1033 918) (list 919) (list 920) (list 921) (list 922) (list 923) (list 924) (list 925) (list 3484 3289 926) (list 927) (list 928) (list 929) (list 3040 930) (list 1743 931) (list 932) (list 3732 2144 1713 1435 933) (list 2869 934) (list 935) (list 3512 936) (list 2504 937) (list 938) (list 939) (list 2979 940) (list 941) (list 942) (list 943) (list 944) (list 945) (list 946) (list 947) (list 3438 1331 948) (list 2152 949) (list 3913 3545 1412 1330 993 950) (list 3013 951) (list 952) (list 953) (list 954) (list 1848 1811 955) (list 2296 956) (list 3454 1946 996 957) (list 3853 3715 2003 1824 1031 958) (list 2234 2079 959) (list 3229 3223 3163 2472 960) (list 961) (list 962) (list 963) (list 2367 1073 964) (list 1226 965) (list 2057 966) (list 967) (list 3622 3343 3016 968) (list 969) (list 970) (list 971) (list 972) (list 973) (list 2700 1271 974) (list 4273 1121 975) (list 976) (list 977) (list 2857 2094 978) (list 979) (list 980) (list 981) (list 2387 982) (list 983) (list 984) (list 985) (list 986) (list 987) (list 4039 988) (list 989) (list 4261 990) (list 3704 3224 991) (list 992) (list 993) (list 994) (list 3866 1264 995) (list 996) (list 997) (list 998) (list 999) (list 4048 3478 1483 1000) (list 1001) (list 3378 1002) (list 1565 1003) (list 1004) (list 4000 1988 1563 1005) (list 1006) (list 3938 3876 1900 1762 1749 1548 1492 1119 1007) (list 1008) (list 1746 1009) (list 1010) (list 1011) (list 1012) (list 1013) (list 1014) (list 3265 2774 2659 2487 2442 1954 1736 1722 1015) (list 1016) (list 1017) (list 1102 1018) (list 2980 1467 1393 1019) (list 1020) (list 1021) (list 1022) (list 4165 1023) (list 3954 1024) (list 1346 1025) (list 1026) (list 1027) (list 1028) (list 4060 1029) (list 1030) (list 1031) (list 1371 1262 1032) (list 1033) (list 3286 1034) (list 1035) (list 1036) (list 1037) (list 1359 1038) (list 1039) (list 1040) (list 1041) (list 1042) (list 1043) (list 1044) (list 2625 1798 1045) (list 1046) (list 1047) (list 1048) (list 2683 2401 1049) (list 3496 1050) (list 1051) (list 4046 3052 2691 1052) (list 1053) (list 1054) (list 3189 1801 1299 1055) (list 1056) (list 2495 1057) (list 1409 1058) (list 2557 2004 1893 1368 1059) (list 1061 1060) (list 1061) (list 1062) (list 1063) (list 1064) (list 1065) (list 1066) (list 4010 1067) (list 3418 2468 1068) (list 1739 1168 1127 1069) (list 1070) (list 1458 1071) (list 1072) (list 1073) (list 2923 1074) (list 1075) (list 3746 3048 2906 2146 1909 1076) (list 2620 1869 1338 1077) (list 1078) (list 3657 2842 2001 1079) (list 3613 1080) (list 1081) (list 1082) (list 1083) (list 1084) (list 1085) (list 1086) (list 2081 1087) (list 1088) (list 3975 2867 2725 1089) (list 1090) (list 1091) (list 1092) (list 1878 1093) (list 1094) (list 1095) (list 2801 1096) (list 1097) (list 1098) (list 1099) (list 4271 4025 3700 1100) (list 1101) (list 1102) (list 1103) (list 1104) (list 1105) (list 1342 1106) (list 1107) (list 1108) (list 1109) (list 2881 2193 1110) (list 1665 1111) (list 1112) (list 2308 1620 1113) (list 1114) (list 1115) (list 1116) (list 1117) (list 1252 1118) (list 3876 1119) (list 4054 3590 3010 2381 1120) (list 1121) (list 2909 1122) (list 1123) (list 1124) (list 1125) (list 1126) (list 1127) (list 1128) (list 3281 3235 1975 1598 1340 1129) (list 3764 3666 3312 1130) (list 2433 1131) (list 3304 2890 2580 1132) (list 1133) (list 3193 2746 1134) (list 1135) (list 1136) (list 1137) (list 1138) (list 1139) (list 1140) (list 1141) (list 1142) (list 1883 1143) (list 2852 1714 1310 1144) (list 1145) (list 1905 1146) (list 1147) (list 1148) (list 1149) (list 1150) (list 1600 1151) (list 4143 2622 1152) (list 1153) (list 1172 1154) (list 1155) (list 1156) (list 2412 1157) (list 1158) (list 1159) (list 1320 1160) (list 1161) (list 1162) (list 3183 1163) (list 1164) (list 1165) (list 1166) (list 1167) (list 1168) (list 1169) (list 1170) (list 1171) (list 1172) (list 1173) (list 1174) (list 2002 1782 1175) (list 2971 2945 1619 1176) (list 3064 2141 2068 1377 1177) (list 1178) (list 1179) (list 1180) (list 1181) (list 2811 1182) (list 1183) (list 2018 1184) (list 3369 1185) (list 1186) (list 2211 1187) (list 1188) (list 1189) (list 1190) (list 1191) (list 3604 2756 1192) (list 1193) (list 1297 1194) (list 1195) (list 3082 1196) (list 3419 1197) (list 1198) (list 4257 1610 1199) (list 2257 1200) (list 2393 1201) (list 1202) (list 1203) (list 1204) (list 1880 1205) (list 2952 1206) (list 2015 1207) (list 1208) (list 1209) (list 1210) (list 1211) (list 1212) (list 1213) (list 1214) (list 2615 1215) (list 1216) (list 1217) (list 3422 1218) (list 1219) (list 1220) (list 1221) (list 1222) (list 4244 3251 2316 1223) (list 2220 1224) (list 1225) (list 1226) (list 1227) (list 3308 1708 1228) (list 3465 2853 1229) (list 1230) (list 4110 2365 1231) (list 1232) (list 1233) (list 1779 1234) (list 4233 2482 1705 1491 1308 1235) (list 1236) (list 1237) (list 1238) (list 1239) (list 3863 1240) (list 2928 2897 2575 1241) (list 1242) (list 1243) (list 1244) (list 1245) (list 1246) (list 1247) (list 1248) (list 1249) (list 1250) (list 1251) (list 1252) (list 1253) (list 3537 3368 3255 2864 1254) (list 3532 1255) (list 1256) (list 1257) (list 1258) (list 1323 1259) (list 1260) (list 4014 1261) (list 1262) (list 1263) (list 1264) (list 1947 1265) (list 1266) (list 1761 1267) (list 1817 1268) (list 1499 1269) (list 1270) (list 1271) (list 1272) (list 2383 1273) (list 1274) (list 1275) (list 1683 1276) (list 3694 1277) (list 1769 1278) (list 4161 1989 1279) (list 1280) (list 1281) (list 1282) (list 1283) (list 3541 1284) (list 1285) (list 3602 1415 1286) (list 2030 1287) (list 1288) (list 1289) (list 1290) (list 1291) (list 1292) (list 1293) (list 1294) (list 1295) (list 2856 1296) (list 1297) (list 1298) (list 1299) (list 1300) (list 1301) (list 2016 2000 1791 1474 1421 1302) (list 1303) (list 3639 3167 1840 1420 1304) (list 3241 1305) (list 1306) (list 1307) (list 3559 1308) (list 1943 1309) (list 1310) (list 1311) (list 1312) (list 1313) (list 1314) (list 1315) (list 3488 1316) (list 1317) (list 1318) (list 1319) (list 1320) (list 1321) (list 1322) (list 1323) (list 4105 2224 1324) (list 4260 1325) (list 1326) (list 3846 1327) (list 3547 2876 2546 2049 1328) (list 3295 3146 1821 1329) (list 3012 1330) (list 3438 1331) (list 1332) (list 1333) (list 1334) (list 1335) (list 1650 1336) (list 3746 1337) (list 1869 1338) (list 1339) (list 1340) (list 3333 1341) (list 1342) (list 1343) (list 1344) (list 1345) (list 1346) (list 1347) (list 1348) (list 1349) (list 3931 2419 2023 1350) (list 3543 1351) (list 2426 1352) (list 4221 2561 1353) (list 2711 1354) (list 1355) (list 1356) (list 1357) (list 1358) (list 1359) (list 1360) (list 1361) (list 1362) (list 1363) (list 1809 1364) (list 1365) (list 1366) (list 1367) (list 1368) (list 3610 1369) (list 3528 1370) (list 1371) (list 1372) (list 1629 1373) (list 1952 1374) (list 1375) (list 1376) (list 1377) (list 3055 1378) (list 1379) (list 1380) (list 1381) (list 1382) (list 1383) (list 1384) (list 3851 3306 2684 1411 1385) (list 2105 1386) (list 1387) (list 1388) (list 1389) (list 3513 1390) (list 1391) (list 1392) (list 1393) (list 1394) (list 1395) (list 1396) (list 1397) (list 1398) (list 1399) (list 3159 2078 1812 1400) (list 2207 2106 1535 1401) (list 2198 1918 1402) (list 2114 1700 1403) (list 3956 1404) (list 1405) (list 1406) (list 1407) (list 2495 1408) (list 1409) (list 1410) (list 3851 1411) (list 1412) (list 4198 2335 1674 1413) (list 1414) (list 1415) (list 3339 3170 2948 2776 1416) (list 3342 2910 1579 1417) (list 1418) (list 2768 1419) (list 1420) (list 1791 1421) (list 1422) (list 1423) (list 1424) (list 3773 3120 1425) (list 1426) (list 1427) (list 1428) (list 2747 2117 1429) (list 4186 2232 1430) (list 1431) (list 1432) (list 1433) (list 1434) (list 1435) (list 1436) (list 1437) (list 1438) (list 1439) (list 1440) (list 1441) (list 2465 1442) (list 1443) (list 3276 2466 2452 2032 1448 1444) (list 3054 1662 1445) (list 1446) (list 1447) (list 1448) (list 2892 1449) (list 1450) (list 1451) (list 1452) (list 1453) (list 3301 1454) (list 1455) (list 1456) (list 1457) (list 1458) (list 1459) (list 3655 1460) (list 1461) (list 3136 2962 1643 1462) (list 1615 1463) (list 1464) (list 1465) (list 1935 1466) (list 1467) (list 1468) (list 1469) (list 1470) (list 1471) (list 1472) (list 1473) (list 1474) (list 1475) (list 1476) (list 1477) (list 3831 1963 1478) (list 1479) (list 1747 1480) (list 1481) (list 1482) (list 1483) (list 1484) (list 2738 1485) (list 3901 1486) (list 1487) (list 1488) (list 1489) (list 1490) (list 1491) (list 1749 1492) (list 3561 3491 1493) (list 1494) (list 3119 2242 1495) (list 1496) (list 1497) (list 1498) (list 1499) (list 1500) (list 1501) (list 1502) (list 1503) (list 1504) (list 1505) (list 1506) (list 1507) (list 1508) (list 1509) (list 1510) (list 1511) (list 3992 3584 1512) (list 3860 3273 1513) (list 4156 1514) (list 1515) (list 3819 1516) (list 1517) (list 1518) (list 1519) (list 1632 1520) (list 1521) (list 1522) (list 1523) (list 1524) (list 1525) (list 3807 3546 3274 2058 1526) (list 3061 1527) (list 1528) (list 1529) (list 1530) (list 1531) (list 2526 1532) (list 1533) (list 1534) (list 1535) (list 1775 1536) (list 3626 1537) (list 1538) (list 1539) (list 1540) (list 3452 2179 1541) (list 3928 2956 2262 1542) (list 1543) (list 2730 1544) (list 1545) (list 2574 1546) (list 4268 3669 1547) (list 1900 1548) (list 1549) (list 3766 3702 1550) (list 1551) (list 1552) (list 3601 3327 1553) (list 1554) (list 1555) (list 1556) (list 3836 1557) (list 1558) (list 1559) (list 3291 2607 1560) (list 1561) (list 3191 1562) (list 1563) (list 1564) (list 1565) (list 1566) (list 1567) (list 2894 2473 2119 1568) (list 1569) (list 1570) (list 1571) (list 1572) (list 1573) (list 3855 2831 1574) (list 4225 4179 3186 3077 1575) (list 1576) (list 1577) (list 1578) (list 1579) (list 1580) (list 1581) (list 1582) (list 3699 1583) (list 1584) (list 1585) (list 1586) (list 1945 1587) (list 2238 1783 1588) (list 1589) (list 1590) (list 1591) (list 2577 1980 1592) (list 1593) (list 1594) (list 1685 1595) (list 1596) (list 1597) (list 1598) (list 1599) (list 1600) (list 1601) (list 1602) (list 1603) (list 1604) (list 1605) (list 1606) (list 1607) (list 1927 1608) (list 1609) (list 1610) (list 1611) (list 1612) (list 1613) (list 1614) (list 1615) (list 1616) (list 1617) (list 1618) (list 1619) (list 1620) (list 1621) (list 1622) (list 2520 1874 1623) (list 1624) (list 1625) (list 1626) (list 2486 1627) (list 1628) (list 1629) (list 1630) (list 1631) (list 1632) (list 2398 1637 1633) (list 1634) (list 1635) (list 1636) (list 1637) (list 1638) (list 1639) (list 3670 1985 1640) (list 1641) (list 1642) (list 1643) (list 1644) (list 1645) (list 1646) (list 1671 1647) (list 4062 1648) (list 1755 1649) (list 1867 1650) (list 1651) (list 1652) (list 2851 1653) (list 1654) (list 1655) (list 3492 1965 1693 1656) (list 2698 1657) (list 1658) (list 1659) (list 1660) (list 3276 3028 1661) (list 1662) (list 1663) (list 1664) (list 1665) (list 1666) (list 1667) (list 1668) (list 1669) (list 1670) (list 1671) (list 1672) (list 3545 1673) (list 1674) (list 1675) (list 1676) (list 1677) (list 2138 1678) (list 4064 1679) (list 1680) (list 4204 1681) (list 3705 2965 1682) (list 1683) (list 1684) (list 1685) (list 1686) (list 1687) (list 1688) (list 1689) (list 1690) (list 3199 1691) (list 3303 2584 1692) (list 1693) (list 3502 2244 1694) (list 1695) (list 2330 1696) (list 3362 2984 1697) (list 1698) (list 1699) (list 2114 1700) (list 1701) (list 3586 3361 1702) (list 2969 1703) (list 1704) (list 1705) (list 1706) (list 1707) (list 3464 1708) (list 4214 4043 2435 1709) (list 1710) (list 1711) (list 1712) (list 1713) (list 1714) (list 1715) (list 1716) (list 1717) (list 1718) (list 1719) (list 1720) (list 2638 1721) (list 4081 1722) (list 1723) (list 1724) (list 3725 1725) (list 1726) (list 1727) (list 3984 1728) (list 3038 1729) (list 1730) (list 1731) (list 1732) (list 3797 2780 1733) (list 4232 1734) (list 1735) (list 3265 1736) (list 3213 1737) (list 1738) (list 1739) (list 3736 2490 1740) (list 3769 3518 2957 1845 1741) (list 2682 1742) (list 1743) (list 1744) (list 3197 1958 1745) (list 1746) (list 1747) (list 1748) (list 1749) (list 1750) (list 1751) (list 1752) (list 1753) (list 1754) (list 1755) (list 3879 1756) (list 2459 2205 1757) (list 1758) (list 1759) (list 1760) (list 1761) (list 1762) (list 1763) (list 1764) (list 2216 1765) (list 1766) (list 2919 1767) (list 1768) (list 1769) (list 1770) (list 1771) (list 2840 1772) (list 1773) (list 1774) (list 1775) (list 1776) (list 1777) (list 1778) (list 1779) (list 2664 2283 1780) (list 2225 1990 1781) (list 1782) (list 1783) (list 1784) (list 1785) (list 1786) (list 1787) (list 1788) (list 1789) (list 1790) (list 1791) (list 3839 2491 2263 1792) (list 1793) (list 1794) (list 2835 1795) (list 1796) (list 2922 1797) (list 1798) (list 1799) (list 1800) (list 1801) (list 1802) (list 1803) (list 3842 1804) (list 1805) (list 1806) (list 1807) (list 1808) (list 1809) (list 1810) (list 1811) (list 1812) (list 1813) (list 4112 3717 2446 1814) (list 1815) (list 2989 1816) (list 1817) (list 1818) (list 1819) (list 1820) (list 1821) (list 3852 1822) (list 1823) (list 1824) (list 2042 1825) (list 1826) (list 1827) (list 1828) (list 1829) (list 1830) (list 1831) (list 2359 1832) (list 1833) (list 1834) (list 1835) (list 2294 1836) (list 2344 1837) (list 1838) (list 1839) (list 1840) (list 2640 1841) (list 1842) (list 3325 1843) (list 3838 1844) (list 1845) (list 3179 1846) (list 1847) (list 1848) (list 2409 1849) (list 1850) (list 2531 1851) (list 1852) (list 1939 1853) (list 1854) (list 1855) (list 1856) (list 1857) (list 1858) (list 1859) (list 1860) (list 3001 1861) (list 3023 1862) (list 1863) (list 1864) (list 2124 1865) (list 1866) (list 1867) (list 1868) (list 1869) (list 1870) (list 1871) (list 1872) (list 1873) (list 1874) (list 1875) (list 1971 1876) (list 2918 1877) (list 1878) (list 1879) (list 1880) (list 1881) (list 1882) (list 1883) (list 2818 1884) (list 1885) (list 3959 1886) (list 2474 2177 1887) (list 1888) (list 4265 1889) (list 1890) (list 1891) (list 1892) (list 2557 1893) (list 3336 1894) (list 2172 1895) (list 1896) (list 1922 1897) (list 2210 1898) (list 4268 1899) (list 1900) (list 1901) (list 1902) (list 1903) (list 1904) (list 1905) (list 1906) (list 2911 1907) (list 1908) (list 1909) (list 2733 1910) (list 1911) (list 1912) (list 3288 1913) (list 3280 1914) (list 1915) (list 1916) (list 1957 1917) (list 1918) (list 1919) (list 1920) (list 1921) (list 1922) (list 1923) (list 3322 2943 1924) (list 1925) (list 4184 1926) (list 1927) (list 1928) (list 1929) (list 2357 1930) (list 4130 1931) (list 2636 1932) (list 1933) (list 1934) (list 1935) (list 3267 1936) (list 3579 1937) (list 1938) (list 1939) (list 1940) (list 1941) (list 1942) (list 1943) (list 2342 1944) (list 1945) (list 1946) (list 1947) (list 1948) (list 1949) (list 2643 1950) (list 1951) (list 1952) (list 4140 1953) (list 2659 1954) (list 4082 1955) (list 1956) (list 1957) (list 1958) (list 1959) (list 2310 1960) (list 1961) (list 1962) (list 1963) (list 1964) (list 1965) (list 1966) (list 3873 1967) (list 1968) (list 1969) (list 1970) (list 1971) (list 1972) (list 1973) (list 1974) (list 1975) (list 1976) (list 4216 1977) (list 1978) (list 2805 1979) (list 1980) (list 1981) (list 3165 1982) (list 1983) (list 1984) (list 1985) (list 1986) (list 3226 3069 3020 2863 2134 1987) (list 1988) (list 1989) (list 1990) (list 1991) (list 1992) (list 1993) (list 1994) (list 2670 2443 1995) (list 1996) (list 1997) (list 1998) (list 1999) (list 2000) (list 2001) (list 2002) (list 2041 2003) (list 3609 2004) (list 2005) (list 3804 2331 2203 2194 2101 2006) (list 2469 2007) (list 2008) (list 2009) (list 2010) (list 2011) (list 3353 2012) (list 2013) (list 2014) (list 2015) (list 2016) (list 3614 2378 2017) (list 2018) (list 4089 3434 2865 2019) (list 2020) (list 2021) (list 3247 2126 2022) (list 2023) (list 3036 2573 2024) (list 3297 2914 2629 2131 2025) (list 2026) (list 2027) (list 2028) (list 2029) (list 2030) (list 2031) (list 2891 2466 2032) (list 2033) (list 2248 2034) (list 2035) (list 3895 2036) (list 2333 2037) (list 2825 2038) (list 2039) (list 2040) (list 2041) (list 2042) (list 2299 2043) (list 2044) (list 2045) (list 2046) (list 2047)) (list (list 3538 2048) (list 2049) (list 2541 2050) (list 3263 2051) (list 2052) (list 2053) (list 2054) (list 3569 2089 2055) (list 2056) (list 2057) (list 2058) (list 2059) (list 2771 2603 2060) (list 2061) (list 2062) (list 2063) (list 2064) (list 2065) (list 2595 2066) (list 3151 2067) (list 2068) (list 2069) (list 2070) (list 2071) (list 3116 2072) (list 3141 2073) (list 2074) (list 2075) (list 2076) (list 2077) (list 2078) (list 2079) (list 2613 2080) (list 2081) (list 3076 2082) (list 3440 2083) (list 2084) (list 2085) (list 2086) (list 2087) (list 2088) (list 2089) (list 2090) (list 2091) (list 2092) (list 2093) (list 2094) (list 2095) (list 2096) (list 2097) (list 4076 2098) (list 2099) (list 2100) (list 2101) (list 3072 2937 2102) (list 2103) (list 2104) (list 2105) (list 2106) (list 2288 2107) (list 2108) (list 4024 2722 2109) (list 2110) (list 2111) (list 2112) (list 2113) (list 2114) (list 2115) (list 2116) (list 2117) (list 4052 3091 2118) (list 2119) (list 2120) (list 2121) (list 2122) (list 2123) (list 2124) (list 2125) (list 2126) (list 2251 2127) (list 3757 2128) (list 2129) (list 2130) (list 2131) (list 4033 3906 3565 2132) (list 2133) (list 2134) (list 2135) (list 2136) (list 2137) (list 2138) (list 2139) (list 2140) (list 2141) (list 2142) (list 2143) (list 2144) (list 2164 2145) (list 2146) (list 2147) (list 2148) (list 2149) (list 2150) (list 2151) (list 2152) (list 2153) (list 2154) (list 2642 2155) (list 2156) (list 2157) (list 2158) (list 2159) (list 2160) (list 3759 2649 2329 2161) (list 2162) (list 2163) (list 2164) (list 2165) (list 2166) (list 2167) (list 2168) (list 2169) (list 2170) (list 2171) (list 2172) (list 2173) (list 2174) (list 2175) (list 2176) (list 2177) (list 2178) (list 2179) (list 2180) (list 2181) (list 2182) (list 2183) (list 2184) (list 2185) (list 4167 2190 2186) (list 2187) (list 4150 2188) (list 2189) (list 2190) (list 2191) (list 2192) (list 2193) (list 3804 2936 2194) (list 2292 2195) (list 3739 2196) (list 3196 2197) (list 2198) (list 2199) (list 3367 2200) (list 2201) (list 2202) (list 2203) (list 2204) (list 2205) (list 2206) (list 2207) (list 2208) (list 2209) (list 2210) (list 2211) (list 2975 2212) (list 2213) (list 2214) (list 2215) (list 2216) (list 2217) (list 2218) (list 2219) (list 2220) (list 2221) (list 2222) (list 2223) (list 4259 2224) (list 2225) (list 2226) (list 3979 3788 2295 2227) (list 2228) (list 2229) (list 2230) (list 2231) (list 2232) (list 2233) (list 2234) (list 2235) (list 2236) (list 2237) (list 2238) (list 2239) (list 2240) (list 2241) (list 2242) (list 2243) (list 2244) (list 2245) (list 2246) (list 2247) (list 2248) (list 2249) (list 2250) (list 2251) (list 2252) (list 2253) (list 2254) (list 2255) (list 2256) (list 2257) (list 2718 2413 2258) (list 2259) (list 2260) (list 2261) (list 2262) (list 2263) (list 2264) (list 2265) (list 2289 2266) (list 2267) (list 2268) (list 2269) (list 2270) (list 4220 2271) (list 2272) (list 4092 3314 2764 2273) (list 2274) (list 2275) (list 2276) (list 2277) (list 2278) (list 2279) (list 2280) (list 2281) (list 2282) (list 2283) (list 2284) (list 2285) (list 2286) (list 2287) (list 2288) (list 2289) (list 2290) (list 2291) (list 2292) (list 2293) (list 2294) (list 2295) (list 2296) (list 3715 2297) (list 2298) (list 2299) (list 2300) (list 2301) (list 2302) (list 3753 3548 2303) (list 2304) (list 2305) (list 2306) (list 3232 2307) (list 2308) (list 2309) (list 2310) (list 2311) (list 2312) (list 2313) (list 3153 2314) (list 2315) (list 2316) (list 3149 2500 2317) (list 2318) (list 2319) (list 3143 2320) (list 2321) (list 2322) (list 2323) (list 2324) (list 2325) (list 3515 2326) (list 2327) (list 3243 2328) (list 2329) (list 2330) (list 2331) (list 2332) (list 2333) (list 2334) (list 2335) (list 2336) (list 2337) (list 2338) (list 2339) (list 2340) (list 2341) (list 2342) (list 2343) (list 2344) (list 2345) (list 2346) (list 2347) (list 2348) (list 2349) (list 2350) (list 2351) (list 2352) (list 2353) (list 2591 2364 2354) (list 2355) (list 2356) (list 2357) (list 2358) (list 2359) (list 2360) (list 2361) (list 2362) (list 2363) (list 2364) (list 2365) (list 2366) (list 2367) (list 2368) (list 4162 3221 2369) (list 2370) (list 3483 2371) (list 2372) (list 2373) (list 2374) (list 2375) (list 2376) (list 2377) (list 2378) (list 2379) (list 2380) (list 3010 2381) (list 4069 2382) (list 2383) (list 2384) (list 2385) (list 2386) (list 2387) (list 2388) (list 3445 2389) (list 2390) (list 2391) (list 2392) (list 2393) (list 2394) (list 2395) (list 2396) (list 2397) (list 2398) (list 2399) (list 2400) (list 2401) (list 2402) (list 3858 2403) (list 2404) (list 2405) (list 2406) (list 3216 2407) (list 2408) (list 2409) (list 2410) (list 3856 2411) (list 2412) (list 2413) (list 2414) (list 2415) (list 2416) (list 2417) (list 2418) (list 3931 2419) (list 2420) (list 2421) (list 2422) (list 2423) (list 2424) (list 3344 3114 2425) (list 2426) (list 2427) (list 3673 2428) (list 2429) (list 3949 2430) (list 2431) (list 2432) (list 2433) (list 2434) (list 2435) (list 2436) (list 3822 3667 2437) (list 3845 3630 2438) (list 2439) (list 2440) (list 2441) (list 2774 2442) (list 2443) (list 2444) (list 2445) (list 2446) (list 2447) (list 3897 2448) (list 2449) (list 2658 2450) (list 2451) (list 2452) (list 2453) (list 2454) (list 2455) (list 2456) (list 4212 3257 2457) (list 2458) (list 2459) (list 2460) (list 2461) (list 3678 2462) (list 2463) (list 2721 2464) (list 2465) (list 2466) (list 2467) (list 2468) (list 2469) (list 2470) (list 2471) (list 3223 2472) (list 2473) (list 4263 2474) (list 2475) (list 2476) (list 2477) (list 2478) (list 2479) (list 2480) (list 3017 2481) (list 2482) (list 2814 2483) (list 2484) (list 2485) (list 2486) (list 3212 2487) (list 2488) (list 2489) (list 2490) (list 2491) (list 2492) (list 2493) (list 2494) (list 2495) (list 2496) (list 2497) (list 2498) (list 2587 2499) (list 2500) (list 2501) (list 2502) (list 2503) (list 2504) (list 2505) (list 2506) (list 4030 2507) (list 2508) (list 2509) (list 2510) (list 2706 2511) (list 2512) (list 2513) (list 2514) (list 2515) (list 2516) (list 2517) (list 2518) (list 2519) (list 2520) (list 2521) (list 3597 2915 2522) (list 2523) (list 2524) (list 2525) (list 2526) (list 2527) (list 2528) (list 3902 2529) (list 3872 2724 2530) (list 2531) (list 2532) (list 2743 2609 2533) (list 2534) (list 2535) (list 2536) (list 2537) (list 2538) (list 2539) (list 2540) (list 2541) (list 2542) (list 2543) (list 2544) (list 2995 2545) (list 2546) (list 3185 2547) (list 2648 2548) (list 3244 2549) (list 2550) (list 2551) (list 2552) (list 2553) (list 2554) (list 2555) (list 4218 2556) (list 2557) (list 2558) (list 2559) (list 2560) (list 2561) (list 2562) (list 2563) (list 2564) (list 2565) (list 2566) (list 2567) (list 2568) (list 2569) (list 2570) (list 2571) (list 2572) (list 2573) (list 2574) (list 2575) (list 2576) (list 2577) (list 2578) (list 2579) (list 2580) (list 2581) (list 2582) (list 2583) (list 2584) (list 2585) (list 3681 2586) (list 2587) (list 3751 2588) (list 2589) (list 2590) (list 2591) (list 2592) (list 2593) (list 2594) (list 2595) (list 2596) (list 2597) (list 2598) (list 2599) (list 3002 2704 2600) (list 3774 3420 2601) (list 2602) (list 2603) (list 2793 2604) (list 2605) (list 2606) (list 2607) (list 4038 2608) (list 2609) (list 2610) (list 2611) (list 2612) (list 2613) (list 2614) (list 2615) (list 2616) (list 2617) (list 2618) (list 2619) (list 2620) (list 2621) (list 2622) (list 2623) (list 2624) (list 2625) (list 2626) (list 2627) (list 2628) (list 2629) (list 3830 3698 2630) (list 2631) (list 2632) (list 2633) (list 2634) (list 2635) (list 2636) (list 2637) (list 2638) (list 2639) (list 2640) (list 2641) (list 2642) (list 2643) (list 3377 2644) (list 2645) (list 2646) (list 3185 2647) (list 2648) (list 4057 2649) (list 3014 2650) (list 2651) (list 2652) (list 2786 2653) (list 2654) (list 2655) (list 2656) (list 2657) (list 2658) (list 2659) (list 2660) (list 3234 2661) (list 2662) (list 2663) (list 2664) (list 3776 2665) (list 2666) (list 2667) (list 2668) (list 2669) (list 2670) (list 2671) (list 2672) (list 2673) (list 2674) (list 2675) (list 2676) (list 2677) (list 2678) (list 3220 2679) (list 2680) (list 2681) (list 2682) (list 2683) (list 2684) (list 3558 2685) (list 2686) (list 2687) (list 2688) (list 3458 2689) (list 2690) (list 2691) (list 2692) (list 2693) (list 2694) (list 2695) (list 2696) (list 2697) (list 2698) (list 2699) (list 2700) (list 2701) (list 2702) (list 2703) (list 2704) (list 3253 2705) (list 2706) (list 2707) (list 2708) (list 2709) (list 2710) (list 2711) (list 3878 3744 2712) (list 2713) (list 2714) (list 3903 2715) (list 2716) (list 2717) (list 2718) (list 2719) (list 2720) (list 2721) (list 2722) (list 2723) (list 2724) (list 2725) (list 3320 2726) (list 2727) (list 2728) (list 2729) (list 2730) (list 2731) (list 2732) (list 2733) (list 2734) (list 3088 2735) (list 2736) (list 2737) (list 2738) (list 2739) (list 2740) (list 2741) (list 2742) (list 2743) (list 2744) (list 2745) (list 2746) (list 2747) (list 2748) (list 2749) (list 3989 3747 2750) (list 2751) (list 2752) (list 2753) (list 2754) (list 2755) (list 2756) (list 2757) (list 2758) (list 2759) (list 3997 2760) (list 2761) (list 2762) (list 2763) (list 3314 2764) (list 3340 2765) (list 3915 2766) (list 2767) (list 2768) (list 2769) (list 2770) (list 2792 2771) (list 2772) (list 2773) (list 2774) (list 2775) (list 2776) (list 2777) (list 3843 2778) (list 2779) (list 2780) (list 2781) (list 2782) (list 2783) (list 2784) (list 2785) (list 2786) (list 2787) (list 2788) (list 2789) (list 2790) (list 2791) (list 2792) (list 2793) (list 2794) (list 2795) (list 2796) (list 2954 2797) (list 2834 2798) (list 2799) (list 2800) (list 2801) (list 2802) (list 2803) (list 2804) (list 2805) (list 3347 2806) (list 2807) (list 2808) (list 3134 2809) (list 2810) (list 2811) (list 2812) (list 2813) (list 2814) (list 3356 2815) (list 2816) (list 2817) (list 2818) (list 2819) (list 2820) (list 2821) (list 2822) (list 2823) (list 2824) (list 2825) (list 2826) (list 2827) (list 2828) (list 2829) (list 2830) (list 2831) (list 2832) (list 3451 2833) (list 2834) (list 2835) (list 2836) (list 2837) (list 2838) (list 2839) (list 2840) (list 2841) (list 2842) (list 3674 3372 3323 2843) (list 2844) (list 2845) (list 3682 2846) (list 2847) (list 2848) (list 2849) (list 2850) (list 2851) (list 2852) (list 2853) (list 2854) (list 2855) (list 2856) (list 2857) (list 2858) (list 2859) (list 3049 2860) (list 2861) (list 3124 2862) (list 2863) (list 2864) (list 2865) (list 2866) (list 2867) (list 2868) (list 2869) (list 2870) (list 2871) (list 2872) (list 2873) (list 2874) (list 4072 2875) (list 2876) (list 2877) (list 2878) (list 2879) (list 2880) (list 2881) (list 3885 2882) (list 2883) (list 2884) (list 2885) (list 2886) (list 2887) (list 2888) (list 2889) (list 2890) (list 2891) (list 2892) (list 3030 2893) (list 2894) (list 2941 2895) (list 2896) (list 2897) (list 2898) (list 2899) (list 2900) (list 2901) (list 2902) (list 2903) (list 2904) (list 2905) (list 2906) (list 2907) (list 2908) (list 2909) (list 2910) (list 2911) (list 2912) (list 2913) (list 2914) (list 2915) (list 2916) (list 2917) (list 2918) (list 2919) (list 2920) (list 2921) (list 2922) (list 2923) (list 2924) (list 2925) (list 3890 2926) (list 2927) (list 2928) (list 2929) (list 2930) (list 2931) (list 2932) (list 2933) (list 2934) (list 2935) (list 2936) (list 3072 2937) (list 2938) (list 2939) (list 2940) (list 2941) (list 2942) (list 2943) (list 2944) (list 2945) (list 2946) (list 2947) (list 2948) (list 2949) (list 2950) (list 2951) (list 2952) (list 2953) (list 2954) (list 2955) (list 2956) (list 2957) (list 2958) (list 2959) (list 2960) (list 2961) (list 2962) (list 2963) (list 2964) (list 2965) (list 2966) (list 2967) (list 2968) (list 2969) (list 2970) (list 2971) (list 2972) (list 2973) (list 2974) (list 2975) (list 2976) (list 2977) (list 2978) (list 2979) (list 2980) (list 2981) (list 2982) (list 2983) (list 2984) (list 2985) (list 2986) (list 2987) (list 2988) (list 2989) (list 2990) (list 2991) (list 2992) (list 2993) (list 2994) (list 2995) (list 2996) (list 2997) (list 2998) (list 2999) (list 3000) (list 3001) (list 3002) (list 3826 3003) (list 3004) (list 3005) (list 3006) (list 3007) (list 3008) (list 3009) (list 3010) (list 3011) (list 3012) (list 3013) (list 3014) (list 3015) (list 3016) (list 3017) (list 3018) (list 3019) (list 3020) (list 3556 3021) (list 3022) (list 3023) (list 3024) (list 3025) (list 3026) (list 3027) (list 3028) (list 3029) (list 3030) (list 3031) (list 3032) (list 3033) (list 3034) (list 3035) (list 3036) (list 3037) (list 3038) (list 3039) (list 3040) (list 3041) (list 3042) (list 4127 3043) (list 3044) (list 3045) (list 3046) (list 3047) (list 3048) (list 3049) (list 3050) (list 3051) (list 3052) (list 3053) (list 3054) (list 3055) (list 3056) (list 3057) (list 3058) (list 3059) (list 3060) (list 3061) (list 3062) (list 3063) (list 3064) (list 3065) (list 3066) (list 3067) (list 3068) (list 3069) (list 3070) (list 3071) (list 3072) (list 3073) (list 3074) (list 3075) (list 3076) (list 3077) (list 3078) (list 3079) (list 3080) (list 3081) (list 3082) (list 3083) (list 3084) (list 3085) (list 3086) (list 3087) (list 3088) (list 3089) (list 3090) (list 3091) (list 3092) (list 3093) (list 3094) (list 3095) (list 3096) (list 3097) (list 3098) (list 3099) (list 3100) (list 3101) (list 4015 3102) (list 3103) (list 3891 3104) (list 3105) (list 3106) (list 3615 3107) (list 4170 3646 3108) (list 4078 3109) (list 3894 3110) (list 3111) (list 3112) (list 3113) (list 3114) (list 3115) (list 3116) (list 3117) (list 3118) (list 3119) (list 3120) (list 3121) (list 3122) (list 3123) (list 3124) (list 3125) (list 3126) (list 3127) (list 3128) (list 3129) (list 3130) (list 3131) (list 3132) (list 3133) (list 3134) (list 3206 3135) (list 3136) (list 3677 3137) (list 3138) (list 3139) (list 3140) (list 3141) (list 3142) (list 3143) (list 3144) (list 3710 3145) (list 3146) (list 3147) (list 3148) (list 3149) (list 3150) (list 3151) (list 3152) (list 3153) (list 3154) (list 3155) (list 3156) (list 3157) (list 3158) (list 3159) (list 3160) (list 3161) (list 3162) (list 3163) (list 3164) (list 3165) (list 3166) (list 3639 3167) (list 3168) (list 3169) (list 3170) (list 3171) (list 3172) (list 3462 3173) (list 3174) (list 3175) (list 4231 3176) (list 4120 3177) (list 3178) (list 3179) (list 3180) (list 3181) (list 3182) (list 3183) (list 3184) (list 3185) (list 3186) (list 3187) (list 3188) (list 3189) (list 3190) (list 3191) (list 3192) (list 3193) (list 3194) (list 3195) (list 3196) (list 3197) (list 3198) (list 3199) (list 3200) (list 3201) (list 3202) (list 3203) (list 3204) (list 3205) (list 3206) (list 3207) (list 3208) (list 3209) (list 3210) (list 3211) (list 3212) (list 3213) (list 3214) (list 3215) (list 3216) (list 3217) (list 3218) (list 3219) (list 3220) (list 3221) (list 3222) (list 3223) (list 3224) (list 3225) (list 3226) (list 3335 3227) (list 3971 3228) (list 3229) (list 3230) (list 3231) (list 3232) (list 3233) (list 3234) (list 3235) (list 3236) (list 3237) (list 3238) (list 3239) (list 3240) (list 3241) (list 3242) (list 3243) (list 3244) (list 3245) (list 3246) (list 3247) (list 3248) (list 3249) (list 3250) (list 3251) (list 3252) (list 3253) (list 3254) (list 3255) (list 3256) (list 3257) (list 3258) (list 3259) (list 3260) (list 3261) (list 3262) (list 3263) (list 3264) (list 3265) (list 3266) (list 3267) (list 3268) (list 3269) (list 3270) (list 3271) (list 3272) (list 3273) (list 3274) (list 3275) (list 3276) (list 3277) (list 3278) (list 3279) (list 3280) (list 3281) (list 3282) (list 3283) (list 3284) (list 3285) (list 3286) (list 3287) (list 3288) (list 3289) (list 3290) (list 3291) (list 3292) (list 3293) (list 3294) (list 3295) (list 3296) (list 3297) (list 3969 3298) (list 3299) (list 3709 3300) (list 3301) (list 3302) (list 3303) (list 3304) (list 3305) (list 3306) (list 3762 3307) (list 3308) (list 3309) (list 3310) (list 3332 3311) (list 3312) (list 3313) (list 3314) (list 3315) (list 3316) (list 3317) (list 3318) (list 4023 3319) (list 3320) (list 3321) (list 3322) (list 3372 3323) (list 3324) (list 3325) (list 3326) (list 3327) (list 3328) (list 3329) (list 3330) (list 3331) (list 3332) (list 3333) (list 3334) (list 3335) (list 3336) (list 3337) (list 3338) (list 3339) (list 3340) (list 3522 3341) (list 3342) (list 3343) (list 3344) (list 3345) (list 3346) (list 3347) (list 3348) (list 3349) (list 3456 3350) (list 3351) (list 3352) (list 3353) (list 3354) (list 3355) (list 3356) (list 3357) (list 3358) (list 3359) (list 3360) (list 3361) (list 3362) (list 3481 3363) (list 3364) (list 3365) (list 3366) (list 3367) (list 3368) (list 3369) (list 3370) (list 3371) (list 3372) (list 3373) (list 3374) (list 3375) (list 3376) (list 3377) (list 3378) (list 3379) (list 3380) (list 3381) (list 3382) (list 3415 3383) (list 3384) (list 3385) (list 3386) (list 3387) (list 3388) (list 3389) (list 3390) (list 3391) (list 3392) (list 3393) (list 3394) (list 3395) (list 3396) (list 3397) (list 3398) (list 3399) (list 3400) (list 3401) (list 3402) (list 3403) (list 3404) (list 3405) (list 3406) (list 3407) (list 3408) (list 3409) (list 3410) (list 3411) (list 3412) (list 3413) (list 3414) (list 3415) (list 3416) (list 3417) (list 3418) (list 3419) (list 3420) (list 3421) (list 3422) (list 3423) (list 3424) (list 3425) (list 3426) (list 3427) (list 3428) (list 4152 3429) (list 3430) (list 3431) (list 3432) (list 3433) (list 3434) (list 3435) (list 3436) (list 3437) (list 3438) (list 3439) (list 3440) (list 3441) (list 3442) (list 3443) (list 3444) (list 3445) (list 3446) (list 3447) (list 3448) (list 3449) (list 3450) (list 3451) (list 3452) (list 3453) (list 3454) (list 3455) (list 3456) (list 3457) (list 3458) (list 3459) (list 3460) (list 3461) (list 3462) (list 3463) (list 3464) (list 3465) (list 3466) (list 3467) (list 4258 3468) (list 3469) (list 3470) (list 3471) (list 3472) (list 3473) (list 4085 3588 3474) (list 3475) (list 4248 3476) (list 3477) (list 3478) (list 3479) (list 3480) (list 3481) (list 3482) (list 3483) (list 3484) (list 3485) (list 3486) (list 3487) (list 3488) (list 3489) (list 3490) (list 3491) (list 3492) (list 3493) (list 3494) (list 3495) (list 3496) (list 3497) (list 3498) (list 3499) (list 3500) (list 3501) (list 3502) (list 3503) (list 3504) (list 3505) (list 3506) (list 3507) (list 3508) (list 3509) (list 3510) (list 3511) (list 3512) (list 3513) (list 3514) (list 3515) (list 3516) (list 3517) (list 3518) (list 3519) (list 3520) (list 3521) (list 3522) (list 3523) (list 3524) (list 3525) (list 3526) (list 3527) (list 3528) (list 3529) (list 3530) (list 3531) (list 3532) (list 3533) (list 3534) (list 3535) (list 3536) (list 3537) (list 3538) (list 3539) (list 3540) (list 3541) (list 3542) (list 3543) (list 3544) (list 3545) (list 3546) (list 3547) (list 3548) (list 3592 3549) (list 3550) (list 3551) (list 3552) (list 3553) (list 3554) (list 3555) (list 3556) (list 3557) (list 3558) (list 3559) (list 3560) (list 3561) (list 3562) (list 3563) (list 3564) (list 3565) (list 3566) (list 3567) (list 3568) (list 3569) (list 3570) (list 3571) (list 3572) (list 3573) (list 3574) (list 3575) (list 3576) (list 3577) (list 3578) (list 3579) (list 3580) (list 3581) (list 3582) (list 3583) (list 3584) (list 3585) (list 3586) (list 3587) (list 3588) (list 3887 3589) (list 3590) (list 3753 3591) (list 3592) (list 3593) (list 3594) (list 3595) (list 3596) (list 3597) (list 3598) (list 3599) (list 3600) (list 3601) (list 3602) (list 3603) (list 3604) (list 3605) (list 3606) (list 3607) (list 3608) (list 3609) (list 3610) (list 3611) (list 3612) (list 3613) (list 3614) (list 3615) (list 3616) (list 3617) (list 3618) (list 3619) (list 3620) (list 3621) (list 3622) (list 3623) (list 3624) (list 3625) (list 3626) (list 3627) (list 3628) (list 3822 3667 3629) (list 3630) (list 3631) (list 3632) (list 3633) (list 3634) (list 3635) (list 3636) (list 3637) (list 3638) (list 3639) (list 4210 3640) (list 3641) (list 3642) (list 3643) (list 3644) (list 3645) (list 3646) (list 3647) (list 3648) (list 3649) (list 3650) (list 3651) (list 3652) (list 3653) (list 3654) (list 3655) (list 3656) (list 3657) (list 3658) (list 3659) (list 3660) (list 3661) (list 3662) (list 3663) (list 3664) (list 3665) (list 3764 3666) (list 3667) (list 3668) (list 3669) (list 3670) (list 4235 3671) (list 3672) (list 3673) (list 3674) (list 3675) (list 3676) (list 3677) (list 3678) (list 3679) (list 3680) (list 3681) (list 3682) (list 3683) (list 3684) (list 3685) (list 3686) (list 3687) (list 3688) (list 3689) (list 3690) (list 3691) (list 3987 3692) (list 3693) (list 3694) (list 3695) (list 3696) (list 3697) (list 3698) (list 3699) (list 3700) (list 3701) (list 3702) (list 3703) (list 3704) (list 3705) (list 3706) (list 3707) (list 3869 3708) (list 3709) (list 3710) (list 3711) (list 3712) (list 3713) (list 3714) (list 3715) (list 3716) (list 3717) (list 3718) (list 3719) (list 3720) (list 3721) (list 3722) (list 3723) (list 3724) (list 3725) (list 3726) (list 3727) (list 3728) (list 3729) (list 3730) (list 3935 3731) (list 3732) (list 4117 3733) (list 3734) (list 3735) (list 3736) (list 3737) (list 3738) (list 3739) (list 3740) (list 3741) (list 3742) (list 3743) (list 3744) (list 3745) (list 3746) (list 3747) (list 3748) (list 3749) (list 3750) (list 3751) (list 3752) (list 3753) (list 3754) (list 3755) (list 3756) (list 3757) (list 3758) (list 3759) (list 4058 3760) (list 3761) (list 3762) (list 3763) (list 3764) (list 4236 3765) (list 3766) (list 3767) (list 3768) (list 3769) (list 3770) (list 3771) (list 3772) (list 3773) (list 3774) (list 3775) (list 3776) (list 3777) (list 3778) (list 4045 3779) (list 3780) (list 3781) (list 3782) (list 3783) (list 3784) (list 3785) (list 3786) (list 3787) (list 3788) (list 3789) (list 3790) (list 3791) (list 3792) (list 3793) (list 3794) (list 3795) (list 3796) (list 3797) (list 3798) (list 3799) (list 3800) (list 3801) (list 3802) (list 3803) (list 3804) (list 3805) (list 3806) (list 3807) (list 3808) (list 3809) (list 3810) (list 3811) (list 3812) (list 3813) (list 3814) (list 3815) (list 3816) (list 3817) (list 3818) (list 3819) (list 3820) (list 3821) (list 3822) (list 3823) (list 3824) (list 3825) (list 3826) (list 3912 3827) (list 3828) (list 3829) (list 3830) (list 3831) (list 3832) (list 3833) (list 3834) (list 3835) (list 3836) (list 3837) (list 3838) (list 3839) (list 3840) (list 3841) (list 3842) (list 3843) (list 3844) (list 3845) (list 3846) (list 3847) (list 3848) (list 3849) (list 3850) (list 3851) (list 3852) (list 3853) (list 3854) (list 3855) (list 3856) (list 3857) (list 3858) (list 3859) (list 3860) (list 3861) (list 3862) (list 3863) (list 3864) (list 3865) (list 3866) (list 3867) (list 3868) (list 3869) (list 4134 3870) (list 3871) (list 3872) (list 3873) (list 3874) (list 3875) (list 3876) (list 4241 3877) (list 3878) (list 3879) (list 3880) (list 3881) (list 3882) (list 3883) (list 3884) (list 3885) (list 3886) (list 3887) (list 3888) (list 3889) (list 3890) (list 3891) (list 3892) (list 3893) (list 3894) (list 3895) (list 3896) (list 3897) (list 3898) (list 3899) (list 4094 3900) (list 3901) (list 3902) (list 3903) (list 3904) (list 3905) (list 3906) (list 3907) (list 3908) (list 3909) (list 3910) (list 3911) (list 3912) (list 3913) (list 3914) (list 3915) (list 3916) (list 3917) (list 3918) (list 3919) (list 3920) (list 3921) (list 4122 3922) (list 3923) (list 3924) (list 3925) (list 3926) (list 3927) (list 3928) (list 3929) (list 3930) (list 3931) (list 3932) (list 3933) (list 3934) (list 3935) (list 3936) (list 3937) (list 3938) (list 3939) (list 3940) (list 3941) (list 3942) (list 3943) (list 3944) (list 3945) (list 3946) (list 3947) (list 3948) (list 3949) (list 3950) (list 3951) (list 3952) (list 3953) (list 3954) (list 3955) (list 3956) (list 3957) (list 3958) (list 3959) (list 3960) (list 3961) (list 3962) (list 3963) (list 3964) (list 3965) (list 3966) (list 3967) (list 3968) (list 3969) (list 3970) (list 3971) (list 3972) (list 3973) (list 3974) (list 3975) (list 3976) (list 3977) (list 3978) (list 3979) (list 3980) (list 3981) (list 3982) (list 3983) (list 3984) (list 3985) (list 3986) (list 3987) (list 3988) (list 3989) (list 3990) (list 3991) (list 3992) (list 3993) (list 4065 3994) (list 3995) (list 3996) (list 3997) (list 3998) (list 3999) (list 4000) (list 4001) (list 4002) (list 4003) (list 4004) (list 4005) (list 4006) (list 4007) (list 4008) (list 4009) (list 4010) (list 4011) (list 4012) (list 4013) (list 4014) (list 4015) (list 4016) (list 4017) (list 4018) (list 4019) (list 4020) (list 4021) (list 4022) (list 4023) (list 4024) (list 4025) (list 4026) (list 4027) (list 4028) (list 4029) (list 4030) (list 4031) (list 4032) (list 4033) (list 4034) (list 4035) (list 4036) (list 4037) (list 4038) (list 4039) (list 4040) (list 4041) (list 4042) (list 4043) (list 4044) (list 4045) (list 4046) (list 4047) (list 4048) (list 4049) (list 4050) (list 4051) (list 4052) (list 4053) (list 4054) (list 4055) (list 4056) (list 4057) (list 4058) (list 4059) (list 4060) (list 4061) (list 4062) (list 4063) (list 4064) (list 4065) (list 4066) (list 4067) (list 4068) (list 4069) (list 4070) (list 4071) (list 4072) (list 4073) (list 4074) (list 4075) (list 4076) (list 4077) (list 4078) (list 4079) (list 4080) (list 4081) (list 4082) (list 4083) (list 4084) (list 4085) (list 4086) (list 4087) (list 4088) (list 4089) (list 4090) (list 4091) (list 4092) (list 4093) (list 4094)) (list (list 4095) (list 4096) (list 4097) (list 4098) (list 4099) (list 4100) (list 4101) (list 4102) (list 4103) (list 4104) (list 4105) (list 4106) (list 4107) (list 4108) (list 4109) (list 4110) (list 4111) (list 4112) (list 4113) (list 4114) (list 4115) (list 4116) (list 4117) (list 4118) (list 4119) (list 4120) (list 4121) (list 4122) (list 4123) (list 4124) (list 4125) (list 4126) (list 4127) (list 4128) (list 4129) (list 4130) (list 4131) (list 4132) (list 4133) (list 4134) (list 4135) (list 4136) (list 4137) (list 4138) (list 4139) (list 4140) (list 4141) (list 4142) (list 4143) (list 4144) (list 4145) (list 4146) (list 4147) (list 4148) (list 4149) (list 4150) (list 4151) (list 4152) (list 4153) (list 4154) (list 4155) (list 4156) (list 4157) (list 4158) (list 4159) (list 4160) (list 4161) (list 4162) (list 4163) (list 4164) (list 4165) (list 4166) (list 4167) (list 4168) (list 4169) (list 4170) (list 4171) (list 4172) (list 4173) (list 4174) (list 4175) (list 4176) (list 4177) (list 4178) (list 4179) (list 4180) (list 4181) (list 4182) (list 4183) (list 4184) (list 4185) (list 4186) (list 4187) (list 4188) (list 4189) (list 4190) (list 4191) (list 4192) (list 4193) (list 4194) (list 4195) (list 4196) (list 4197) (list 4198) (list 4199) (list 4200) (list 4201) (list 4202) (list 4203) (list 4204) (list 4205) (list 4247 4206) (list 4207) (list 4208) (list 4209) (list 4210) (list 4211) (list 4212) (list 4213) (list 4214) (list 4215) (list 4216) (list 4217) (list 4218) (list 4219) (list 4220) (list 4221) (list 4222) (list 4223) (list 4224) (list 4225) (list 4226) (list 4227) (list 4228) (list 4229) (list 4230) (list 4231) (list 4232) (list 4233) (list 4234) (list 4235) (list 4236) (list 4237) (list 4238) (list 4239) (list 4240) (list 4241) (list 4242) (list 4243) (list 4244) (list 4245) (list 4246) (list 4247) (list 4248) (list 4249) (list 4250) (list 4251) (list 4252) (list 4253) (list 4254) (list 4255) (list 4256) (list 4257) (list 4258) (list 4259) (list 4260) (list 4261) (list 4262) (list 4263) (list 4264) (list 4265) (list 4266) (list 4267) (list 4268) (list 4269) (list 4270) (list 4271) (list 4272) (list 4273) (list 4274) (list 4275))) do (sethash hashtable key val)) hashtable) :hashsuppl (let ((hashtable (make-hash-table))) (loop for key in (append (listlist 2047 2048 2049 2050 2051 2052 2053 2054 2055 2056 2057 2058 2059 2060 2061 2062 2063 2064 2065 2066 2067 2068 2069 2070 2071 2072 2073 2074 2075 2076 2077 2078 2079 2080 2081 2082 2083 2084 2085 2086 2087 2088 2089 2090 2091 2092 2093 2094 2095 2096 2097 2098 2099 2100 2101 2102 2103 2104 2105 2106 2107 2108 2109 2110 2111 2112 2113 2114 2115 2116 2117 2118 2119 2120 2121 2122 2123 2124 2125 2126 2127 2128 2129 2130 2131 2132 2133 2134 2135 2136 2137 2138 2139 2140 2141 2142 2143 2144 2145 2146 2147 2148 2149 2150 2151 2152 2153 2154 2155 2156 2157 2158 2159 2160 2161 2162 2163 2164 2165 2166 2167 2168 2169 2170 2171 2172 2173 2174 2175 2176 2177 2178 2179 2180 2181 2182 2183 2184 2185 2186 2187 2188 2189 2190 2191 2192 2193 2194 2195 2196 2197 2198 2199 2200 2201 2202 2203 2204 2205 2206 2207 2208 2209 2210 2211 2212 2213 2214 2215 2216 2217 2218 2219 2220 2221 2222 2223 2224 2225 2226 2227 2228 2229 2230 2231 2232 2233 2234 2235 2236 2237 2238 2239 2240 2241 2242 2243 2244 2245 2246 2247 2248 2249 2250 2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 2301 2302 2303 2304 2305 2306 2307 2308 2309 2310 2311 2312 2313 2314 2315 2316 2317 2318 2319 2320 2321 2322 2323 2324 2325 2326 2327 2328 2329 2330 2331 2332 2333 2334 2335 2336 2337 2338 2339 2340 2341 2342 2343 2344 2345 2346 2347 2348 2349 2350 2351 2352 2353 2354 2355 2356 2357 2358 2359 2360 2361 2362 2363 2364 2365 2366 2367 2368 2369 2370 2371 2372 2373 2374 2375 2376 2377 2378 2379 2380 2381 2382 2383 2384 2385 2386 2387 2388 2389 2390 2391 2392 2393 2394 2395 2396 2397 2398 2399 2400 2401 2402 2403 2404 2405 2406 2407 2408 2409 2410 2411 2412 2413 2414 2415 2416 2417 2418 2419 2420 2421 2422 2423 2424 2425 2426 2427 2428 2429 2430 2431 2432 2433 2434 2435 2436 2437 2438 2439 2440 2441 2442 2443 2444 2445 2446 2447 2448 2449 2450 2451 2452 2453 2454 2455 2456 2457 2458 2459 2460 2461 2462 2463 2464 2465 2466 2467 2468 2469 2470 2471 2472 2473 2474 2475 2476 2477 2478 2479 2480 2481 2482 2483 2484 2485 2486 2487 2488 2489 2490 2491 2492 2493 2494 2495 2496 2497 2498 2499 2500 2501 2502 2503 2504 2505 2506 2507 2508 2509 2510 2511 2512 2513 2514 2515 2516 2517 2518 2519 2520 2521 2522 2523 2524 2525 2526 2527 2528 2529 2530 2531 2532 2533 2534 2535 2536 2537 2538 2539 2540 2541 2542 2543 2544 2545 2546 2547 2548 2549 2550 2551 2552 2553 2554 2555 2556 2557 2558 2559 2560 2561 2562 2563 2564 2565 2566 2567 2568 2569 2570 2571 2572 2573 2574 2575 2576 2577 2578 2579 2580 2581 2582 2583 2584 2585 2586 2587 2588 2589 2590 2591 2592 2593 2594 2595 2596 2597 2598 2599 2600 2601 2602 2603 2604 2605 2606 2607 2608 2609 2610 2611 2612 2613 2614 2615 2616 2617 2618 2619 2620 2621 2622 2623 2624 2625 2626 2627 2628 2629 2630 2631 2632 2633 2634 2635 2636 2637 2638 2639 2640 2641 2642 2643 2644 2645 2646 2647 2648 2649 2650 2651 2652 2653 2654 2655 2656 2657 2658 2659 2660 2661 2662 2663 2664 2665 2666 2667 2668 2669 2670 2671 2672 2673 2674 2675 2676 2677 2678 2679 2680 2681 2682 2683 2684 2685 2686 2687 2688 2689 2690 2691 2692 2693 2694 2695 2696 2697 2698 2699 2700 2701 2702 2703 2704 2705 2706 2707 2708 2709 2710 2711 2712 2713 2714 2715 2716 2717 2718 2719 2720 2721 2722 2723 2724 2725 2726 2727 2728 2729 2730 2731 2732 2733 2734 2735 2736 2737 2738 2739 2740 2741 2742 2743 2744 2745 2746 2747 2748 2749 2750 2751 2752 2753 2754 2755 2756 2757 2758 2759 2760 2761 2762 2763 2764 2765 2766 2767 2768 2769 2770 2771 2772 2773 2774 2775 2776 2777 2778 2779 2780 2781 2782 2783 2784 2785 2786 2787 2788 2789 2790 2791 2792 2793 2794 2795 2796 2797 2798 2799 2800 2801 2802 2803 2804 2805 2806 2807 2808 2809 2810 2811 2812 2813 2814 2815 2816 2817 2818 2819 2820 2821 2822 2823 2824 2825 2826 2827 2828 2829 2830 2831 2832 2833 2834 2835 2836 2837 2838 2839 2840 2841 2842 2843 2844 2845 2846 2847 2848 2849 2850 2851 2852 2853 2854 2855 2856 2857 2858 2859 2860 2861 2862 2863 2864 2865 2866 2867 2868 2869 2870 2871 2872 2873 2874 2875 2876 2877 2878 2879 2880 2881 2882 2883 2884 2885 2886 2887 2888 2889 2890 2891 2892 2893 2894 2895 2896 2897 2898 2899 2900 2901 2902 2903 2904 2905 2906 2907 2908 2909 2910 2911 2912 2913 2914 2915 2916 2917 2918 2919 2920 2921 2922 2923 2924 2925 2926 2927 2928 2929 2930 2931 2932 2933 2934 2935 2936 2937 2938 2939 2940 2941 2942 2943 2944 2945 2946 2947 2948 2949 2950 2951 2952 2953 2954 2955 2956 2957 2958 2959 2960 2961 2962 2963 2964 2965 2966 2967 2968 2969 2970 2971 2972 2973 2974 2975 2976 2977 2978 2979 2980 2981 2982 2983 2984 2985 2986 2987 2988 2989 2990 2991 2992 2993 2994 2995 2996 2997 2998 2999 3000 3001 3002 3003 3004 3005 3006 3007 3008 3009 3010 3011 3012 3013 3014 3015 3016 3017 3018 3019 3020 3021 3022 3023 3024 3025 3026 3027 3028 3029 3030 3031 3032 3033 3034 3035 3036 3037 3038 3039 3040 3041 3042 3043 3044 3045 3046 3047 3048 3049 3050 3051 3052 3053 3054 3055 3056 3057 3058 3059 3060 3061 3062 3063 3064 3065 3066 3067 3068 3069 3070 3071 3072 3073 3074 3075 3076 3077 3078 3079 3080 3081 3082 3083 3084 3085 3086 3087 3088 3089 3090 3091 3092 3093 3094 3095 3096 3097 3098 3099 3100 3101 3102 3103 3104 3105 3106 3107 3108 3109 3110 3111 3112 3113 3114 3115 3116 3117 3118 3119 3120 3121 3122 3123 3124 3125 3126 3127 3128 3129 3130 3131 3132 3133 3134 3135 3136 3137 3138 3139 3140 3141 3142 3143 3144 3145 3146 3147 3148 3149 3150 3151 3152 3153 3154 3155 3156 3157 3158 3159 3160 3161 3162 3163 3164 3165 3166 3167 3168 3169 3170 3171 3172 3173 3174 3175 3176 3177 3178 3179 3180 3181 3182 3183 3184 3185 3186 3187 3188 3189 3190 3191 3192 3193 3194 3195 3196 3197 3198 3199 3200 3201 3202 3203 3204 3205 3206 3207 3208 3209 3210 3211 3212 3213 3214 3215 3216 3217 3218 3219 3220 3221 3222 3223 3224 3225 3226 3227 3228 3229 3230 3231 3232 3233 3234 3235 3236 3237 3238 3239 3240 3241 3242 3243 3244 3245 3246 3247 3248 3249 3250 3251 3252 3253 3254 3255 3256 3257 3258 3259 3260 3261 3262 3263 3264 3265 3266 3267 3268 3269 3270 3271 3272 3273 3274 3275 3276 3277 3278 3279 3280 3281 3282 3283 3284 3285 3286 3287 3288 3289 3290 3291 3292 3293 3294 3295 3296 3297 3298 3299 3300 3301 3302 3303 3304 3305 3306 3307 3308 3309 3310 3311 3312 3313 3314 3315 3316 3317 3318 3319 3320 3321 3322 3323 3324 3325 3326 3327 3328 3329 3330 3331 3332 3333 3334 3335 3336 3337 3338 3339 3340 3341 3342 3343 3344 3345 3346 3347 3348 3349 3350 3351 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 3383 3384 3385 3386 3387 3388 3389 3390 3391 3392 3393 3394 3395 3396 3397 3398 3399 3400 3401 3402 3403 3404 3405 3406 3407 3408 3409 3410 3411 3412 3413 3414 3415 3416 3417 3418 3419 3420 3421 3422 3423 3424 3425 3426 3427 3428 3429 3430 3431 3432 3433 3434 3435 3436 3437 3438 3439 3440 3441 3442 3443 3444 3445 3446 3447 3448 3449 3450 3451 3452 3453 3454 3455 3456 3457 3458 3459 3460 3461 3462 3463 3464 3465 3466 3467 3468 3469 3470 3471 3472 3473 3474 3475 3476 3477 3478 3479 3480 3481 3482 3483 3484 3485 3486 3487 3488 3489 3490 3491 3492 3493 3494 3495 3496 3497 3498 3499 3500 3501 3502 3503 3504 3505 3506 3507 3508 3509 3510 3511 3512 3513 3514 3515 3516 3517 3518 3519 3520 3521 3522 3523 3524 3525 3526 3527 3528 3529 3530 3531 3532 3533 3534 3535 3536 3537 3538 3539 3540 3541 3542 3543 3544 3545 3546 3547 3548 3549 3550 3551 3552 3553 3554 3555 3556 3557 3558 3559 3560 3561 3562 3563 3564 3565 3566 3567 3568 3569 3570 3571 3572 3573 3574 3575 3576 3577 3578 3579 3580 3581 3582 3583 3584 3585 3586 3587 3588 3589 3590 3591 3592 3593 3594 3595 3596 3597 3598 3599 3600 3601 3602 3603 3604 3605 3606 3607 3608 3609 3610 3611 3612 3613 3614 3615 3616 3617 3618 3619 3620 3621 3622 3623 3624 3625 3626 3627 3628 3629 3630 3631 3632 3633 3634 3635 3636 3637 3638 3639 3640 3641 3642 3643 3644 3645 3646 3647 3648 3649 3650 3651 3652 3653 3654 3655 3656 3657 3658 3659 3660 3661 3662 3663 3664 3665 3666 3667 3668 3669 3670 3671 3672 3673 3674 3675 3676 3677 3678 3679 3680 3681 3682 3683 3684 3685 3686 3687 3688 3689 3690 3691 3692 3693 3694 3695 3696 3697 3698 3699 3700 3701 3702 3703 3704 3705 3706 3707 3708 3709 3710 3711 3712 3713 3714 3715 3716 3717 3718 3719 3720 3721 3722 3723 3724 3725 3726 3727 3728 3729 3730 3731 3732 3733 3734 3735 3736 3737 3738 3739 3740 3741 3742 3743 3744 3745 3746 3747 3748 3749 3750 3751 3752 3753 3754 3755 3756 3757 3758 3759 3760 3761 3762 3763 3764 3765 3766 3767 3768 3769 3770 3771 3772 3773 3774 3775 3776 3777 3778 3779 3780 3781 3782 3783 3784 3785 3786 3787 3788 3789 3790 3791 3792 3793 3794 3795 3796 3797 3798 3799 3800 3801 3802 3803 3804 3805 3806 3807 3808 3809 3810 3811 3812 3813 3814 3815 3816 3817 3818 3819 3820 3821 3822 3823 3824 3825 3826 3827 3828 3829 3830 3831 3832 3833 3834 3835 3836 3837 3838 3839 3840 3841 3842 3843 3844 3845 3846 3847 3848 3849 3850 3851 3852 3853 3854 3855 3856 3857 3858 3859 3860 3861 3862 3863 3864 3865 3866 3867 3868 3869 3870 3871 3872 3873 3874 3875 3876 3877 3878 3879 3880 3881 3882 3883 3884 3885 3886 3887 3888 3889 3890 3891 3892 3893 3894 3895 3896 3897 3898 3899 3900 3901 3902 3903 3904 3905 3906 3907 3908 3909 3910 3911 3912 3913 3914 3915 3916 3917 3918 3919 3920 3921 3922 3923 3924 3925 3926 3927 3928 3929 3930 3931 3932 3933 3934 3935 3936 3937 3938 3939 3940 3941 3942 3943 3944 3945 3946 3947 3948 3949 3950 3951 3952 3953 3954 3955 3956 3957 3958 3959 3960 3961 3962 3963 3964 3965 3966 3967 3968 3969 3970 3971 3972 3973 3974 3975 3976 3977 3978 3979 3980 3981 3982 3983 3984 3985 3986 3987 3988 3989 3990 3991 3992 3993 3994 3995 3996 3997 3998 3999 4000 4001 4002 4003 4004 4005 4006 4007 4008 4009 4010 4011 4012 4013 4014 4015 4016 4017 4018 4019 4020 4021 4022 4023 4024 4025 4026 4027 4028 4029 4030 4031 4032 4033 4034 4035 4036 4037 4038 4039 4040 4041 4042 4043 4044 4045 4046 4047 4048 4049 4050 4051 4052 4053 4054 4055 4056 4057 4058 4059 4060 4061 4062 4063 4064 4065 4066 4067 4068 4069 4070 4071 4072 4073 4074 4075 4076 4077 4078 4079 4080 4081 4082 4083 4084 4085 4086 4087 4088 4089 4090 4091 4092 4093) (list 4094 4095 4096 4097 4098 4099 4100 4101 4102 4103 4104 4105 4106 4107 4108 4109 4110 4111 4112 4113 4114 4115 4116 4117 4118 4119 4120 4121 4122 4123 4124 4125 4126 4127 4128 4129 4130 4131 4132 4133 4134 4135 4136 4137 4138 4139 4140 4141 4142 4143 4144 4145 4146 4147 4148 4149 4150 4151 4152 4153 4154 4155 4156 4157 4158 4159 4160 4161 4162 4163 4164 4165 4166 4167 4168 4169 4170 4171 4172 4173 4174 4175 4176 4177 4178 4179 4180 4181 4182 4183 4184 4185 4186 4187 4188 4189 4190 4191 4192 4193 4194 4195 4196 4197 4198 4199 4200 4201 4202 4203 4204 4205 4206 4207 4208 4209 4210 4211 4212 4213 4214 4215 4216 4217 4218 4219 4220 4221 4222 4223 4224 4225 4226 4227 4228 4229 4230 4231 4232 4233 4234 4235 4236 4237 4238 4239 4240 4241 4242 4243 4244 4245 4246 4247 4248 4249 4250 4251 4252 4253 4254 4255 4256 4257 4258 4259 4260 4261 4262 4263 4264 4265 4266 4267 4268 4269 4270 4271 4272 4273 4274 4275)) for val in (append (list -1 0 0 0 0 0 0 0 0 4 0 3 4 3 0 0 14 4 6 14 7 6 3 8 9 0 3 23 6 4 4 30 0 6 6 22 3 36 14 32 14 17 2 4 30 18 29 30 42 10 8 25 26 4 18 46 13 14 39 40 2 8 3 6 8 32 2 43 44 31 31 10 4 18 64 9 18 32 3 7 32 10 72 30 71 5 3 36 37 10 6 77 40 15 2 49 11 2 61 65 8 7 4 14 5 6 77 78 36 38 39 40 39 100 2 49 2 43 32 78 23 8 9 76 1 5 4 13 36 97 32 4 18 22 32 131 8 9 76 124 14 39 33 25 7 25 4 103 6 5 6 29 18 46 47 32 78 120 65 15 32 78 4 1 140 141 7 14 17 25 26 27 28 22 25 14 104 10 14 148 19 148 64 75 42 15 6 29 136 137 103 17 169 8 62 89 90 2 3 5 6 77 66 2 43 44 69 163 4 103 1 8 9 76 77 78 162 10 32 40 14 39 1 32 131 32 81 11 23 121 65 131 5 8 28 29 188 121 114 130 32 131 30 48 3 89 11 36 4 7 102 15 8 65 5 14 104 233 5 6 77 78 89 116 130 40 41 30 48 6 143 25 32 33 34 35 89 246 14 39 40 8 114 269 10 11 228 114 61 9 25 26 53 54 197 198 97 98 28 29 56 4 5 233 258 259 22 4 136 14 39 131 251 252 253 33 22 307 18 19 181 29 249 1 10 90 284 285 12 249 80 40 104 86 23 121 230 25 193 10 50 9 249 250 10 7 102 251 25 26 89 85 6 64 101 3 23 24 10 116 3 79 8 28 29 32 131 225 78 199 2 49 96 79 323 208 18 19 181 77 78 14 220 221 240 81 227 174 26 350 246 97 49 96 387 10 50 114 283 22 276 277 387 388 389 390 134 66 49 85 86 4 30 31 48 130 240 78 162 13 63 7 80 240 417 97 203 130 131 132 46 42 61 99 315 149 7 15 252 15 252 339 11 12 42 25 15 10 116 445 26 350 218 131 242 243 432 298 197 43 44 136 28 77 100 114 5 86 411 103 60 14 3 23 24 13 79 102 344 90 19 17 267 103 472 4 103 220 148 124 324 218 78 120 24 136 462 29 25 6 149 150 19 39 78 381 281 282 1 7 2 269 19 481 18 19 181 489 6 15 16 281 28 29 322 10 178 281 309 17 169 175 20 5 233 309 220 10 72 73 133 23 287 3 23 339 178 179 321 322 167 60 3 23 287 239 78 63 29 5 6 197 203 49 96 97 43 18 294 295 4 103 104 105 19 220 20 102 344 218 492 369 233 101 167 104 105 106 202 67 42 432 101 102 163 3 23 158 231 249 250 30 71 72 73 46 152 153 606 74 65 231 163 324 11 228 101 102 601 602 11 97 426 3 4 10 218 337 26 14 104 257 62 79 477 103 191 103 210 595 174 395 25 5 6 77 337 2 7 102 103 487 472 63 19 281 121 339 90 64 75 190 148 197 49 90 480 472 473 309 20 577 42 445 395 72 25 395 85 233 9 76 74 309 25 26 63 22 307 308 101 21 197 471 17 267 268 648 167 537 11 387 388 134 78 162 249 250 594 208 32 100 309 529 637 684 647 445 674 116 61 339 218 33 29 30 207 208 136 462 7 167 699 538 163 25 175 176 105 284 72 83 249 250 136 114 543 134 704 79 167 281 258 259 284 285 199 436 167 472 79 7 21 149 126 42 269 512 104 370 203 623 23 669 281 528 529 714 537 116 466 6 64 439 94 61 309 310 504 162 706 21 64 65 166 167 699 700 278 148 180 768 32 337 643 644 124 735 193 9 25 26 53 103 191 267 45 46 10 218 723 316 134 40 148 182 28 284 178 39 311 599 355 14 104 105 574 20 21 692 459 118 119 162 30 48 49 218 100 712 15 3 14 39 254 86 411 249 8 9 76 143 271 647 43 590 203 203 623 772 773 529 42 49 116 269 29 188 439 4 18 46 322 791 792 826 29 322 883 29 30 483 281 522 827 10 11 12 10 85 352 353 75 10 72 103 484 14 684 685 199 126 10 116 203 61 62 4 163 735 26 53 10 72 73 7 8 65 222 211 121 122 30 483 487 652 485 249 323 595 596 597 337 628 27 28 173 14 148 22 23 669 684 716 269 34 34 64 258 126 127 23 616 80 33 316 174 499 7 145 647 49 116 471 39 311 312 94 130 81 642 175 472 907 220 221 113 339 85 126 103 148 949 63 34 956 35 23 616 8 65 78 162 136 65 231 42 866 269 284 285 406 704 108 1 2 508 595 4 18 19 575 281 101 102 744 309 310 142 34 957 62 917 249 550 759 760 437 348 349 703 704 749 80 78 79 374 211 309 310 166 8 9 190 39 166 21 792 121 121 1059 122 184 866 867 508 324 72 73 294 61 592 963 131 599 510 511 284 90 326 327 278 279 113 258 259 19 655 9 76 46 882 858 309 529 10 218 453 612 2 508 1017 134 823 41 5 86 411 136 339 658 124 2 648 80 81 218 453 1006 471 974 504 789 163 613 1067 1068 605 103 470 43 136 690 102 672 43 163 595 596 597 598 242 31 251 447 11 12 13 14 148 143 26 350 390 278 220 684 685 53 13 134 240 66 203 1065 1066 1067 1068 861 1151 1152 1153 89 90 34 124 208 209 104 105 22 276 50 62 199 802 33 316 23 158 254 126 251 879 10 72 13 420 654 684 272 78 120 158 240 417 557 558 818 819 222 324 325 197 130 66 67 25 175 537 700 798 17 249 330 964 724 251 851 36 23 24 76 77 131 225 368 120 258 802 40 220 221 384 385 386 387 446 160 81 1116 1117 136 62 917 13 128 38 39 142 64 1031 63 994 19 503 311 242 71 116 973 694 18 19 20 355 356 158 81 227 97 392 393 12 163 223 224 612 613 345 167 585 257 535 529 251 1193 103 1054 504 557 284 285 63 654 181 379 1234 242 1143 160 161 381 39 113 65 337 628 53 1159 128 1257 1258 81 85 86 97 471 148 949 947 39 311 10 72 249 1075 1076 876 1128 191 1105 255 281 1023 1024 344 11 12 18 19 60 203 563 665 666 667 760 1037 879 30 45 46 498 26 686 64 1058 28 64 1031 23 28 19 181 517 1176 10 72 42 445 450 27 669 148 182 183 661 484 199 1 595 1018 103 191 163 509 510 511 64 114 648 21 77 92 112 166 1056 1057 683 1384 949 307 163 1285 78 174 395 11 1303 1301 642 647 864 13 89 345 346 5 6 29 152 609 75 932 71 620 228 287 288 289 495 237 1 208 376 74 1443 125 86 174 271 863 61 289 76 294 1070 298 34 197 445 450 53 163 595 1018 251 1193 1297 1298 1299 1300 1301 85 86 411 42 269 77 464 101 999 258 255 210 211 212 213 214 1234 1006 43 590 43 118 131 242 1268 620 247 248 30 483 715 175 39 311 13 174 395 90 22 307 10 72 73 605 431 244 97 130 131 132 133 97 445 450 451 351 86 89 90 659 1400 543 4 32 78 79 21 284 828 179 149 802 131 1006 269 149 150 151 163 164 20 577 744 690 584 39 311 136 1004 1001 1002 5 126 30 71 72 73 74 683 536 17 18 77 78 1416 643 86 411 163 211 212 213 34 29 818 178 104 126 127 420 77 33 724 1128 148 1150 175 17 18 46 47 742 743 13 420 1198 20 21 692 1461 1462 451 90 1174 1175 1112 49 96 756 582 535 774 62 1371 1372 29 431 1519 14 17 42 244 1632 39 311 103 148 663 1461 674 675 73 19 537 538 1335 250 601 31 414 43 103 778 50 397 288 1443 1444 728 1109 1110 659 660 903 904 73 1646 181 949 1412 30 483 778 90 480 481 637 20 1275 63 1594 78 425 566 590 591 114 43 1655 484 473 545 895 116 648 1402 792 339 658 91 1234 132 430 1227 16 20 8 9 932 1143 5 177 116 449 450 451 390 1014 211 62 134 33 435 150 77 78 425 508 518 77 78 1014 324 1067 1068 284 1 211 930 238 203 1008 1479 1234 1491 508 208 376 377 1647 1648 5 6 34 1264 1265 1266 1006 466 781 29 322 832 356 1277 66 408 665 659 1534 1535 544 24 1232 1233 81 90 1174 1587 30 483 104 105 739 285 1303 1420 218 166 355 4 249 330 1044 162 103 1054 384 417 381 537 538 539 605 1363 647 954 1399 65 40 112 311 1267 243 866 471 1328 34 956 957 75 76 77 78 162 42 269 197 459 460 45 294 295 89 246 1303 558 188 462 827 1740 735 647 954 512 655 65 254 233 258 233 632 195 246 228 669 871 267 32 40 537 538 1649 1336 1337 124 1112 1620 1621 1622 200 29 322 1092 65 1204 241 242 1142 25 146 30 13 14 39 40 824 825 1058 101 525 218 254 802 1546 1547 415 265 93 447 1145 387 146 249 1075 49 345 346 18 46 559 233 114 1401 355 89 452 1896 177 90 7 102 1607 14 39 66 445 450 1463 1464 1465 14 39 854 1852 234 463 1234 1308 45 1586 956 1264 181 517 211 28 1373 667 1014 125 233 1916 1744 204 5 86 411 1477 43 1655 892 339 442 756 1874 1875 30 45 46 1128 778 178 220 104 1591 912 895 218 453 1639 191 136 1004 1278 1780 143 395 675 734 15 879 32 78 557 1301 1078 1174 957 1058 657 72 10 345 346 249 250 32 240 417 1206 1301 50 1183 14 537 700 12 1349 149 86 87 248 163 1285 1286 136 1443 140 537 538 905 148 284 1078 2001 2002 1824 903 11 97 98 62) (list 97 1327 472 134 135 599 761 80 964 965 1525 3 4 136 137 138 77 240 33 124 1176 376 377 378 663 648 649 601 48 269 1399 958 259 1086 575 15 7 8 65 794 761 2054 81 345 346 347 977 95 409 352 353 1058 2004 2005 136 309 1384 1385 1400 288 289 163 613 895 1697 1698 1699 7 102 1428 126 1567 32 40 112 40 1864 700 2021 103 487 488 149 2024 14 17 1986 137 190 778 1677 1174 1175 1176 728 137 932 742 1075 445 643 644 22 947 948 321 152 124 125 5 255 220 652 473 474 932 2144 743 708 125 6 22 23 616 1894 72 905 191 815 1886 476 1540 889 322 330 331 281 439 851 852 281 2184 2185 4 136 1109 2005 83 461 745 1401 649 744 237 657 2005 1755 1756 64 1400 239 254 1897 1186 724 431 1762 1763 1764 188 309 529 1223 791 19 503 1323 1780 197 269 284 345 346 1428 1429 64 958 25 499 34 1587 431 43 590 1494 1655 1693 485 163 164 2033 700 2021 2126 148 379 380 557 654 1199 193 194 633 1540 1541 1791 66 61 121 230 231 136 309 60 130 556 108 109 60 61 62 63 64 826 463 1779 82 73 74 1400 2106 2265 657 2005 2194 45 1835 2226 955 957 1824 2042 90 197 693 537 779 720 298 124 1112 43 1959 6 124 490 614 278 1222 32 166 167 684 146 42 244 199 200 19 575 652 2160 1695 2005 905 2036 949 1412 249 858 114 239 131 242 1943 1835 1836 174 144 437 16 17 637 470 61 62 36 38 39 1929 269 1831 664 116 720 62 2353 1230 616 963 81 50 341 76 124 490 50 397 398 284 2016 341 184 1119 694 1272 124 490 642 981 148 489 518 19 1199 1200 40 41 42 244 1632 210 211 1048 472 89 351 370 445 647 954 1848 575 220 1156 2257 339 658 326 327 328 1349 77 646 272 337 499 19 1351 49 665 519 851 852 60 1130 251 1708 60 466 467 468 18 133 1014 1994 252 253 1813 220 60 471 472 473 1443 2 130 556 262 72 1755 1756 143 193 114 288 289 1441 2031 324 1067 2006 50 258 959 1567 1886 301 10 218 219 684 499 77 1234 25 175 281 1626 1014 208 376 1739 1791 219 112 1406 1407 889 890 891 191 2316 40 220 652 936 486 191 18 46 56 301 32 78 162 217 218 492 425 392 393 1622 86 199 370 466 467 1531 178 210 140 281 1850 100 9 190 191 192 193 194 2047 2048 2049 485 25 26 97 1327 220 652 907 20 577 601 602 178 179 182 1892 238 471 60 1352 915 592 437 160 66 67 10 116 360 4 18 2023 1545 1240 332 1591 765 43 1131 137 495 745 1691 44 483 2498 42 432 62 2353 248 32 240 2065 724 322 550 168 13 97 2058 2059 32 166 167 1559 113 2532 76 682 958 2079 197 1214 240 241 599 1075 1076 270 1151 79 80 1044 381 148 149 2024 411 5 6 77 202 1930 1931 451 1720 1839 1840 152 2154 1949 65 66 471 2546 2547 2160 62 917 32 166 167 220 2447 2448 2449 1953 518 29 152 77 1779 15 186 187 30 207 1994 16 15 348 499 29 30 71 218 81 895 1740 1741 1048 1384 379 380 108 37 134 166 1051 439 784 203 867 204 1655 1656 779 973 472 907 17 2599 301 2510 166 167 551 1352 1353 72 734 164 148 180 1199 2257 2461 2462 2463 2108 164 2529 1088 5 6 284 828 1543 7 510 1909 50 101 999 1483 1484 148 182 65 100 2532 495 690 1133 1428 436 510 3 36 89 90 91 254 1191 18 19 667 485 486 470 2271 2272 134 337 395 1418 97 2058 2059 18 133 2441 223 1415 381 60 508 1732 22 23 2649 2650 2651 2652 145 395 1418 2768 2769 2770 2603 33 316 36 79 355 833 17 1095 90 480 575 1978 105 574 768 105 1180 1181 452 453 2482 26 53 30 1883 144 355 79 80 331 824 2037 895 72 73 74 683 1573 652 760 2797 1794 30 32 66 408 1771 326 1078 29 30 483 148 321 322 250 601 1652 1143 1228 852 17 1295 977 648 510 508 140 17 1986 1253 2018 281 1088 932 933 470 552 4 103 484 97 1327 104 105 29 188 1109 546 547 489 509 525 90 197 459 1131 2031 1448 126 1567 5 802 1240 112 504 789 844 31 207 208 249 1075 471 974 1121 1416 1906 18 2023 2024 2521 200 1875 1876 1766 1794 1795 1796 1073 132 861 643 802 1240 824 321 188 51 146 136 1109 2193 2101 462 497 30 2894 177 1923 1174 1175 1 223 1415 120 158 1204 1205 108 2796 1540 1541 1740 2 49 665 197 1461 146 147 1681 21 792 1701 1702 1174 1175 125 802 1186 2211 56 476 374 939 1018 25 193 339 1696 896 406 823 112 1815 232 370 371 642 26 2544 392 895 896 228 1859 1860 2599 14 39 40 824 825 183 184 2380 1328 1329 950 2649 174 967 2480 92 41 1986 309 529 1861 742 743 672 432 1660 1448 2892 32 131 132 430 606 2023 150 1728 222 929 212 213 19 481 514 46 882 1075 2859 223 166 1051 1443 1444 1377 90 480 503 504 425 1526 499 124 1176 710 78 381 17 1986 1109 2193 2936 258 259 1086 2081 1574 169 446 879 1194 1195 73 605 47 71 50 2734 102 1428 2117 25 144 102 103 484 485 10 85 352 353 51 643 233 339 340 121 309 537 538 734 735 499 2424 181 2071 459 590 1494 1424 301 163 164 2861 18 133 541 439 447 448 875 512 768 2808 197 1461 193 51 499 197 2072 698 2319 716 471 1328 180 481 2316 33 2066 490 2313 406 135 242 243 269 1399 683 774 752 959 912 1981 896 1303 124 223 1415 162 844 45 19 210 518 284 1740 1845 144 80 423 1162 2645 2646 1574 267 483 1054 311 1561 690 1133 601 461 2196 1744 915 1690 466 436 355 833 834 835 3134 693 694 169 193 194 2486 1736 116 449 2406 203 563 847 2678 2368 2470 2471 990 191 1986 237 258 959 136 462 2306 518 2660 1128 104 769 371 372 1303 1304 575 2327 2548 537 700 2021 898 11 278 1222 2599 2704 136 1253 195 2456 676 146 147 487 652 2050 704 1735 595 1935 60 552 553 545 658 1512 1525 98 1660 509 102 1912 1913 1128 892 656 62 917 1033 250 1912 925 167 1559 142 197 693 1328 149 2024 334 51 647 1453 1690 1691 1131 309 1384 321 1227 186 187 1128 1129 2762 2763 79 362 439 440 9 2725 177 1923 2842 188 1842 497 1552 208 251 3308 3309 3310 1340 1986 3226 1893 323 223 1415 2764 704 1416 967 2424 575 2804 2805 34 77 78 79 477 2011 131 2482 2814 629 630 105 64 1701 1696 50 397 1401 2198 2199 1253 1184 177 1923 3322 559 560 124 1949 2643 1001 425 426 915 916 633 634 3352 3353 3354 3355 3356 3357 3358 3359 3360 3361 3362 3363 3364 3365 3366 3367 3368 3369 3370 3371 3372 3373 3374 3375 3376 3377 3378 3379 3380 3381 3382 374 324 1067 1196 2600 566 1217 272 81 227 278 281 282 543 14 60 61 62 2018 220 488 949 1330 220 2082 851 174 175 2387 2388 140 15 16 220 652 2832 1540 34 956 3348 3349 108 2688 704 705 844 3172 46 1707 1228 63 654 503 40 281 656 657 546 17 267 461 690 999 339 1696 3362 341 2370 925 510 130 100 1315 231 1006 1492 1655 210 211 1048 1049 40 41 42 43 1655 1693 760 374 375 728 237 122 932 933 934 935 1389 200 2325 15 447 1740 223 1415 3339 3340 120 28 173 23 28 1369 75 495 1253 1254 103 210 208 728 1253 2047 392 393 1283 1349 1350 181 1672 1525 1327 2302 538 83 31 461 309 529 1986 3020 1384 2684 1307 1491 1492 118 254 855 2131 220 576 761 2054 331 41 18 77 78 162 163 595 1935 1936 113 121 51 395 1511 659 1701 546 3473 42 1119 2302 3548 676 677 678 86 2521 582 234 235 1552 1285 254 1191 912 90 1174 2002 2003 1368 827 1078 1079 2016 3106 122 25 395 719 360 174 967 64 1400 1535 1536 103 470 2436 2437 87 38 220 221 166 525 895 896 3166 687 688 13 14 281 656 3107 670 145 26 27 287 543 544 28 1459 284 1078 480 667 907 472 907 148 321 1128 1129 3628 802 1546 1639 470 2426 2427 2842 431 445 3136 2461 1691 2584 2585 2845 379 380 162 844 32 40 824 663 693 20 1275 1276 28 149 2024 2629 1582 1099 269 1549 764 990 1681 533 534 51 3299 3144 694 42 269 955 2296 65 1813 281 752 436 758 551 61 62 1724 81 116 914 867 915 289 932 31 70 45 1739 740 741 2195 462 497 431 49 2711 1335 1336 2749 4 103 191 2587 1119 3590 700 2021 2126 2127 652 2160 669 1384 3306 3664 3665 269 1549 370 371 1740 518 197 459 1424 2600 392 2664 16 39 166 102 25 146 5 126 5 6 197 2226 399 23 158 100 114 466 370 508 1732 64 826 886 30 461 1109 2193 73 540 1525 269 876 56 57 220 488 182 826 173 307 1514 1515 905 470 3628 255 17 2599 3002 148 149 2024 2629 1477 432 786 670 671 1556 462 1843 1791 240 417 1803 2777 2436 2437 1326 566 567 74 683 1410 1821 957 683 1573 2410 652 2402 90 1512 23 1238 1239 78 557 994 149 233 3707 1 140 2529 1966 722 453 1118 49 2711 1755 233 234 235 236 2880 2881 3473 3588 269 270 2925 3103 535 3108 3109 2035 487 2447 552 199 255 1485 2528 2714 149 2024 2131 281 528 529 3001 3002 3826 949 134 2765 647 3 23 28 827 116 360 14 39 311 831 791 1541 285 328 2418 294 562 915 3730 32 131 1006 445 450 174 175 220 488 489 490 325 2428 2429 134 704 381 506 1023 691 1403 646 146 1885 31 742 743 103 470 471 1328 3295 3296 3297 335 3227 259 1086 1087 1088 10 90 197 2226 876 365 33 435 1727 197 693 3691 510 2749 174 395 1511 480 181 180 667 2759 30 461 1004 337 338 809 76 682 610 66 203 1065 1066 178 829 142 1260 3101 52 53 54 77 78 15 252 3318 2108 1099 3 4 103 191 2506 2023 2024 2131 39 166 167 1559 2607 987 345 346 347 1708 3777 3778 1051 101 999 101 102 1428 2117 765 1119 2546 2547 2648 3759 310 1028 19 1647 1677 1678 3993 321 431 1119 2381 637 484 2874 392 409 2096 2097 683 3108 895 896 1721 1954 177 178 3473 169 193 194 2018 60 2271 2272 369 3899) (list 256 333 334 335 122 10 72 32 40 112 1323 178 15 851 1229 1230 158 1813 60 61 289 3731 3732 207 518 3176 3920 3921 199 582 680 681 3042 503 1929 1930 271 863 717 3869 211 114 288 298 1373 1952 653 143 1151 910 15 160 159 851 852 2187 282 3428 89 90 1512 1513 42 244 23 158 1278 2368 309 536 1022 2184 2185 23 121 3107 529 872 244 4 30 32 40 220 1574 42 49 665 1924 1925 1428 1429 22 36 38 39 40 332 769 3 14 148 949 1412 103 104 105 574 481 1680 191 815 71 620 1303 3639 276 2456 251 1708 537 1976 179 2555 683 2270 1352 623 14 220 1574 637 487 488 180 3174 3175 1733 1234 1639 3670 3764 399 134 135 1006 3876 96 278 1222 637 4204 4205 3475 462 497 188 189 10 72 1196 1197 1198 3467 2223 1324 989 1567 2473 1887 1888 854 1897 1898 242 207 1099 471 974 40 210 211)) do (sethash hashtable key val)) hashtable) :hashsuppl-> (let ((hashtable (make-hash-table))) (loop for key in (listfor val in (list 32 3869 2957 1808 4193 3319 4173 3784 3785 2730 3609 2084 3527 3318 4252 1627 3248 1628 2021 4138 3087 3641 4222 4144 3776 3054 3823 3571 4060 3691 2965 4186 4167 3760 1776 2104 3780 3648 3649 3988 3918 3512 2878 4174 3959 4175 3981 3452 996 4187 2687 3996 4188 3158 4189 3623 4273 3364 3312 3570 1699 3313 4179 3339 3955 3499 3914 2584 3734 2493 3462 2494 2789 3084 2790 2075 2791 4180 3850 3362 4197 3707 4015 4016 4017 3519 3341 3842 3809 2788 3810 1790 4112 4113 3723 3465 3772 3797 3715 4006 2566 4184 4185 206 3733 4206 4253 3804 3848 2953 3528 2833 4003 4018 4019 3350 3180 2464 3725 3052 2283 3345 3549 3053 3346 3098 3595 3133 3630 3028 4152 4153 2753 3017 3300 3355 1902 977 2094 4241 2874 3274 3654 433 3791 3135 4048 1614 4049 1932 4198 1933 4199 1934 4200 587 3456 2274 3450 4103 3579 4135 3920 3830 3561 1746 842 3522 3673 4168 4245 4098 2736 4246 2737 3681 3374 3900 2971 3783 1592 1320 3485 3559 3936 3560 3032 3125 3118 4237 4238 3253 2580 3048 2062 3123 3870 165 4012 4141 3179 3647 3957 3259 4195 3903 3036 3991 1551 4154 2661 4071 4155 607 3817 3818 4159 1631 3883 3884 4146 4145 1311 3684 3575 3122 3806 3060 4034 4035 2598 4085 2525 3029 2940 3815 1773 3989 3624 3941 3625 737 4082 4105 4216 3451 4228 3927 3993 3813 2729 3007 3008 2573 3668 1899 3308 3309 4250 3765 4251 2533 4204 3600 2535 4086 4087 3255 3835 3984 295 4036 4122 3513 3190 2633 4007 3889 2695 4261 4269 3534 1177 4274 4275 3040 3854 3041 4224 1489 3071 2513 2677 2491 4223 3633 3698 3038 3518 1286 1235 1944 2237 3424 2998 2266 2576 3488 2989 3879 1684 3880 3881 3882 3506 2557 2338 3839 2616 4268 3156 4172 1857 1926 1500 2591 2904 3286 4212 4021 2444 3602 3899 4094 1292 3227 3971 1871 1872 2519 2455 1901 2485 3474 696 3887 3888 4130 2397 3422 4210 401 4242 4233 1082 3909 3910 3906 4150 398 3655 3928 1670 4061 3650 1754 4136 1866 4114 2850 3931 3500 1836 2697 4137 3555 3275 3120 3816 689 4162 4058 3924 3544 976 434 2794 4062 4063 4203 3704 4126 4065 2847 3336 3416 3946 2840 2416 3929 3301 2181 3678 3569 3501 4191 4095 2329 4096 3479 4097 2111 4000 2112 2113 4001 3478 3585 3105 3481 2968 1346 4039 4040 3463 4041 4213 2672 1039 1152 2403 3099 3100 3201 1767 2637 3921 4080 3315 3724 3980 3983 3037 1236 4092 3794 3796 3767 3238 4231 3503 3264 3212 3504 2488 2069 2070 3735 3682 3768 4014 3683 2681 3951 3890 3196 1801 3614 1244 4169 1245 4077 1905 3893 702 404 1720 4072 3539 3878 3990 2458 3363 2375 4236 2213 2214 2215 2918 3153 2838 4073 2839 2629 3205 1653 3676 1900 3840 2663 2224 1608 3709 3181 3378 3379 3033 3838 4066 3831 2919 2920 3982 2921 3719 2563 3316 3317 1967 3841 3638 3938 3078 3516 3129 3214 3939 3461 2636 2811 4111 4229 3874 4230 2988 4119 3771 1833 3851 3998 4248 2281 2297 1480 3793 2524 2438 3963 2358 4271 3660 2450 2161 2342 2343 2976 3351 2638 2639 3992 4202 3324 3837 3187 4070 3178 3096 2760 4226 2408 4227 3944 2530 3945 1938 2515 3529 4249 1363 2999 3138 3000 3022 4127 2123 3058 3334 3970 3952 3795 3276 3987 1398 3131 1969 2916 3044 2917 1948 4118 2428 893 2817 3958 3635 2473 4263 4264 3907 4170 2556 3335 2171 3705 3706 3891 1921 4163 4266 4214 4267 3548 1806 3805 3126 3651 3652 3270 2910 3586 2882 2732 2597 3721 3287 3897 3279 3269 1956 2454 3864 1840 3372 3373 3370 3932 3217 4182 4183 3846 3847 4128 4129 2635 3966 4201 3577 3967 3344 3578 3968 3566 2550 3708 4123 2341 1558 3761 1291 3329 3330 3375 3331 3117 1689 4139 2562 2658 4081 708 3576 1138 4022 1139 1140 2309 2617 3371 3193 2552 3083 3872 3034 1432 4005 1287 2109 2313 4215 2365 2804 3520 3521 4207 3164 4221 3554 3454 3455 1317 3356 3357 3384 3385 1855 3386 3382 2669 3387 3383 3388 3389 3390 4244 3391 3392 3393 2039 3480 3607 3395 2992 3396 3608 3102 2099 3397 2148 2330 3398 2468 3399 3956 3400 3915 3401 2857 3402 2198 3403 3352 3404 3405 3856 3406 3407 4140 3466 3408 1849 3613 3409 3644 3410 3471 4088 3411 3271 3412 3584 3413 3754 1666 3414 1387 4030 4031 3689 2359 4181 1355 3995 3759 2890 3833 3834 2247 3025 1643 3894 1992 2332 2824 3592 3593 3594 4124 2298 4125 4004 4218 2478 1157 1365 3537 2539 3639 2540 3640 3262 3476 3954 1612 3568 3985 3710 2769 2770 3141 796 3753 1040 3950 2594 3150 3459 790 4151 2165 3064 3115 3140 849 777 1504 3143 4132 2612 3618 2361 3075 3439 3873 820 2595 3535 3110 3111 4074 4075 1787 2936 3736 3737 3960 3961 2199 2582 2287 4257 4023 1042 4084 3718 4247 1968 4051 3720 1035 3502 3567 3702 3755 4052 3756 3132 4192 4032 869 870 3160 2136 2698 1763 2163 2692 3832 2899 3926 2966 2641 2086 1221 3758 3667 4002 4205 1588 1209 2986 4165 3688 4166 3006 3814 3591 4149 3919 2728 4011 3925 1766 3803 2291 3202 3203 3738 3195 3204 3365 3366 3685 3218 2974 4147 4148 4265 3563 2336 2924 4258 4131 1423 3978 1818 3886 3728 3752 1860 4171 3130 3979 3079 3046 888 3799 2495 2496 2497 3281 4078 2717 4079 3247 2042 1668 2288 3819 3821 3661 4219 4090 4143 4091 3604 3727 3933 3381 3284 4209 3483 3039 1742 3731 3509 3510 3511 3714 2503 2978 3590 3762 3763 3231 2150 2151 4234 4196 3012 3152 2407 3713 3148 3453 3852 2611 3142 3228 2366 2055 3514 2056 3242 3621 3986 2699 4272 2856 2386 3868 4038 4260 3703 2590 3865 4047 3377 1564 3999 4239 4161 1745 3934 3482 4115 4116 2486 1101 2979 3009 4068 4164 3953 1345 3443 3444 4059 1370 3285 1358 4057 3857 4235 2624 3215 3494 3495 3855 4045 3188 4043 1407 4044 1408 3930 2098 1060 3343 4008 3671 4009 3672 3417 3947 1738 3948 1457 2922 3047 3843 2619 3844 3656 3612 2773 3972 3896 2656 3973 2657 3974 1877 2800 4211 4270 3677 2719 2720 3911 1341 3802 3221 1664 3222 2307 4262 1250 1251 3875 4067 3016 3354 2908 3211 3664 3665 2432 3303 3192 2586 1882 2851 1904 4029 4133 2705 1599 4142 1170 1171 4240 2411 1319 3596 3182 3901 3871 2742 3606 2970 3063 4093 2809 2810 2017 2994 3368 4054 2973 4055 3243 3603 1468 3080 4217 3081 4254 4255 4256 4120 2716 4121 2392 2950 2951 2014 2614 3421 4243 2219 3679 3680 3750 3307 3464 4108 4109 1777 1778 4232 3824 3861 3773 3862 2927 2792 4037 3536 3531 1321 1322 4013 1946 1759 1760 1816 1498 3829 4064 2382 3692 3693 1768 4160 3376 3540 3183 3601 3184 2029 4056 3013 2783 2784 2785 2855 1469 1470 1471 3233 1472 2015 4208 3775 3240 3558 1942 3487 3219 4104 3557 0 4259 3845 3546 3457 3965 3011 3437 3744 3745 1868 3332 3252 3541 3542 3877 2425 4220 2710 3902) do (sethash hashtable key val)) hashtable) :veclrs (make-array 4500 :initial-contents (eval-my-list (quote (nil 0 0 0 0 0 0 0 0 1 0 1 2 1 0 0 1 1 1 1 1 1 1 1 2 0 1 2 1 1 1 2 0 1 1 2 1 2 2 1 1 2 1 1 2 2 2 3 2 1 1 1 2 2 2 3 2 3 3 4 1 1 1 1 1 1 1 2 3 3 3 2 1 2 2 2 2 1 1 1 1 1 2 2 3 1 1 2 3 1 1 2 2 2 1 2 2 1 2 2 1 1 1 1 1 2 2 3 2 3 4 5 2 2 1 2 1 2 2 2 2 1 2 3 1 1 1 2 2 2 1 1 2 2 1 2 1 2 3 4 1 2 2 1 1 1 1 2 1 1 2 2 2 3 4 3 2 3 2 1 1 2 2 1 2 3 1 1 2 2 3 4 5 2 1 1 2 1 1 2 2 2 2 3 2 1 1 2 2 3 2 2 3 1 2 2 3 1 2 1 2 2 2 1 2 3 4 2 1 2 1 1 2 3 4 5 3 2 1 2 1 2 1 1 2 2 2 2 2 3 2 2 2 1 2 3 3 2 2 2 1 2 2 3 2 2 2 2 2 1 2 1 1 2 1 1 2 2 1 2 2 3 2 2 2 2 3 2 3 1 2 1 1 2 3 4 2 3 2 3 4 1 2 2 1 2 3 2 2 2 3 4 3 4 2 3 2 3 2 3 3 2 3 3 3 4 2 2 2 1 2 2 2 3 4 2 2 3 2 3 3 2 2 1 1 2 2 3 3 3 2 2 2 2 2 3 4 1 2 1 2 2 2 3 2 1 2 3 1 2 2 2 2 2 2 1 2 3 3 2 2 2 2 2 3 2 2 3 2 2 1 2 3 2 2 2 2 3 3 2 3 2 2 3 2 2 3 2 2 3 3 3 2 3 3 1 2 2 3 2 3 4 3 4 5 6 2 2 2 2 3 2 2 3 3 2 3 2 3 3 2 2 2 2 3 2 2 2 3 4 3 2 2 3 3 2 1 1 2 1 2 2 2 3 2 1 1 1 2 2 2 3 2 2 3 4 3 3 2 2 3 2 2 2 2 3 1 2 3 2 2 1 1 2 3 2 2 2 3 2 2 2 3 2 2 2 2 2 2 2 2 2 2 3 3 2 3 3 2 1 2 3 2 2 2 3 2 3 1 1 1 2 2 3 3 4 3 3 1 1 2 2 2 3 3 1 2 2 2 2 3 2 2 1 2 2 2 1 2 3 3 3 3 2 2 2 2 3 3 4 2 2 2 2 3 3 2 2 2 2 3 2 2 2 3 4 2 2 3 4 3 2 3 4 2 2 2 2 3 3 3 3 2 2 2 2 3 4 3 3 2 3 2 3 2 1 2 3 3 2 3 2 3 4 5 3 3 4 4 3 3 3 2 2 2 3 2 3 3 4 3 3 3 2 3 2 3 2 2 2 2 3 2 2 3 3 3 2 3 2 2 3 1 1 2 2 2 1 1 2 3 3 2 2 2 2 2 2 2 2 3 3 3 2 2 2 3 2 3 2 2 3 2 3 2 2 2 2 2 2 2 3 3 2 1 2 2 2 3 4 2 2 2 2 2 3 4 2 2 2 2 3 4 2 2 3 3 4 3 3 2 2 2 3 3 2 2 2 3 2 2 2 2 2 2 3 3 4 2 3 2 2 3 3 2 1 2 3 3 2 2 3 2 3 2 2 3 2 3 3 2 2 2 3 2 3 2 2 2 2 2 1 2 2 2 2 3 3 2 2 2 3 2 3 2 3 4 4 2 2 2 2 2 2 2 2 2 3 3 3 4 2 2 3 2 3 3 4 3 2 3 3 1 2 2 3 2 2 2 2 3 4 3 2 3 3 3 4 2 3 3 3 3 2 2 3 2 2 2 2 3 3 2 2 2 3 4 3 4 3 3 3 4 3 2 3 4 2 2 3 2 1 2 3 2 2 3 3 2 3 3 2 3 2 2 3 2 2 3 4 5 3 3 3 3 2 2 3 2 1 2 3 3 3 4 3 3 3 4 2 3 3 2 3 3 1 2 3 2 3 3 4 3 3 3 2 3 2 2 3 2 2 2 2 2 2 3 2 3 3 2 3 2 3 4 2 3 2 2 2 2 3 2 3 3 4 3 3 3 2 3 4 3 3 3 4 5 2 2 2 3 3 3 3 2 2 2 2 2 2 3 2 3 2 2 3 3 2 2 2 2 2 3 2 2 3 4 2 2 2 2 2 2 3 2 3 3 2 2 2 2 3 3 2 2 3 3 3 3 2 2 2 3 2 2 3 2 3 2 3 4 3 3 3 1 2 2 2 2 2 3 3 2 2 3 3 3 4 3 3 3 2 3 3 3 3 4 2 2 3 3 4 4 4 2 3 3 2 2 3 3 2 3 3 2 3 2 3 2 2 3 3 3 3 4 2 2 2 3 3 2 3 3 2 3 2 3 3 2 3 4 3 4 3 2 3 2 3 2 3 3 4 3 2 3 2 3 3 3 2 2 3 2 3 3 2 2 3 2 2 3 2 2 2 2 3 2 3 3 2 3 3 4 4 3 3 4 4 2 3 2 2 3 3 3 3 2 3 4 5 6 3 3 2 2 2 3 4 5 2 2 2 3 4 4 2 2 3 3 3 2 2 2 3 3 4 5 6 3 3 4 5 2 3 2 2 2 3 3 4 2 3 2 2 2 2 2 3 3 3 3 2 2 2 2 3 2 3 3 2 2 2 3 4 2 3 3 4 3 4 2 2 3 3 2 2 3 2 2 2 3 4 2 2 3 3 3 2 2 2 2 3 3 4 2 3 4 3 2 2 2 3 4 4 5 6 7 2 2 2 3 4 3 2 3 3 3 3 4 3 2 3 3 3 2 3 3 3 3 2 3 3 3 4 5 2 3 3 2 3 3 4 5 3 3 2 3 3 4 2 2 3 3 3 3 2 3 2 3 3 3 2 3 2 3 3 4 3 3 3 2 3 3 3 3 2 3 3 3 4 3 4 5 2 2 3 2 2 2 3 3 3 3 2 3 2 3 4 3 3 3 3 2 2 3 4 3 3 4 2 3 2 2 3 3 4 5 3 4 2 2 3 4 3 3 3 3 3 2 2 3 2 3 2 3 4 3 2 3 2 3 3 3 3 2 3 4 4 3 2 1 2 3 2 3 2 2 3 4 2 2 2 2 2 3 3 3 4 5 3 3 3 3 3 4 2 2 3 2 3 3 2 2 3 2 2 2 3 2 3 2 3 4 4 3 3 4 3 4 5 6 3 3 1 2 3 3 2 2 2 2 2 3 2 3 3 3 4 3 2 2 2 3 3 3 3 3 2 3 4 5 6 7 8 2 3 4 2 3 2 3 3 3 2 2 2 3 4 5 6 5 3 3 3 3 3 2 3 4 4 3 4 2 3 3 2 2 3 2 2 3 2 2 3 2 3 4 5 4 3 2 3 4 5 6 2 2 3 4 4 3 2 3 3 3 3 3 2 2 3 2 2 3 3 3 2 2 3 3 2 3 4 2 3 2 3 3 3 3 2 3 3 3 3 4 3 2 2 3 4 5 6 4 3 2 3 3 4 3 2 2 3 3 2 3 4 2 2 3 2 2 2 3 3 2 2 3 3 3 3 2 2 3 3 4 3 4 2 3 4 3 4 3 3 4 4 3 4 5 3 2 3 3 3 3 3 2 3 4 4 3 4 2 2 3 3 4 3 3 2 3 4 3 3 4 3 3 2 3 3 3 4 3 4 3 2 3 2 3 3 2 3 3 3 4 4 5 4 5 4 4 3 3 4 2 3 3 2 3 4 3 2 3 2 3 3 3 3 3 4 2 2 3 3 3 3 2 2 2 3 3 2 3 3 3 3 4 3 2 2 2 3 3 3 1 2 2 3 4 5 4 2 2 2 2 2 3 3 2 3 3 2 2 2 3 2 2 3 4 2 1 2 3 3 2 3 3 3 4 2 2 3 4 4 5 2 3 2 3 4 5 3 2 3 2 3 3 3 4 3 3 3 3 4 5 4 3 4 5 2 2 3 3 3 3 3 4 4 3 4 4 2 2 2 2 3 4 3 3 2 3 3 3 3 2 3 4 4 4 2 3 3 3 2 3 3 4 4 3 2 3 2 3 4 3 4 5 6 3 2 3 2 3 4 4 3 4 2 3 3 3 3 3 3 3 2 2 3 3 3 2 3 2 3 2 3 3 3 3 3 4 3 3 2 2 3 4 4 5 2 3 4 5 6 3 2 3 4 2 3 3 4 4 2 2 2 2 3 3 4 3 4 3 2 2 2 2 2 3 4 3 3 3 2 3 3 2 2 3 2 2 3 2 3 3 3 2 3 2 2 3 3 2 2 2 2 3 3 3 2 2 3 4 5 6 2 3 4 3 3 3 3 4 3 3 3 3 3 4 2 2 3 3 2 2 2 3 3 3 2 2 3 4 3 4 3 2 3 3 4 5 3 3 4 4 3 2 2 2 3 3 2 2 3 3 3 2 3 3 3 2 2 3 3 1 2 2 2 3 4 3 3 3 3 3 2 2 3 4 2 3 2 2 3 4 4 2 3 2 2 3 3 4 2 2 3 3 3 4 5 3 2 2 2 3 3 3 2 3 4 5 4 4 4 3 4 3 2 3 3 2 3 3 2 2 3 4 3 2 3 2 3 4 4 2 2 2 3 3 4 5 3 2 3 3 3 4 3 3 3 4 3 2 1 2 2 3 2 3 3 2 3 4 3 3 3 3 4 3 4 5 2 3 3 4 3 3 4 2 3 2 3 4 5 2 2 3 2 3 3 2 3 3 3 3 4 2 3 4 3 3 2 2 3 3 4 3 4 3 4 5 3 3 3 3 3 2 2 3 2 3 4 3 3 3 4 1 2 2 3 3 4 3 4 4 4 2 2 2 3 3 3 2 3 3 4 3 3 3 3 3 3 4 3 2 2 3 2 3 4 2 2 3 3 3 3 3 3 3 3 3 3 4 3 4 2 3 3 2 3 3 3 3 3 4 5 3 3 3 3 3 2 3 3 3 3 2 3 2 3 4 5 2 3 1 2 2 3 3 3 3 4 4 4 4 3 4 3 3 4 5 3 3 4 3 3 4 2 3 3 3 4 3 2 2 2 3 4 3 3 2 2 3 3 4 2 3 4 5 6 3 3 3 3 3 4 3 4 3 3 4 4 3 4 3 3 3 4 5 2 3 3 2 3 3 3 2 3 2 3 3 2 3 3 3 4 2 2 3 2 2 2 3 3 4 2 3 3 4 4 3 3 4 3 4 3 4 2 3 3 3 4 4 5 2 2 2 2 3 3 3 3 4 2 3 4 4 2 3 3 3 3 3 4 3 3 4 3 2 3 3 4 3 2 3 4 4 3 3 3 3 3 4 3 3 2 3 2 3 4 2 3 4 2 3 4 3 4 2 3 3 2 2 3 2 2 2 3 4 3 2 3 3 3 3 3 4 5 4 3 3 2 2 2 2 3 2 3 2 2 3 2 3 2 3 2 2 3 4 2 3 2 2 2 3 3 3 2 3 4 5 2 2 2 3 3 2 3 4 2 2 2 3 4 5 3 2 3 3 2 2 3 3 3 3 2 3 4 2 2 2 3 2 2 2 3 2 2 3 3 3 3 3 4 5 3 4 5 3 3 2 3 3 4 4 3 3 3 4 4 2 2 3 4 5 3 3 3 4 4 2 2 3 2 3 3 2 2 2 2 3 3 2 3 4 5 6 7 3 4 5 3 2 3 2 3 2 3 3 2 3 3 4 2 3 3 4 3 2 2 3 3 3 2 2 2 3 2 2 3 3 2 3 3 3 3 3 3 3 3 3 3 3 3 3 3 4 3 3 3 4 3 2 2 3 3 3 4 3 2 2 3 4 2 2 3 3 3 3 3 4 3 4 2 3 3 4 3 4 5 3 3 2 3 4 3 2 3 3 3 3 4 2 3 3 4 4 5 4 5 3 4 3 2 3 2 3 4 4 2 3 2 2 3 2 3 4 5 3 2 2 3 3 4 1 2 3 3 3 3 2 2 2 2 2 3 3 3 2 2 2 3 3 3 3 4 4 3 2 2 3 2 3 2 3 3 3 4 4 3 3 3 2 3 3 4 2 3 3 3 4 2 3 3 2 3 3 4 3 4 5 5 3 3 3 2 3 2 3 4 2 2 3 3 2 3 4 5 2 3 3 3 4 3 3 4 3 2 2 2 2 3 4 5 2 3 2 3 3 3 4 3 3 4 2 2 2 3 3 3 4 2 3 4 2 3 3 2 2 3 2 3 3 4 5 6 2 2 3 4 5 6 5 3 3 3 2 2 3 2 3 2 3 3 3 3 4 3 3 4 5 3 4 3 3 3 2 3 2 2 2 3 3 3 3 3 2 3 4 4 5 3 3 3 3 2 3 2 3 4 3 3 2 3 3 3 3 4 3 4 5 4 3 3 2 3 3 2 2 2 2 2 3 3 3 2 3 3 4 3 3 3 2 3 2 3 2 3 2 3 3 3 4 3 2 2 2 3 3 3 3 3 3 3 2 2 3 3 3 4 4 3 4 5 2 3 2 3 4 3 3 2 3 4 3 3 4 5 4 3 4 5 3 3 3 2 2 3 3 3 3 2 2 2 3 4 4 3 4 4 3 2 3 3 4 1 2 3 3 4 5 6 3 3 3 4 3 2 2 3 3 3 2 3 3 3 3 4 5 3 4 3 2 3 4 3 3 3 3 3 2 3 3 3 3 3 3 3 4 3 2 3 2 2 3 3 2 3 3 4 5 3 3 3 4 3 4 4 5 4 3 4 4 3 2 3 3 3 3 3 3 3 4 3 4 3 3 3 3 4 2 2 3 4 4 3 3 4 2 3 3 4 3 3 4 3 4 3 3 2 2 3 2 3 3 2 3 3 4 3 3 2 2 3 3 2 3 2 3 3 4 5 2 3 4 5 3 3 2 2 3 4 4 5 4 3 2 3 3 3 4 2 2 2 3 3 4 2 3 3 4 2 2 2 2 3 2 2 2 3 4 5 2 3 3 4 3 3 4 3 3 3 4 3 3 3 4 2 2 3 3 3 4 4 2 3 2 2 2 2 3 3 3 3 2 3 3 3 3 3 3 3 4 3 3 3 4 4 3 3 3 3 3 3 4 3 3 2 2 3 3 4 3 3 2 2 2 3 4 2 2 3 3 3 4 3 3 4 3 3 4 3 4 3 3 4 3 3 3 3 2 2 3 4 5 4 3 4 3 4 5 3 3 2 3 3 2 3 3 3 3 3 4 3 3 4 3 2 3 2 3 3 3 3 3 3 3 3 4 3 4 3 4 4 2 3 4 4 3 3 4 3 4 2 3 3 3 3 2 3 3 4 3 3 3 2 3 2 3 4 3 3 3 3 3 3 2 2 3 4 4 3 3 2 3 4 4 3 3 2 3 3 2 3 3 3 3 3 2 2 3 3 4 3 3 3 3 3 2 3 3 4 4 5 3 3 2 3 2 3 2 3 3 3 4 4 3 3 2 3 4 5 4 4 5 3 2 2 3 3 3 3 3 3 3 4 5 2 2 3 4 3 3 2 3 4 3 4 3 2 3 3 2 3 3 4 5 3 3 2 3 4 3 4 2 3 4 3 3 4 3 4 3 4 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 3 3 3 3 3 3 3 2 2 3 3 2 3 3 2 2 3 4 3 2 3 3 4 2 3 3 2 3 3 4 3 2 3 2 3 4 3 2 3 3 4 4 3 3 4 4 5 4 4 4 2 3 3 3 4 3 4 3 2 3 3 3 3 2 3 4 3 4 3 2 2 2 3 3 4 4 4 3 4 3 4 3 4 5 6 4 4 3 3 4 3 3 3 4 5 6 7 3 3 4 2 2 2 2 3 4 5 3 3 4 3 3 3 3 3 3 4 2 3 2 3 3 3 3 4 5 4 5 3 4 3 3 3 3 3 3 3 3 3 3 4 3 4 4 4 5 3 2 3 3 2 3 2 3 3 3 3 3 4 3 4 3 4 5 3 2 2 2 3 3 3 3 4 3 3 3 4 3 4 5 3 3 3 3 4 3 3 2 3 3 2 3 4 5 4 3 3 4 3 3 3 3 2 3 3 2 3 2 3 4 5 2 3 3 4 3 3 2 3 3 2 2 3 4 3 4 3 4 2 3 3 3 2 2 3 3 4 5 3 3 2 3 3 4 3 2 3 2 3 3 4 4 2 3 3 3 3 4 3 3 3 3 3 3 4 5 4 3 4 3 4 3 2 3 3 3 2 3 4 3 2 3 4 4 3 2 3 3 3 3 3 4 2 3 3 3 3 3 3 4 3 4 3 3 2 3 3 3 4 3 2 2 3 3 3 3 3 3 4 3 3 3 4 4 4 4 3 3 3 3 4 3 3 2 3 4 3 4 3 4 5 6 4 4 4 4 4 4 5 2 3 2 3 2 2 2 3 3 3 3 2 2 2 3 2 2 2 2 2 2 3 2 3 3 3 3 3 3 4 2 2 3 2 3 4 4 3 3 4 3 4 4 2 3 3 4 2 3 3 4 3 3 4 5 4 3 4 2 2 3 4 2 3 3 4 4 3 3 3 4 4 3 4 3 2 3 4 4 3 4 3 3 4 3 4 4 3 3 3 4 3 3 3 3 3 3 3 4 2 3 3 2 2 3 1 2 3 3 3 3 4 3 3 3 3 4 5 6 4 5 4 5 3 4 3 3 3 3 4 4 3 3 3 3 2 3 3 3 3 3 4 2 3 4 4 5 5 3 3 3 3 2 2 3 3 2 3 2 3 3 4 3 3 3 4 5 3 3 3 4 2 2 3 3 3 2 3 2 3 4 5 3 3 4 2 3 3 4 3 3 3 3 2 3 3 3 4 3 3 4 3 4 5 6 4 3 3 4 5 6 3 2 3 4 3 3 3 3 4 2 3 4 2 3 2 3 4 3 3 3 3 4 2 3 3 3 4 3 3 4 4 4 3 3 4 2 3 3 4 3 3 4 5 3 4 1 2 3 3 3 3 4 2 3 4 3 4 4 3 3 4 3 4 4 2 3 4 3 3 4 4 2 3 2 3 3 4 3 3 3 4 5 5 3 4 2 3 3 4 4 4 3 3 4 3 3 4 3 3 4 5 3 3 2 3 3 3 2 3 3 3 4 5 3 2 3 4 3 3 3 3 4 5 4 3 3 2 2 3 3 2 2 3 3 4 3 3 3 4 3 4 5 4 2 3 3 4 3 3 3 4 4 3 3 4 2 3 3 2 2 2 3 3 3 4 3 2 3 3 1 2 2 2 3 4 3 4 2 3 3 4 2 3 2 3 4 3 2 3 3 3 4 2 3 3 3 4 3 3 2 3 2 3 3 3 3 3 3 4 3 4 2 3 3 4 5 3 3 2 2 2 3 4 2 3 4 5 3 4 3 4 3 4 3 4 3 3 2 3 2 3 3 4 3 3 3 3 2 2 3 3 3 4 3 3 4 3 3 3 4 4 3 3 4 3 4 3 3 4 3 4 5 4 4 4 3 4 3 3 4 5 6 4 4 4 3 3 4 4 5 4 3 4 3 3 3 2 3 3 2 3 nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :maxetat 4275 :hashrepeats nil :lrsmode (quote t) :comparateur (quote compareevents) :name "improvizer" :context nil :continuity 0 :navigationmode (quote continuity) :currentstateidx 0 :prevstateidx -1 :max-continuity 1000 :start-region (list 0 4275) :fwsuffix (quote t) :bwsuffix (quote t) :bestsuffixmode nil :useestrada nil :usehindemith nil :refharmgrid nil :harmgridlength 48 :beats/measure 4 :reftempo 536 :currenttranspo 0 :lengthfactorsfromgrid (list 1 100) :besttranspomode (quote t) :firstwithouttranspomode (quote t) :authorizedtranspos (list 0) :randomprefixoccurrencemode (quote t) :tabou-mode nil :tabou (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :feature nil :hashlabeltranspo (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :from-file t))