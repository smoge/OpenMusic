(in-package :om)(if (find-class (quote improvizer) nil) (make-instance (quote improvizer) :vectext (make-array 1000 :initial-contents (eval-my-list (quote (nil (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "champ " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bleu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rmi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "rais" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "ins " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "noirs " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Lo" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rsque " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vers " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vent " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "l'in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "cline " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "fré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ssant " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "champ " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bleu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "fait " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ci" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "el " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "roir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "fré" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mis " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "ju" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "squ'au " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fond " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "d de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "sang " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "champ " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bleu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "dans " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "s le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jour " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "re" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ven" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "u " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Lon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "gtemps " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "traî" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ne " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "co" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bru" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "me " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ges " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "j'ai " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "peur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "d'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "le" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ver " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "oi" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "seaux " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "in" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "us " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "
Dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "au " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "loin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "l'o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "mbre " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "lé" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "o" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "bscu" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "ré" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "s'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "llon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "champ " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bleu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "rmes " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Ou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "vert " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "sur " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "ys " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "que " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "seul " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "l'a" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "mour " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "conn" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "aît " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Où " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tout " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "a " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "rfums " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ms le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "voir " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " le " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "cha" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rme " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "
Comm" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice " des " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "bais" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "ers " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "si " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "men" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "aient " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "champ " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bleu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "dont " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "c'est " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "l'é" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "tonn" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "e" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "
Tou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "jours " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "à " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "dé" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vrir " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "eau " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "pu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pro" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "fon" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "son " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "man" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "teau " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "cou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "vrant " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "mi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "ra" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "cu" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leu" :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 5 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "ment " :syllabeposinword 6 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Est" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ce " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "lac " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "ou " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mer " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "r les " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "é" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "o" :textslice "pau" :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "les " :syllabeposinword 4 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "du " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "mon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "de " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "
Un " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "grand " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "champ " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "un" :textslice "lin " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "bleu " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "qui " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "pa" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "rle " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "rit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "pleu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "re " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
Je " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "m'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "on" :textslice "plon" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "ge " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "m'y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "perds " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "di" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "moi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "de" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vine" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "
Quell" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "se" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "mai" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "lle " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "y " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "fit " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "joi" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "a" :textslice "la " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "dou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "leur " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "
Et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "pou" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "oi" :textslice "rquoi " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice " de " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "è" :textslice "l'ai" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "mer " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "an" :textslice "en" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "i" :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "vre " :syllabeposinword 3 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "é" :textslice "et " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "ou" :textslice "vous " :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "u" :textslice "tu" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "e-muet" :textslice "e " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "eu" :textslice "
De" :syllabeposinword 1 :lastsyllabeinword nil :from-file t)) (if (find-class (quote vowelslice) nil) (make-instance (quote vowelslice) :midiset nil :duration 500 :data nil :vowelclass "i" :textslice "vine " :syllabeposinword 2 :lastsyllabeinword nil :from-file t)) nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :hashtransition (let ((hashtable (make-hash-table))) (loop for key in (listfor val in (list (list 59 45 43 14 13 12 10 9 8 7 4 2 1) (list 124 88 72 20 12 6 2) (list 171 156 102 69 65 62 19 4 3) (list 4) (list 242 226 122 83 78 59 47 30 18 16 7 5) (list 6) (list 165 113 57 30 7) (list 247 144 137 135 119 115 103 8) (list 245 229 193 154 126 51 43 36 34 31 23 9) (list 206 175 168 142 118 101 97 85 76 22 10) (list 132 96 80 67 39 32 11) (list 12) (list 248 40 37 17 13) (list 190 169 155 131 92 89 87 45 33 14) (list 147 98 95 75 73 71 68 15) (list 242 187 128 106 16) (list 17) (list 257 237 18) (list 198 171 62 58 19) (list 25 20) (list 21) (list 22) (list 233 43 23) (list 24) (list 25) (list 26) (list 27) (list 28) (list 29) (list 30) (list 238 229 221 82 51 36 31) (list 67 32) (list 33) (list 34) (list 83 35) (list 36) (list 236 37) (list 142 38) (list 39) (list 40) (list 41) (list 42) (list 43) (list 239 138 123 100 74 63 44) (list 45) (list 166 104 91 48 46) (list 78 47) (list 166 48) (list 189 65 49) (list 50) (list 51) (list 178 52) (list 53) (list 54) (list 55) (list 56) (list 220 165 113 57) (list 58) (list 59) (list 265 191 153 140 134 133 130 60) (list 122 117 61) (list 62) (list 63) (list 211 91 64) (list 65) (list 262 193 66) (list 67) (list 244 241 200 68) (list 69) (list 190 70) (list 71) (list 201 72) (list 179 73) (list 74) (list 267 75) (list 264 250 232 183 76) (list 77) (list 78) (list 254 206 118 85 79) (list 80) (list 151 81) (list 159 82) (list 83) (list 197 114 84) (list 85) (list 86) (list 87) (list 88) (list 89) (list 181 100 90) (list 91) (list 92) (list 93) (list 94) (list 95) (list 96) (list 168 97) (list 98) (list 146 99) (list 181 100) (list 101) (list 102) (list 103) (list 104) (list 231 105) (list 187 106) (list 229 107) (list 108) (list 109) (list 110) (list 111) (list 112) (list 220 113) (list 114) (list 115) (list 203 130 116) (list 117) (list 254 118) (list 251 137 119) (list 205 120) (list 121) (list 122) (list 210 123) (list 124) (list 202 125) (list 126) (list 263 127) (list 128) (list 129) (list 130) (list 131) (list 132) (list 133) (list 153 134) (list 204 135) (list 175 136) (list 137) (list 138) (list 196 139) (list 140) (list 256 141) (list 142) (list 226 143) (list 144) (list 223 145) (list 146) (list 147) (list 245 148) (list 225 149) (list 150) (list 151) (list 260 152) (list 153) (list 177 154) (list 155) (list 156) (list 199 157) (list 158) (list 159) (list 160) (list 161) (list 162) (list 163) (list 164) (list 165) (list 166) (list 167) (list 168) (list 184 169) (list 209 170) (list 171) (list 172) (list 173) (list 174) (list 175) (list 265 255 176) (list 177) (list 178) (list 179) (list 180) (list 181) (list 182) (list 183) (list 184) (list 185) (list 186) (list 187) (list 188) (list 189) (list 190) (list 191) (list 192) (list 262 193) (list 247 222 194) (list 195) (list 196) (list 197) (list 198) (list 199) (list 200) (list 201) (list 202) (list 203) (list 204) (list 205) (list 206) (list 207) (list 208) (list 209) (list 210) (list 211) (list 212) (list 213) (list 214) (list 215) (list 216) (list 217) (list 218) (list 219) (list 220) (list 221) (list 222) (list 223) (list 224) (list 225) (list 226) (list 227) (list 228) (list 229) (list 230) (list 231) (list 232) (list 233) (list 234) (list 235) (list 236) (list 237) (list 238) (list 239) (list 240) (list 241) (list 242) (list 258 243) (list 244) (list 245) (list 246) (list 247) (list 248) (list 249) (list 250) (list 251) (list 252) (list 253) (list 254) (list 255) (list 256) (list 257) (list 258) (list 259) (list 260) (list 261) (list 262) (list 263) (list 264) (list 265) (list 266) (list 267) (list 268)) do (sethash hashtable key val)) hashtable) :hashsuppl (let ((hashtable (make-hash-table))) (loop for key in (listfor val in (list -1 0 0 2 0 1 4 0 0 0 0 1 0 0 0 4 12 4 2 1 8 9 8 2 19 2 3 4 5 6 8 10 13 8 4 30 12 9 10 12 8 9 22 0 13 0 4 45 2 4 30 1 2 3 4 5 6 18 4 0 4 18 43 45 48 8 31 14 2 13 14 1 14 43 14 9 45 46 9 10 4 30 34 4 78 12 13 1 13 43 63 13 12 13 14 10 9 14 13 89 9 2 7 45 14 15 30 51 52 53 54 55 56 83 7 59 60 78 7 4 59 60 43 1 7 8 14 15 7 115 13 10 59 59 7 9 118 43 4 59 12 37 4 7 14 98 14 8 9 10 80 59 133 8 13 2 10 80 81 51 52 53 54 55 56 47 10 96 13 4 18 59 133 134 135 59 153 51 72 98 99 74 75 168 45 104 105 47 48 69 59 2 65 7 137 138 83 18 156 67 71 124 115 134 119 78 9 168 169 122 63 104 105 106 107 108 109 110 111 112 30 193 144 147 148 142 14 15 106 45 104 75 22 34 35 36 17 30 43 10 67 15 10 67 147 8 193 12 14 75 118 115 116 117 175 140 17 242 80 151 191 192 126 75 175 43 74 15 106) do (sethash hashtable key val)) hashtable) :hashsuppl-> (let ((hashtable (make-hash-table))) (loop for key in (list 0 1 2 3 4 168 5 169 6 7 8 9 10 175 12 13 14 15 17 18 19 22 191 192 193 30 31 34 35 36 37 43 45 46 47 48 51 52 53 54 55 56 59 60 63 65 67 69 71 72 74 75 78 242 80 81 83 89 -1 96 98 99 104 105 106 107 108 109 110 111 112 115 116 117 118 119 122 124 126 133 134 135 137 138 140 142 144 147 148 151 153 156) for val in (list 59 123 191 53 169 207 55 208 56 193 245 206 242 264 247 168 248 267 256 197 24 232 260 261 246 237 66 233 234 235 141 265 229 77 187 188 177 160 161 162 163 164 190 121 210 192 243 189 200 178 266 263 205 257 258 158 196 99 0 167 179 180 230 212 268 214 215 216 217 218 219 251 252 253 250 204 209 201 262 172 203 174 194 195 255 225 222 244 224 259 176 198) do (sethash hashtable key val)) hashtable) :veclrs (make-array 1000 :initial-contents (eval-my-list (quote (nil 0 0 1 0 1 1 0 0 0 0 1 0 0 0 1 1 1 1 1 1 2 1 1 2 2 3 4 5 6 1 1 1 1 1 2 1 1 2 1 1 2 3 0 1 0 1 1 1 2 2 1 2 3 4 5 6 2 2 0 1 2 1 1 2 1 2 1 1 1 2 1 1 1 1 1 1 2 1 2 1 2 2 1 2 1 2 1 1 1 2 1 1 2 3 1 1 1 1 2 1 1 1 1 1 2 2 3 4 5 6 7 8 2 2 1 2 2 1 1 2 3 1 1 1 2 1 2 2 3 1 1 1 1 1 1 2 1 1 2 1 2 1 2 1 2 2 1 2 3 3 2 2 1 1 1 1 2 3 3 4 5 6 7 8 2 1 2 1 1 2 1 2 3 4 1 2 2 2 2 3 2 3 2 2 2 3 2 3 2 1 1 2 1 2 3 2 2 2 2 2 2 2 2 2 2 1 2 3 2 2 2 3 4 5 6 7 8 9 10 7 2 2 2 3 2 1 2 3 1 2 2 2 2 3 4 2 2 2 1 2 2 1 2 2 1 2 1 1 2 2 2 3 4 2 2 2 2 2 3 2 3 2 2 2 1 2 2 3 nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil)))) :maxetat 268 :hashrepeats nil :lrsmode (quote t) :comparateur (quote compareevents) :name "improvizer" :context nil :continuity 0 :navigationmode (quote continuity) :currentstateidx 0 :prevstateidx -1 :max-continuity 1000 :start-region (list 0 268) :fwsuffix (quote t) :bwsuffix (quote t) :bestsuffixmode nil :useestrada nil :usehindemith nil :refharmgrid nil :harmgridlength 48 :beats/measure 4 :reftempo 536 :currenttranspo 0 :lengthfactorsfromgrid (list 1 100) :besttranspomode (quote t) :firstwithouttranspomode (quote t) :authorizedtranspos (list 0) :randomprefixoccurrencemode (quote t) :tabou-mode nil :tabou (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :feature nil :hashlabeltranspo (let ((hashtable (make-hash-table))) (loop for key in nil for val in nil do (sethash hashtable key val)) hashtable) :from-file t))