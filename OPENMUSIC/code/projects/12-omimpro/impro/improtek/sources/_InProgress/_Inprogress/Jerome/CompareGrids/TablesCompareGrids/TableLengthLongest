(in-package :om)(let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (listlist 0 0 0 6 5 4 3 2 1 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 1 0 0 1 0 0 0 6 5 4 3 2 1 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 6 5 4 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 6 5 4 3 2 1 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 1 0 0 1 0 0 1 3 2 1 0 0 0 6 5 4 3 2 1 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 9 8 7 6 5 4 3 2 1) (list 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 1 0 0 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 1 0 0 1 0 0 1 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0) (list 5 4 3 3 4 3 3 2 1 3 2 1 5 4 3 3 5 4 3 2 1 3 2 1 5 4 3 3 2 1 3 4 3 3 4 3 5 4 3 3 2 1 3 2 4 3 2 1 5 4 3 3 4 3 3 2 1 3 2 1 5 4 3 3 5 4 3 2 1 3 2 1 5 4 3 3 2 1 3 4 3 3 4 3 5 4 3 3 4 3 3 2 1 3 4 3 5 4 3 3 2 1 3 4 3 3 4 3 5 4 3 3 4 3 3 2 1 3 2 1 5 4 3 3 5 4 5 4 3 3 4 3 2 1 3 2 1 3 2 1 1 3 2 1 5 4 3 3 4 3 3 2 1 3 2 1 5 4 3 3 5 4 3 2 1 3 2 1 5 4 3 3 2 1 3 4 3 3 4 3 5 4 3 3 4 3 4 4 4 3 2 1) (list 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 3 2 1 3 2 3 3 2 1 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 5 4 3 2 1 3 2 1 3 2 1 1 3 2 1 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 7 6 5 4 4 4 3 2 1) (list 9 8 7 6 5 4 3 2 1 5 4 3 8 7 6 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 9 8 7 6 5 4 3 2 1 5 4 4 3 2 1 9 8 7 6 5 4 3 2 1 5 4 3 8 7 6 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 12 11 10 9 8 7 6 5 4 3 2 1 9 8 7 6 5 4 3 2 1 6 5 4 12 11 10 9 8 7 6 5 4 3 2 1 3 2 1 8 7 6 11 10 9 8 7 6 5 4 3 3 2 3 3 2 3 2 1 1 3 2 1 9 8 7 6 5 4 3 2 1 5 4 3 8 7 6 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 3 4 3 3 5 4 3 2 1 3 2 1 3 4 3 6 5 4 3 2 1 3 4 3 3 4 3 3 2 1 6 5 4 6 5 4 3 4 3 3 2 1 3 2 3 3 2 1 3 4 3 3 5 4 3 2 1 3 2 1 3 4 3 6 5 4 3 2 1 3 4 3 3 4 3 3 2 1 6 5 4 6 5 4 3 4 3 3 5 4 3 2 1 6 5 4 3 4 3 3 2 1 6 5 4 6 5 4 3 4 3 3 5 4 3 2 1 3 2 1 3 4 3 6 5 4 3 4 3 5 4 3 2 1 3 2 1 3 2 1 1 3 2 1 3 4 3 3 5 4 3 2 1 3 2 1 3 4 3 6 5 4 3 2 1 3 4 3 3 4 3 3 2 1 6 5 4 6 5 4 3 4 3 3 6 5 4 4 4 3 2 1) (list 6 5 4 3 2 1 0 0 0 0 0 0 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 0 0 0 0 0 0 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 0 0 0 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 0 0 0 0 0 0 6 5 4 3 2 1 6 5 4 3 2 1 2 1 1 2 1 1 2 1 1 3 2 1 6 5 4 3 2 1 0 0 0 0 0 0 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 0 0 0 0 0 0) (list 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1) (list 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 1 0 0 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 1 0 0 1 0 0 3 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0) (list 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 2 1 3 2 1 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 6 5 4 3 2 1 5 4 3 2 1 3 2 1 3 2 1 4 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0) (list 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 3 2 3 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 6 5 4 5 4 3 2 1 3 2 1 3 2 1 1 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 7 6 5 6 5 4 3 2 1) (list 6 5 4 3 5 4 3 2 1 3 2 1 6 5 4 3 4 3 3 2 1 3 4 3 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 3 2 4 3 2 1 6 5 4 3 5 4 3 2 1 3 2 1 6 5 4 3 4 3 3 2 1 3 4 3 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 5 4 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 5 4 3 2 1 5 4 3 6 5 4 3 4 3 6 5 4 3 4 3 2 1 3 2 1 3 2 1 1 3 2 1 6 5 4 3 5 4 3 2 1 3 2 1 6 5 4 3 4 3 3 2 1 3 4 3 6 5 4 3 2 1 3 2 1 3 2 1 6 5 4 3 6 5 6 5 4 3 2 1) (list 6 5 4 5 4 3 3 2 1 3 2 1 6 5 4 3 4 3 3 2 1 3 2 1 6 5 4 3 2 1 3 4 3 3 4 3 6 5 4 3 2 1 3 2 4 3 2 1 6 5 4 5 4 3 3 2 1 3 2 1 6 5 4 3 4 3 3 2 1 3 2 1 6 5 4 3 2 1 3 4 3 3 4 3 6 5 4 5 4 3 3 4 3 3 4 3 6 5 4 3 2 1 3 4 3 3 4 3 6 5 4 5 4 3 3 2 1 3 2 1 6 5 4 3 4 3 6 5 4 3 4 3 2 1 3 2 1 3 2 1 1 3 2 1 6 5 4 5 4 3 3 2 1 3 2 1 6 5 4 3 4 3 3 2 1 3 2 1 6 5 4 3 2 1 3 4 3 3 4 3 6 5 4 5 4 3 4 4 4 3 2 1) (list 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 3 4 3 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 3 2 1 3 2 3 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 3 4 3 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 5 4 3 2 1 3 2 1 3 2 1 1 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 3 4 3 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 9 8 7 6 5 4 3 2 1) (list 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 3 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 3 2 1 3 2 3 3 2 1 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 3 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 5 4 3 6 5 4 3 5 4 6 5 4 3 4 3 2 1 3 2 1 3 2 1 1 3 2 1 6 5 4 6 5 4 6 5 4 3 2 1 6 5 4 3 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 9 8 7 6 5 4 3 2 1) (list 2 4 3 2 4 3 2 2 1 2 2 1 2 4 3 2 4 3 2 2 1 2 4 3 2 4 3 2 2 1 2 2 1 2 2 1 2 4 3 2 2 1 3 2 3 3 2 1 2 4 3 2 4 3 2 2 1 2 2 1 2 4 3 2 4 3 2 2 1 2 4 3 2 4 3 2 2 1 2 2 1 2 2 1 2 4 3 2 4 3 2 2 1 2 2 1 2 4 3 2 2 1 2 2 1 2 2 1 2 4 3 2 4 3 2 2 1 2 2 1 2 4 3 2 4 3 2 4 3 2 4 3 2 1 3 2 1 3 2 1 3 2 2 1 2 4 3 2 4 3 2 2 1 2 2 1 2 4 3 2 4 3 2 2 1 2 4 3 2 4 3 2 2 1 2 2 1 2 2 1 2 4 3 2 4 3 2 2 2 2 2 1) (list 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 2 1 1 2 1 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 2 1 1 2 1 1 2 1 1 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 6 6 6 5 4 3 2 1 3 3 3 3 3 3 3 3 3 3 3 3 3 7 6 5 4 3 2 1 3 9 8 7 6 6 6 5 4 3 2 1 3 3 3 3 3 3 3 3 3 3 3 3 3 7 6 5 4 3 2 1 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 9 8 7 6 6 6 5 4 3 2 1 3 3 3 3 3 3 3 3 3 3 3 3 3 7 6 5 4 3 2 1 3 3 2 1) (list 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 16 15 14 13 12 11 10 9 16 15 14 13 12 11 10 9 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 3 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 3 4 3 2 1 4 3 2 1 4 4 4 4 4 3 6 5 4 4 4 4 4 3 6 5 4 4 4 4 4 3 6 5 4 4 4 4 4 3 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 3 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 8 7 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 4 3 2 1 4 4 4 4 8 7 6 5 4 4 4 4 8 7 6 5 4 4 4 4 8 7 6 5 4 4 4 4 8 7 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 4 3 2 1) (list 6 6 6 5 4 3 2 1 6 6 6 6 6 6 6 6 6 6 6 5 4 7 6 5 4 3 2 1 4 9 8 7 6 6 6 5 4 3 2 1 6 6 6 6 6 6 6 6 6 6 6 5 4 7 6 5 4 3 2 1 4 3 2 1 6 6 6 5 4 9 8 7 6 6 6 5 4 9 8 7 6 6 6 5 4 9 8 7 6 6 6 5 4 9 8 7 6 6 6 5 4 3 2 1 6 6 6 6 6 6 6 6 6 6 6 5 4 7 6 5 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 3 2 1 4 3 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 3 2 1 4 3 2 1) (list 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 16 15 14 13 12 11 10 9 16 15 14 13 12 11 10 9 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1) (list 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0) (list 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 10 9 8 7 6 5 4 3 10 9 8 7 6 5 4 3 10 9 8 7 6 5 4 3 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1) (list 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1) (list 8 7 6 5 4 3 2 1 8 8 8 8 8 8 8 8 8 7 6 5 8 7 6 5 4 3 2 1 8 7 6 5 8 7 6 5 4 3 2 1 8 8 8 8 8 8 8 8 8 7 6 5 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 8 7 6 5 8 7 6 5 4 3 2 1 8 8 8 8 8 8 8 8 8 7 6 5 8 7 6 5 4 3 2 1 4 3 2 1) (list 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 3 2 1 4 3 6 5 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 6 5 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 6 5 4 3 4 3 2 1 6 5 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 6 5 4 3 4 3 2 1 4 3 2 1 4 4 4 4 4 3 6 5 4 4 4 4 4 3 6 5 4 4 4 4 4 3 6 5 4 4 4 4 6 5 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 6 5 4 3 4 3 2 1 4 3 2 1) (list 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 12 11 10 9 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 4 3 2 1) (list 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 12 11 10 9 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 4 3 2 1) (list 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 3 2 2 2 1 2 2 2 1 2 2 2 2 2 2 4 3 2 2 2 2 2 2 4 3 2 2 2 2 2 2 4 3 2 2 2 2 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 3 2 2 2 1 2 2 2 1) (list 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 3 2 1 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1) (list 8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 6 5 4 3 2 1 4 4 4 4 4 3 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 6 5 4 4 4 4 4 3 2 1) (list 8 7 6 5 4 3 2 1 4 4 4 4 8 7 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 8 7 6 5 4 4 4 4 4 3 2 1) (list 4 7 6 5 4 3 2 1 6 6 6 5 4 9 8 7 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 6 6 6 5 4 9 8 7 6 6 6 5 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1) (list 12 11 10 9 12 11 10 9 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 16 15 14 13 12 11 10 9 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 6 5 4 3 4 3 2 1 10 9 8 7 6 5 4 3 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 10 9 8 7 6 5 4 3 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1) (list 4 3 6 5 4 3 2 1 4 4 4 4 4 3 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 6 5 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1) (list 2 2 4 3 2 2 2 1 2 2 2 2 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 4 3 2 2 2 2 2 2 2 1) (list 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 4 3 2 1 4 3 4 3 2 1 4 3 4 3 2 1 3 3 2 1 4 3 2 1 2 1 2 1 4 3 5 4 3 3 3 5 4 3 4 3 2 1 4 4 4 3 2 1) (list 4 3 2 1 0 0 4 3 2 1 0 0 0 0 6 5 4 3 2 1 0 0 2 1 2 1 0 0 0 0 2 1 0 0 0 0 0 0 4 3 2 1 2 1 0 0 2 1) (list 0 0 0 0 0 0 2 1 0 0 0 0 0 0 6 5 4 3 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1) (list 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 2 1 4 3 4 3 6 5 4 3 2 1 4 3 2 1 2 1 2 1 4 3 8 7 6 5 6 5 4 3 4 3 2 1 4 3 4 3 2 1) (list 6 5 4 3 4 3 4 3 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 8 7 6 5 4 5 4 3 4 3 2 1 5 4 4 3 2 1) (list 4 3 2 1 6 5 4 3 2 1 4 3 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 4 3 6 5 4 4 4 3 6 5 4 3 2 1 4 3 4 3 2 1) (list 0 0 0 0 4 3 2 1 0 0 2 1 4 3 6 5 4 3 2 1 4 3 2 1 0 0 2 1 4 3 2 1 4 4 6 5 4 3 2 1 0 0 2 1 4 3 2 1) (list 1 1 1 1 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0) (list 0 0 0 0 0 0 2 1 0 0 0 0 0 0 4 3 4 3 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1) (list 0 0 0 0 2 1 2 1 0 0 2 1 2 1 2 1 4 3 2 1 2 1 2 1 0 0 2 1 2 1 8 7 6 5 4 3 2 1 2 1 0 0 4 3 2 1 2 1) (list 4 3 2 1 4 3 4 3 2 1 2 1 4 3 2 1 6 5 4 3 4 3 2 1 2 1 10 9 8 7 8 7 8 7 6 5 4 3 4 3 2 1 4 3 4 3 2 1) (list 6 5 4 3 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 6 5 4 3 4 4 6 5 6 5 4 3 2 1 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 2 1 6 5 12 11 10 9 8 7 6 5 4 3 2 1 2 1 2 1 6 5 4 3 4 4 6 5 4 3 4 3 2 1 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 2 1 4 3 4 3 2 1 4 3 2 1 4 3 2 1 2 1 4 3 4 3 8 7 6 5 6 5 4 3 4 3 2 1 4 3 4 3 2 1) (list 6 5 4 3 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 4 6 5 6 5 4 3 2 1 4 3 4 3 2 1) (list 2 2 2 1 4 3 4 3 2 1 2 1 4 3 4 3 2 2 2 1 4 3 2 1 2 1 2 1 4 3 4 3 2 2 2 2 4 3 4 3 2 1 4 3 4 3 2 1) (list 0 0 0 0 2 1 2 1 0 0 2 1 2 1 2 1 4 3 2 1 2 1 2 1 0 0 2 1 2 1 2 1 6 5 4 3 2 1 2 1 0 0 2 1 2 1 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 3 2 1 3 6 5 4 3 3 3 3 3 6 5 4 3 3 2 1 3 6 5 4 3 3 3 3 3 6 5 4 3 3 2 1 3 6 5 4 3 3 3 3 3 6 5 4 3 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 6 5 4 3 7 6 5 4 6 5 4 4 3 2 1 3 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 6 5 4 3 7 6 5 4 6 5 4 4 3 2 1 3 3 2 1 3 6 5 4 3 3 3 3 3 3 2 1) (list 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0) (list 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0) (list 4 3 2 1 4 3 8 7 6 6 6 5 4 3 4 3 4 3 2 1 4 3 8 7 6 6 6 5 4 3 4 3 4 3 2 1 4 3 8 7 6 6 6 5 4 3 4 3 4 3 2 1 4 3 6 5 4 3 2 1 4 3 6 5 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 4 3 6 5 4 3 6 5 4 3 2 1 4 3 6 5 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 4 3 6 5 4 3 8 7 6 6 6 5 4 3 2 1) (list 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 6 5 4 4 9 8 7 6 6 9 8 7 6 5 4 4 6 5 4 4 9 8 7 6 6 9 8 7 6 5 4 4 6 5 4 4 9 8 7 6 6 9 8 7 6 5 4 4 6 5 4 4 7 6 5 4 3 2 1 4 7 6 5 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1 4 7 6 5 4 7 6 5 4 3 2 1 4 7 6 5 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1 4 7 6 5 4 9 8 7 6 6 6 5 4 3 2 1) (list 12 11 10 9 8 7 6 5 4 4 4 4 8 7 6 5 12 11 10 9 8 7 6 5 4 4 4 4 8 7 6 5 12 11 10 9 8 7 6 5 4 4 4 4 8 7 6 5 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 6 5 4 3 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 6 5 4 3 4 3 2 1 0 0 0 0 0 0 0 0) (list 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 8 7 6 5 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 8 7 6 5 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 4 3 4 4 4 4 4 3 4 3 4 3 2 1 4 3 4 3 4 4 4 4 4 3 4 3 4 3 2 1 4 3 4 3 4 4 4 4 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 10 9 8 7 6 5 4 3 4 3 2 1 4 3 2 1 4 3 6 5 4 3 4 3 4 3 2 1 4 3 4 3 10 9 8 7 6 5 4 3 4 3 2 1 4 3 2 1 4 3 6 5 4 3 4 3 4 4 4 4 4 3 2 1) (list 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 6 5 4 4 4 4 8 7 6 5 4 3 2 1 4 3 6 5 4 4 4 4 8 7 6 5 4 3 2 1 4 3 6 5 4 4 4 4 8 7 6 5 4 3 2 1 4 3 6 5 4 3 2 1 4 3 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 4 4 4 4 4 3 2 1) (list 2 2 2 1 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 1 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 1 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 1 2 2 4 3 2 2 2 1 2 2 4 3 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 2 2 4 3 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 1) (list 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 6 5 4 3 2 1 6 5 4 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 3 2 1 11 10 9 8 7 6 5 4 4 3 2 4 5 4 3 5 4 4 3 3 2 6 5 4 6 5 4 3 2 1 6 5 4 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 3 2 1 11 10 9 8 7 6 5 4 4 3 2 4 5 4 3 5 4 4 6 5 4 3 2 1 6 5 4 3 3 3 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 3 3 2 3 2 1 3 3 3 3 2 1) (list 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 9 8 7 6 5 4 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 4 3 2 1 0 0 1 0 0 0 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 9 8 7 6 5 4 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 4 3 2 1 0 0 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 9 8 7 6 5 4 3 2 1 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 9 8 7 6 5 4 3 2 1) (list 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 1 0 0 0 0 0 1 0 0 0 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 9 8 7 6 5 4 3 2 1) (list 3 4 3 3 2 1 3 5 4 3 4 3 5 4 3 3 4 3 4 4 6 5 4 3 3 2 1 3 5 4 5 4 3 3 5 4 3 2 3 3 2 1 3 2 4 3 2 1 3 5 4 3 4 3 3 2 1 3 5 4 3 4 3 5 4 3 3 4 3 4 4 6 5 4 3 3 2 1 3 5 4 5 4 3 3 5 4 3 2 3 3 2 1 3 2 4 3 4 3 3 2 1 3 8 7 6 5 4 3 4 3 5 4 3 3 4 3 4 4 6 5 4 3 3 2 1 3 5 4 3 2 1 3 5 4 3 2 1 3 6 5 4 4 4 3 2 1) (list 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 7 6 5 4 4 4 3 2 1 6 5 4 6 5 4 6 5 4 5 4 3 3 2 4 3 2 1 3 2 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 7 6 5 4 4 4 3 2 1 6 5 4 6 5 4 6 5 4 5 4 3 3 2 4 3 2 1 3 2 4 6 5 4 6 5 4 9 8 7 9 8 7 6 5 4 6 5 4 7 6 5 4 4 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 7 6 5 4 4 4 3 2 1) (list 147 146 145 144 143 142 141 140 139 138 137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 6 5 4 6 5 4 6 5 4 6 5 4 3 4 3 3 6 5 4 4 4 3 2 1 6 5 4 6 5 4 3 4 3 5 4 3 3 2 4 3 2 1 3 2 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 6 5 4 3 4 3 3 6 5 4 4 4 3 2 1 6 5 4 6 5 4 3 4 3 5 4 3 3 2 4 3 2 1 3 2 4 6 5 4 6 5 4 7 6 5 4 4 7 6 5 4 3 4 3 3 6 5 4 4 4 3 2 1 6 5 4 6 5 4 6 5 4 6 5 4 3 2 1 3 2 1 4 4 4 3 2 1) (list 3 2 1 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 4 4 4 3 2 1 6 5 4 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 9 8 7 6 5 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 1 0 0 0 0 0 1 0 0 0 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 1 0 0 0 0 0 1 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 0 0 0 0 0 0 3 2 1 0 0 0 3 2 1 0 0 0 5 4 3 6 5 4 3 2 1) (list 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 6 5 4 3 2 1 5 4 3 2 1 1 0 0 0 2 1 4 3 2 1 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 6 5 4 3 2 1 5 4 3 2 1 1 0 0 0 2 1 4 3 2 1 3 2 1 9 8 7 6 5 4 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 6 5 4 3 2 1 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1) (list 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 7 6 5 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 5 4 3 3 2 4 3 2 1 3 2 4 3 2 1 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 7 6 5 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 5 4 3 3 2 4 3 2 1 3 2 4 3 2 1 3 2 1 9 8 7 6 5 4 3 2 1 6 5 4 7 6 5 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1) (list 3 2 1 3 2 1 3 4 3 3 2 1 6 5 4 3 6 5 6 5 7 6 5 4 3 2 1 3 4 3 6 5 4 3 5 4 3 2 4 3 2 1 3 2 3 3 2 1 3 4 3 3 2 1 3 2 1 3 4 3 3 2 1 6 5 4 3 6 5 6 5 7 6 5 4 3 2 1 3 4 3 6 5 4 3 5 4 3 2 4 3 2 1 3 2 3 3 2 1 3 2 1 3 4 3 4 4 4 3 2 1 6 5 4 3 6 5 6 5 7 6 5 4 3 2 1 3 4 3 3 2 1 3 4 3 3 2 1 3 2 1 4 4 4 3 2 1) (list 3 4 3 3 2 1 3 4 3 3 4 3 6 5 4 5 4 3 4 4 4 3 2 1 3 2 1 3 4 3 6 5 4 3 5 4 3 2 3 3 2 1 3 2 3 3 2 1 3 4 3 3 4 3 3 2 1 3 4 3 3 4 3 6 5 4 5 4 3 4 4 4 3 2 1 3 2 1 3 4 3 6 5 4 3 5 4 3 2 3 3 2 1 3 2 3 3 4 3 3 2 1 3 4 3 4 4 4 3 4 3 6 5 4 5 4 3 4 4 4 3 2 1 3 2 1 3 4 3 3 2 1 3 4 3 3 2 1 3 6 5 4 4 4 3 2 1) (list 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 9 8 7 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 5 4 3 3 2 4 5 4 3 3 2 4 3 2 1 6 5 4 6 5 4 3 2 1 6 5 4 6 5 4 6 5 4 9 8 7 6 5 4 3 2 1 3 2 1 6 5 4 6 5 4 5 4 3 3 2 4 5 4 3 3 2 4 6 5 4 3 2 1 9 8 7 9 8 7 6 5 4 6 5 4 9 8 7 6 5 4 3 2 1 3 2 1 6 5 4 3 2 1 6 5 4 3 2 1 3 2 1 4 4 4 3 2 1) (list 6 5 4 3 2 1 3 5 4 6 5 4 6 5 4 9 8 7 9 8 7 6 5 4 3 2 1 3 5 4 6 5 4 3 4 3 3 2 4 3 2 1 3 2 4 3 2 1 3 5 4 6 5 4 3 2 1 3 5 4 6 5 4 6 5 4 9 8 7 9 8 7 6 5 4 3 2 1 3 5 4 6 5 4 3 4 3 3 2 4 3 2 1 3 2 4 6 5 4 3 2 1 3 6 5 4 4 7 6 5 4 6 5 4 9 8 7 9 8 7 6 5 4 3 2 1 3 5 4 3 2 1 3 5 4 3 2 1 3 2 1 4 4 4 3 2 1) (list 2 2 1 2 2 1 2 4 3 2 2 1 2 4 3 2 4 3 2 2 2 2 2 1 2 2 1 2 4 3 2 4 3 2 4 3 3 2 3 2 2 1 3 2 3 2 2 1 2 4 3 2 2 1 2 2 1 2 4 3 2 2 1 2 4 3 2 4 3 2 2 2 2 2 1 2 2 1 2 4 3 2 4 3 2 4 3 3 2 3 2 2 1 3 2 3 2 2 1 2 2 1 2 4 3 2 2 2 2 2 1 2 4 3 2 4 3 2 2 2 2 2 1 2 2 1 2 4 3 2 2 1 2 4 3 2 2 1 2 4 3 2 2 2 2 2 1) (list 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 2 1 1 0 0 0 2 1 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 2 1 1 0 0 0 2 1 1 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1 3 2 1 3 2 1 0 0 0 0 0 0 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 3 2 1 6 5 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 4 3 2 1 3 5 4 3 2 1 4 3 4 3 6 5 4 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 6 5 4 3 3 2 1) (list 4 3 2 1 4 3 2 1 0 0 2 1 0 0 6 5 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0) (list 0 0 0 0 4 3 2 1 0 0 2 1 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0) (list 4 3 2 1 4 3 4 3 2 1 2 1 6 5 4 3 4 3 2 1 4 3 6 5 4 3 2 1 4 3 6 5 4 3 4 3 4 3 2 1) (list 4 3 2 1 6 5 4 3 2 1 2 1 4 3 6 5 4 3 2 1 8 7 6 5 12 11 10 9 8 7 6 5 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 5 4 3 2 1 2 1 4 3 6 5 4 3 2 1 4 7 6 5 4 6 5 4 4 7 6 5 7 6 5 4 4 3 2 1) (list 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 0 0 0 0 4 3 2 1 2 1 2 1 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1) (list 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 4 3 2 1 0 0 2 1 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0) (list 0 0 0 0 6 5 4 3 2 1 2 1 2 1 2 1 0 0 0 0 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1) (list 4 3 2 1 6 5 4 3 4 3 4 3 4 3 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1) (list 4 3 2 1 4 3 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 2 1) (list 4 3 2 1 4 3 4 3 2 1 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 4 3 4 3 2 1) (list 10 9 8 7 10 9 8 7 6 5 4 3 4 3 6 5 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 2 1 2 1 8 7 6 5 4 3 2 1 4 3 6 5 4 3 2 1 4 3 10 9 8 7 6 5 4 3 2 1) (list 2 2 2 1 2 2 4 3 2 1 6 5 4 3 4 3 2 2 2 1 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 1 2 2 2 1) (list 0 0 0 0 4 3 2 1 2 1 2 1 2 1 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 6 5 4 3 3 2 1 3 3 2 1 3 3 2 1) (list 16 15 14 13 12 11 10 9 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1) (list 8 8 8 8 8 8 8 8 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 6 5 4 3 4 3 6 5 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 8 7 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 8 7 6 5 4 3 2 1 4 3 2 1) (list 6 6 6 6 6 6 6 6 6 6 6 5 4 9 8 7 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1) (list 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 6 5 4 3 4 3 2 1 4 3 2 1) (list 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1) (list 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 3 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 6 5 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1) (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1) (list 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 0 0 0 0 0 0 0 0) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 0 0 0 0 0 0 0 0) (list 8 7 6 5 4 3 2 1) (list 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 1 1 1 1 1 1 1 1) (list 0 0 0 0 0 0 0 0)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 2 1 2 3 2 1 2 1 2 1 2 3 2 1 2 1 2 1 2 3 2 1 2 1 2 1 2 3 2 1 2 1) (list 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 15 14 13 12 11 10 9 10 9 8 7 6 5 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 10 9 8 7 6 5 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 6 5 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 5 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 2 1 4 3 4 3 2 1 2 1 4 3 4 3 2 1 2 1 4 3 4 3 2 1 2 1 4 3 4 3 2 1) (list 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1) (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 3 2 1 4 3 6 5 4 3 2 1 4 3 6 5 4 3 2 1 4 3 6 5 4 3 2 1 4 3 4 3 2 1) (list 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 2 4 3 6 5 4 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 2 4 3 6 5 4 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 2 1 2 4 3 6 5 4 3 3 3 3 3 3 2 1) (list 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 2 1 2 1 4 3 2 1 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 2 1 2 1 4 3 2 1 0 0 0 0 0 0 0 0) (list 6 6 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 8 7 6 6 6 6 6 6 6 6 6 6 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 8 7 6 6 6 5 4 3 2 1 4 4 4 4 4 3 2 1 6 6 6 5 4 3 2 1 2 1 2 1 4 3 8 7 6 6 6 5 4 3 2 1) (list 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 12 11 10 9 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 2 1 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 4 3 2 1 4 9 8 7 6 6 6 6 6 6 6 6 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 4 3 2 1 4 9 8 7 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 2 1 2 1 4 9 8 7 6 6 6 5 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 8 7 6 5 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 8 7 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 2 1 2 1 8 7 6 5 4 4 4 4 4 3 2 1) (list 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 12 11 10 9 8 7 6 5 4 4 4 4 4 3 2 1 2 1 2 1 4 3 2 1 4 4 4 4 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 8 7 6 5 4 3 4 3 4 3 4 3 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 4 3 4 3 4 3 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 4 3 4 3 4 3 2 1 0 0 0 0 0 0 0 0) (list 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 16 15 14 13 12 12 12 12 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 2 1 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 2 1 2 1 4 3 4 3 4 4 4 4 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 2 1 2 1 4 3 4 3 4 4 4 4 4 3 2 1) (list 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 12 11 10 9 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 2 1 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 6 5 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 2 1 4 3 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 2 1 2 1 4 3 6 5 4 4 4 4 4 3 2 1) (list 2 2 2 2 2 2 4 3 2 2 2 2 2 2 4 3 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 3 2 2 2 2 2 2 4 3 2 2 4 3 2 2 4 3 2 2 2 2 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 2 2 2 4 3 4 3 4 3 2 2 4 3 2 2 2 2 2 2 2 1) (list 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 2 1 2 1 4 3 2 1 8 7 6 5 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 6 5 4 3 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 3 2 1 4 3 5 4 3 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 3 2 1 4 3 5 4 3 3 2 1 3 6 5 4 3 6 5 4 3 3 3 3 3 3 3 3 3 6 5 4 3 7 6 5 4 3 2 1 4 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 3 2 1 3 6 5 4 3 3 2 1 4 3 5 4 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 6 5 4 3 3 3 3 3 6 5 4 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 3 3 3 3 3 3 2 1 6 6 6 5 4 3 2 1 3 6 5 4 3 3 2 1) (list 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 2 1 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1) (list 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 10 9 8 7 6 5 4 3 2 1 6 5 4 3 4 3 8 7 6 6 6 6 6 6 8 7 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 10 9 8 7 6 5 4 3 4 3 6 6 6 5 4 3 2 1 4 4 4 4 4 3 2 1 6 6 8 7 6 5 4 3 4 4 4 4 6 5 4 3 6 6 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 6 5 4 3 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 8 7 6 5 12 11 10 9 8 8 8 8 8 7 6 5 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 8 7 6 5 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 6 5 4 4 9 8 7 6 6 6 6 6 6 6 5 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 6 6 6 5 4 6 5 4 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 6 6 6 5 4 3 2 1 4 6 5 4 4 3 2 1) (list 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 6 5 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 6 5 4 3 2 1 4 3 4 3 8 7 6 5 4 4 4 4 4 4 4 4 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 6 5 4 3 2 1 4 4 4 4 4 3 4 3 4 4 4 4 4 3 4 3 4 4 4 4 4 3 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 3 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 3 4 3 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 4 4 4 8 7 6 5 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0) (list 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 6 5 4 3 2 1 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 0 0 0 0 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1) (listlist 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 6 5 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 6 5 4 3 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 4 4 4 4 8 7 6 5 4 3 10 9 8 7 6 5 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 6 5 4 3 8 7 6 5 4 4 4 4 4 3 4 3 4 4 4 4 4 3 4 3 4 4 4 4 8 7 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 4 3 4 4 4 4 4 3 2 1 8 7 6 5 6 5 4 3 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 4 4 4 4 10 9 8 7 6 5 4 3 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 8 7 6 5 4 4 4 4 6 5 4 3 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 6 5 4 3 8 7 6 5 4 3 2 1) (list 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 4 3 6 5 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 4 3 6 5 4 3 2 1 16 15 14 13 12 11 10 9 8 8 8 8 8 7 6 5 12 11 10 9 8 7 6 5 6 5 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 4 3 6 5 8 7 6 5 8 7 6 5 4 3 4 3 4 4 4 4 4 3 4 3 8 7 6 5 8 7 6 5 4 4 4 4 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 4 3 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 6 5 4 4 4 4 4 4 4 4 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 8 7 6 5 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 4 4 4 4 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 1 4 3 4 3 2 2 2 1 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 1 4 3 4 3 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 2 2 2 4 3 2 2 4 3 2 2 2 1 4 3 4 3 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 1 2 2 4 3 2 2 2 1 4 3 4 3 2 2 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 4 3 2 2 2 2 2 2 4 3 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 1 2 2 4 3 2 2 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 0 0 0 0 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 4 3 2 1 4 3 6 5 4 3 2 1 3 6 5 4 3 3 2 1 4 3 2 1 4 3 6 5 4 5 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 5 4 3 4 3 4 3 2 1 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 4 4 4 3 6 5 4 3 2 1 3 3 2 1 3 3 2 1 3 3 2 1 2 1 2 1 2 1 2 1 6 6 6 5 4 3 2 1) (list 0 0 2 1 0 0 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 8 7 6 5 4 3 2 1) (list 0 0 2 1 0 0 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 4 3 2 1 6 5 4 3 4 3 2 1 6 5 4 3 4 3 2 1 4 3 2 1 6 5 4 3 4 3 2 1 6 5 4 3 2 1 2 1 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 2 1 6 5 4 3 2 1 2 1 6 5 4 3 4 3 2 1 4 3 2 1 6 5 6 5 6 5 4 3 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 6 5 4 3 2 1 2 1 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 4 3 2 1 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 4 3 2 1 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 6 5 4 3 2 1 4 6 5 4 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 4 3 2 1 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 4 3 2 1 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 5 4 4 3 6 5 7 6 5 4 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 6 6 6 5 4 3 2 1) (list 4 3 2 1 8 7 6 5 4 3 2 1 4 3 4 3 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 4 3 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 2 1 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 2 1 2 1 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 2 1 2 1 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 2 1 2 1 2 1 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1) (list 0 0 2 1 0 0 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 2 1 2 1 2 1 2 1 0 0 0 0 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 4 3 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 4 3 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 4 3 2 1 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 2 1 2 1 2 1 0 0 0 0 0 0 0 0) (list 4 3 2 1 4 3 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 6 5 4 3 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 6 5 4 3 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 6 5 4 3 4 3 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 2 1 4 3 2 1 2 1 8 7 6 5 4 3 2 1) (list 156 155 154 153 152 151 150 149 148 147 146 145 144 143 142 141 140 139 138 137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 4 3 4 3 2 1 6 5 4 3 2 1 2 1 4 3 4 3 4 3 2 1 8 7 6 5 4 3 2 1 4 3 4 3 8 7 6 5 8 7 6 5 4 3 2 1 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 4 3 4 3 2 1 6 5 4 3 2 1 2 1 4 3 4 3 4 3 2 1 8 7 6 5 8 7 6 5 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 4 4 4 4 3 2 1) (list 4 3 2 1 4 3 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 8 7 6 5 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 6 5 4 3 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 8 7 6 5 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 4 3 4 3 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 2 1 4 3 2 1 2 1 8 7 6 5 4 3 2 1) (list 4 3 2 1 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 8 7 6 5 6 5 4 3 2 1 2 1 8 7 6 5 6 5 4 3 4 3 2 1 4 3 2 1 8 7 10 9 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 8 7 6 5 6 5 4 3 2 1 2 1 8 7 6 5 6 5 4 3 4 3 2 1 6 5 4 3 8 7 6 5 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 8 7 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 2 2 2 1 2 2 4 3 2 2 2 1 4 3 2 1 4 3 4 3 2 2 2 1 4 3 4 3 2 1 6 5 4 3 4 3 2 2 2 1 4 3 2 1 4 3 2 1 4 3 4 3 2 2 2 1 4 3 2 1 4 3 2 1 4 3 4 3 2 2 2 1 4 3 2 1 4 3 2 1 4 3 4 3 2 2 2 1 4 3 4 3 2 1 6 5 4 3 4 3 2 2 2 1 4 3 2 1 4 3 4 3 4 3 4 3 2 2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2 1 2 1 2 1 2 1 2 2 2 2 2 2 2 1) (list 2 1 2 1 2 1 2 1 0 0 0 0 4 3 2 1 6 5 4 3 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 4 3 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 2 1 2 1 2 1 0 0 0 0 0 0 0 0)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 4 3 2 1 4 3 4 4 4 3 4 4 4 3 2 1 3 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 3 6 5 4 3 5 4 3 4 3 4 3 4 3 2 1) (list 4 3 2 1 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 6 5 4 3 2 1 0 0 0 0 2 1) (list 0 0 0 0 0 0 2 1 0 0 2 1 0 0 6 5 4 3 2 1 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1) (list 4 3 2 1 6 5 6 5 6 5 6 5 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 4 3 2 1 6 5 4 3 2 1) (list 4 3 2 1 4 3 4 3 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 10 9 8 7 6 5 4 3 2 1 4 3 4 3 2 1) (list 4 3 2 1 4 3 5 4 4 3 5 4 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 6 5 4 4 5 4 3 2 1 4 3 4 3 2 1) (list 4 3 2 1 4 3 4 3 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 4 3 4 3 4 3 2 1 4 3 4 3 2 1) (list 0 0 0 0 4 3 2 1 4 3 2 1 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 0 0 2 1 4 3 2 1) (list 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0) (list 0 0 0 0 0 0 2 1 0 0 2 1 0 0 4 3 4 3 2 1 0 0 2 1 0 0 2 1 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1) (list 0 0 0 0 2 1 4 3 2 1 4 3 2 1 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 4 3 2 1 0 0 2 1 2 1 2 1) (list 8 7 6 5 6 5 4 3 6 5 4 3 4 3 2 1 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 10 9 8 7 6 5 4 3 2 1 2 1 4 3 2 1) (list 8 7 6 5 8 7 6 5 8 7 6 5 4 3 2 1 4 3 2 1 8 7 6 5 8 7 6 5 6 5 4 3 8 7 6 5 4 3 4 3 2 1 2 1 4 3 2 1) (list 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 6 5 4 3 4 3 4 3 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 10 9 8 7 6 5 4 3 2 1 4 3 4 3 2 1) (list 8 7 6 5 6 5 4 3 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 10 9 8 7 6 5 4 3 2 1 4 3 4 3 2 1) (list 2 2 2 1 4 3 4 3 4 3 4 3 4 3 4 3 2 2 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 2 4 3 2 2 4 3 2 1 2 1 4 3 2 1) (list 0 0 0 0 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 4 3 2 1 0 0 2 1 2 1 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 6 5 4 3 7 6 5 4 6 5 4 4 6 5 4 3 6 5 4 3 6 5 4 3 3 3 3 3 6 5 4 3 6 5 4 3 7 6 5 4 6 5 4 4 6 5 4 3 6 5 4 3 6 5 4 3 3 3 3 3 3 2 1 3 6 5 4 3 6 5 4 3 3 3 3 3 6 5 4 3 6 5 4 3 9 8 7 6 6 6 5 4 3 2 1 3 6 5 4 3 5 4 3 2 1 4 3 2 1 2 1 4 3 2 1 3 6 5 4 3 3 3 3 3 3 2 1) (list 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 0 0 2 1 0 0 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0) (list 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 2 1 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0) (list 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 6 5 4 3 4 3 8 7 6 6 6 5 4 3 4 3 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 6 5 4 3 4 3 8 7 6 6 6 5 4 3 4 3 6 5 4 3 4 3 8 7 6 6 6 5 4 3 4 3 6 5 4 3 4 3 4 3 4 4 4 4 4 3 2 1 6 5 4 3 4 3 4 3 2 1 2 1 2 1 2 1 4 3 2 1 4 3 8 7 6 6 6 5 4 3 2 1) (list 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 12 11 10 9 8 7 6 5 4 4 4 4 4 3 2 1 8 7 6 5 6 5 4 3 2 1 2 1 2 1 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 6 5 4 4 7 6 5 4 3 2 1 4 5 4 3 4 6 5 4 4 9 8 7 6 6 9 8 7 6 5 4 4 6 5 4 4 7 6 5 4 3 2 1 4 5 4 3 4 6 5 4 4 9 8 7 6 6 6 5 4 3 2 1 4 6 5 4 4 9 8 7 6 6 9 8 7 6 5 4 4 6 5 4 4 9 8 7 6 6 6 5 4 3 2 1 4 6 5 4 4 5 4 3 2 1 2 1 2 1 2 1 4 3 2 1 4 9 8 7 6 6 6 5 4 3 2 1) (list 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 4 3 8 7 6 5 4 4 4 4 8 7 6 5 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 4 3 8 7 6 5 4 4 4 4 4 3 2 1 4 3 4 3 8 7 6 5 4 4 4 4 8 7 6 5 4 3 4 3 4 3 6 5 4 4 4 4 4 3 2 1 4 3 4 3 10 9 8 7 6 5 4 3 4 3 2 1 12 11 10 9 8 7 6 5 4 4 4 4 4 3 2 1) (list 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 4 4 4 4 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 2 1 2 1 2 1 2 1 0 0 0 0 4 3 2 1 4 4 4 4 4 3 2 1) (list 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 2 1 0 0 2 1 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0) (list 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 6 5 4 3 2 1 2 1 2 1 2 1 0 0 0 0 12 11 10 9 8 7 6 5 4 3 2 1) (list 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 16 15 14 13 12 11 10 9 10 9 8 7 6 5 4 3 4 3 4 3 4 3 6 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1) (list 8 7 6 5 4 3 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 4 3 2 1 8 7 6 5 4 3 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 8 7 6 5 8 7 6 5 4 3 4 3 4 4 4 4 4 3 2 1 8 7 6 5 4 3 6 5 8 7 6 5 6 5 4 3 8 7 6 5 4 3 8 7 6 5 4 3 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1) (list 10 9 8 7 6 5 4 3 4 3 2 1 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 4 3 4 3 10 9 8 7 6 5 4 3 4 3 2 1 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 4 3 2 1 8 7 6 5 4 3 4 3 4 4 4 4 4 3 4 3 10 9 8 7 6 5 4 3 4 4 4 4 6 5 4 3 8 7 6 5 4 3 4 3 2 1 2 1 2 1 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1) (list 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 6 5 4 4 4 4 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 6 5 4 4 4 4 4 3 2 1 8 7 6 5 4 3 6 5 4 4 4 4 16 15 14 13 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 4 3 2 1 2 1 2 1 2 1 4 3 2 1 4 3 6 5 4 4 4 4 4 3 2 1) (list 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 1 2 2 4 3 2 2 4 3 2 1 4 3 2 1 2 1 2 2 2 1 2 2 4 3 2 2 2 2 2 2 2 1) (list 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 0 0 0 0 4 3 2 1 8 7 6 5 4 3 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 6 5 4 3 6 5 4 3 7 6 5 4 6 5 4 4 5 4 3 4 3 8 7 6 6 6 5 4 3 2 1 3 6 5 4 3 6 5 4 3 7 6 5 4 6 5 4 4 5 4 3 4 3 8 7 6 6 6 5 4 3 2 1 3 6 5 4 3 9 8 7 6 6 6 5 4 3 2 1 3 6 5 4 3 7 6 5 4 3 2 1 4 3 5 4 3 6 5 4 3 6 5 4 3 7 6 5 4 6 5 4 4 3 2 1 3 3 2 1 3 3 2 1 3 3 2 1 3 6 5 4 3 7 6 5 4 3 2 1 4 3 2 1) (list 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 0 0 10 9 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 0 0 10 9 8 7 6 5 4 3 2 1 0 0 0 0 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 8 7 6 5 4 3 2 1 0 0 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 2 1) (list 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1) (list 4 3 4 3 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 6 5 4 3 4 4 4 4 4 3 2 1 4 3 4 3 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 6 5 4 3 4 4 4 4 6 5 4 3 6 5 4 3 4 3 4 3 4 4 4 4 4 3 2 1 6 5 4 3 4 3 4 3 4 3 2 1 8 7 6 5 4 3 4 3 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 6 5 4 3 4 3 4 3 4 3 2 1 4 3 2 1) (list 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 6 5 4 4 4 4 4 3 2 1 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 6 5 4 4 4 4 4 3 2 1 12 11 10 9 8 7 6 5 4 4 4 4 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 6 5 8 7 6 5 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1) (list 7 6 5 4 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1 4 3 8 7 6 6 6 5 4 3 2 1 7 6 5 4 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1 4 3 8 7 6 6 9 8 7 6 5 4 4 6 5 4 4 9 8 7 6 6 6 5 4 3 2 1 4 6 5 4 4 7 6 5 4 3 2 1 4 3 6 5 7 6 5 4 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 6 5 4 4 7 6 5 4 3 2 1 4 3 2 1) (list 8 7 6 5 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 4 4 4 4 3 2 1 8 7 6 5 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 8 7 6 5 4 4 4 4 4 3 2 1 4 3 4 3 4 3 6 5 4 4 4 4 4 3 2 1 4 3 4 3 4 3 6 5 4 3 2 1 4 3 10 9 8 7 6 5 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 4 3 4 3 6 5 4 3 2 1 4 3 2 1) (list 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 2 1 0 0 0 0 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 0 0 0 0) (list 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4 3 2 1 0 0 0 0 0 0 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 2 1 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 2 1 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 0 0 0 0 2 1 6 5 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 2 1 2 1) (list 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 8 7 6 5 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 6 5 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 16 15 14 13 12 11 10 9 12 11 10 9 8 7 6 5 4 3 2 1 8 7 6 5 4 3 2 1 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 3 2 1 8 7 6 5 4 3 6 5 4 3 2 1 8 7 6 5 8 7 6 5 8 7 6 5 6 5 4 3 4 3 2 1 8 7 6 5 4 3 6 5 4 3 2 1 8 7 6 5 8 7 6 5 8 7 6 5 8 7 6 5 8 7 6 5 4 3 6 5 8 7 6 5 6 5 4 3 8 7 6 5 4 3 6 5 4 3 2 1 6 5 4 3 4 3 2 1 8 7 6 5 4 3 6 5 4 3 2 1 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 8 7 6 5 4 3 10 9 8 7 6 5 4 3 2 1) (list 4 3 4 3 10 9 8 7 6 5 4 3 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 4 3 4 3 10 9 8 7 6 5 4 3 4 3 2 1 4 3 2 1 4 3 4 3 4 4 4 4 4 3 2 1 10 9 8 7 6 5 4 3 4 4 4 4 6 5 4 3 10 9 8 7 6 5 4 3 4 3 2 1 6 5 4 3 4 3 4 3 10 9 8 7 6 5 4 3 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 10 9 8 7 6 5 4 3 8 7 6 5 4 3 2 1) (list 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 10 9 8 7 6 5 4 3 2 1 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 10 9 8 7 6 5 4 3 2 1 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 12 11 10 9 8 7 6 5 4 3 2 1 4 3 6 5 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 12 11 10 9 8 7 6 5 6 5 4 3 4 3 2 1) (list 144 143 142 141 140 139 138 137 136 135 134 133 132 131 130 129 128 127 126 125 124 123 122 121 120 119 118 117 116 115 114 113 112 111 110 109 108 107 106 105 104 103 102 101 100 99 98 97 96 95 94 93 92 91 90 89 88 87 86 85 84 83 82 81 80 79 78 77 76 75 74 73 72 71 70 69 68 67 66 65 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1 4 3 4 3 2 2 2 2 2 2 2 1 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1 4 3 4 3 2 2 2 2 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 2 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 4 3 4 3 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2 2 2 1 2 2 4 3 2 2 4 3 2 2 2 1 4 3 2 1) (list 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 2 1 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 2 1 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 0 0 0 0 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 0 0 0 0 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 4 3 2 1 0 0 0 0 2 1 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 4 3 4 3 2 1 2 1 2 1 4 3 2 1 2 1 2 3 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 0 0 2 1 0 0 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 2 1 0 0 2 1 2 1 2 1 2 1 2 1 0 0 2 1 0 0 2 1 4 3 2 1 2 1 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 6 5 4 3 2 1 2 1 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 2 1 0 0 2 1 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 4 3 2 1 2 1 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 2 1) (list 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0) (list 2 1 2 1 0 0 2 1 6 5 4 3 4 3 2 1 0 0 2 1 0 0 4 3 4 3 2 1 2 1 0 0 2 1 4 3 2 1 4 3 2 1 2 1 0 0 2 1) (list 2 1 2 1 0 0 2 1 4 3 2 1 2 1 4 3 4 3 2 1 2 1 2 1 2 1 2 1 2 1 0 0 2 1 4 3 2 1 2 1 2 1 2 1 0 0 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 4 3 4 3 2 1 2 1 4 3 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 6 5 4 3 2 1 2 1 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1 4 3 2 1 4 3 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 4 3 4 3 2 1 2 1 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 2 1 4 3 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1 4 3 2 1 2 1 2 1 4 3 2 1 2 1 2 1 2 1 2 1 2 1 4 3 2 1 2 1) (list 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 2 1 2 1 0 0 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 0 0 2 1 2 1 2 1 2 1 2 1 2 1 0 0 2 1)) do (sethash hashtable key val)) hashtable) (let ((hashtable (make-hash-table :test #'equalp))) (loop for key in (list (make-array 17 :initial-contents (eval-my-list (quote (#\A #\l #\i #\c #\e #\I #\n #\W #\o #\n #\d #\e #\r #\l #\a #\n #\d)))) (make-array 13 :initial-contents (eval-my-list (quote (#\H #\a #\n #\d #\f #\u #\l #\o #\f #\k #\e #\y #\s)))) (make-array 16 :initial-contents (eval-my-list (quote (#\S #\t #\r #\a #\i #\g #\h #\t #\N #\o #\C #\h #\a #\s #\e #\r)))) (make-array 9 :initial-contents (eval-my-list (quote (#\A #\u #\P #\r #\i #\v #\a #\v #\e)))) (make-array 10 :initial-contents (eval-my-list (quote (#\D #\i #\c #\i #\d #\e #\n #\b #\a #\s)))) (make-array 13 :initial-contents (eval-my-list (quote (#\C #\e #\c #\i #\l #\e #\m #\a #\f #\i #\l #\l #\e)))) (make-array 11 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\I #\n #\G #\r #\e #\e #\n)))) (make-array 10 :initial-contents (eval-my-list (quote (#\B #\a #\g #\s #\g #\r #\o #\o #\v #\e)))) (make-array 8 :initial-contents (eval-my-list (quote (#\M #\a #\r #\a #\c #\a #\t #\u)))) (make-array 5 :initial-contents (eval-my-list (quote (#\J #\a #\i #\m #\e)))) (make-array 15 :initial-contents (eval-my-list (quote (#\S #\o #\n #\g #\F #\o #\r #\M #\y #\F #\a #\t #\h #\e #\r)))) (make-array 14 :initial-contents (eval-my-list (quote (#\N #\i #\g #\h #\t #\i #\n #\t #\u #\n #\i #\s #\i #\a)))) (make-array 13 :initial-contents (eval-my-list (quote (#\M #\o #\m #\e #\n #\t #\s #\N #\o #\t #\i #\c #\e)))) (make-array 13 :initial-contents (eval-my-list (quote (#\B #\l #\u #\e #\s #\F #\o #\r #\A #\l #\i #\c #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\A #\u #\t #\u #\m #\n #\l #\e #\a #\v #\e #\s #\D #\o #\M #\i #\n)))) (make-array 18 :initial-contents (eval-my-list (quote (#\A #\l #\l #\t #\h #\e #\t #\h #\i #\n #\g #\s #\y #\o #\u #\a #\r #\e)))) (make-array 17 :initial-contents (eval-my-list (quote (#\G #\o #\o #\d #\b #\y #\e #\p #\o #\r #\k #\p #\i #\e #\h #\a #\t)))) (make-array 15 :initial-contents (eval-my-list (quote (#\C #\a #\n #\t #\e #\l #\o #\p #\e #\I #\s #\l #\a #\n #\d))))) for val in (list (list 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1 3 3 3 3 3 3 3 3 3 3 3 3 3 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 6 6 6 6 6 6 6 6 6 6 6 5 4 3 2 1) (list 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1) (list 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 6 5 4 3 2 1 6 6 6 6 6 6 6 6 6 6 6 5 4 3 2 1 6 6 6 6 6 6 6 6 6 6 6 5 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0) (list 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1) (list 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 12 11 10 9 8 7 6 5 4 3 2 1 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 12 12 12 12 12 11 10 9 8 7 6 5 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 6 5 4 3 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1) (list 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 8 8 8 8 8 8 8 8 8 7 6 5 4 3 2 1) (list 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1 4 4 4 4 4 4 4 4 4 4 4 4 4 3 2 1) (list 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 1) (list 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1)) do (sethash hashtable key val)) hashtable)) do (sethash hashtable key val)) hashtable)