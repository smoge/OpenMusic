; OM File Header - Saved 2014/06/20 1:53:04
; (6.080103 :patc (om-make-point 10 210) (om-make-point 618 26) (om-make-point 1679 951) "" 183 0 "2014/06/20 0:56:35" "2014/06/20 1:53:01")
; End File Header
(in-package :om)(load-lib-for (quote nil))(setf *om-current-persistent* (om-load-patch1 "Improvizator Visualization" (quote ((om-load-boxcall (quote lispfun) "REINIT-CHORD-DISPLAY" (quote reinit-chord-display) (quote nil) (om-make-point 488 880) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STOP-SCENARIO-SWITCHER" (quote stop-scenario-switcher) (quote nil) (om-make-point 571 787) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "START-SCENARIO-SWITCHER" (quote start-scenario-switcher) (quote nil) (om-make-point 420 783) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STOP-ACCOMP-IMPRO" (quote stop-accomp-impro) (quote nil) (om-make-point 549 582) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STOP-SOLO-IMPRO" (quote stop-solo-impro) (quote nil) (om-make-point 561 645) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "STOP-FULL-IMPRO" (quote stop-full-impro) (quote nil) (om-make-point 561 512) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "START-ACCOMP-IMPRO" (quote start-accomp-impro) (quote nil) (om-make-point 409 582) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "START-SOLO-IMPRO" (quote start-solo-impro) (quote nil) (om-make-point 420 643) nil nil nil nil 1) (om-load-boxcall (quote lispfun) "START-FULL-IMPRO" (quote start-full-impro) (quote nil) (om-make-point 421 515) nil nil nil nil 1) (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 6 318) (om-make-point 1650 164) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600 5800 6300 6700) (4800) (4200) (3600) (4100 6700 5700 6300) (4300 5700 6700 6300) (4400) (4500) (4600 5700 6200 6500) (4100) (3400) (5700 4600 6500 6200) (3900) (4100) (4300 6500 6200 5800 5500) (4400) (4500 6000 6700 6300 7200) (4600) (4800) (4900) (6000 7400 6600 7000 5000) (4500) (3800) (4400) (4300 6700 6000 6200) (5500) (5800) (5500) (4800) (7200 5000 6200 6700) (4300 6200 7400 6700 7200) (4300 4400) (3600 5800 6300 6700) (4800) (4200) (3600) (4100 6700 5700 6300) (4300 5700 6700 6300) (4400) (4500) (4600 5700 6200 6500) (4100) (3400) (5700 4600 6500 6200) (3900) (4100) (4300 6500 6200 5800 5500) (4400) (4500 6000 6700 6300 7200) (4600) (4800) (4900) (6000 7400 6600 7000 5000) (4500) (3800) (4400) (4300 6700 6000 6200) (5500) (5800) (5500) (4800) (7200 5000 6200 6700) (4300 6200 7400 6700 7200) (4300 4400) (4500 6300 6700 6000) (4500) (6000 3300 6700 6300 7200) (3300) (3200 7000 6600 7400 6000) (4400) (3900 6000) (4400) (3100 6900 5800 6000 6500) (4300) (3800) (4300) (3100 5800 6000 6900 6500) (4300 4300) (3700 3100) (3700 3500) (3600 6700 6300 5800) (4800) (4200) (3600) (4100 6700 5700 6300) (4300 5700 6700 6300) (4400) (4500) (4600 5700 6500 6200) (4100) (3400) (4600 5700 6500 6200) (5500 3900 5800 6200 6500) (4100) (4300) (3900) (6700 7200 6000 6300 3300) (3400) (6300 6000 6700 7200 3600) (3700) (3800 6000 7000) (6600 5000) (4500 6600 7000 6000) (3800) (6500 5900 4300) (5000) (5800 4200 6400) (4800) (6300 4100 5700) (4800) (5600 4000 6200) (4000 6100) (3900))) :lonset (quote (219 315 660 984 1288 1838 1980 2267 2876 2970 3290 3625 3933 4290 4796 4901 5493 5582 5956 6290 6580 6930 7260 7531 8139 8234 8564 8835 9208 9580 10103 10246 10779 10875 11220 11544 11848 12398 12540 12827 13436 13530 13850 14185 14493 14850 15356 15461 16053 16142 16516 16850 17140 17490 17820 18091 18699 18794 19124 19395 19768 20140 20663 20806 21307 21374 21780 22110 22398 22770 23303 23372 23985 24068 24415 24727 25289 25613 25970 26284 26625 26720 27060 27367 27698 28225 28380 28667 29264 29370 29700 30030 30360 30690 31020 31302 31670 32025 32344 32638 33199 33341 33649 33947 34305 34623 34974 35300 35624 35970 36311 36843 36895 37242)) :ldur (quote ((261 805 817 785) (357) (298) (326) (294 192 192 188) (320 33 37 31) (310) (311) (289 107 58 90) (320) (523) (58 353 48 37) (320) (320) (294 74 37 37 37) (310) (320 320 315 315 113) (342) (310) (278) (219 218 214 218 976) (336) (325) (316) (262 42 31 27) (368) (236) (395) (315) (43 288 43 37) (224 75 80 69 59) (43 272) (261 805 817 785) (357) (298) (326) (294 192 192 188) (320 33 37 31) (310) (311) (289 107 58 90) (320) (523) (58 353 48 37) (320) (320) (294 74 37 37 37) (310) (320 320 315 315 113) (342) (310) (278) (219 218 214 218 976) (336) (325) (316) (262 42 31 27) (368) (236) (395) (315) (43 288 43 37) (224 75 80 69 59) (43 272) (224 70 59 75) (401) (193 224 310 273 321) (342) (320 860 860 822 661) (342) (310 74) (321) (346 1168 1163 1163 1151) (321) (321) (369) (304 49 65 65 58) (38 139) (241 96) (246 95) (273 802 827 816) (368) (303) (326) (294 199 193 188) (331 32 32 28) (293) (294) (304 100 90 53) (310) (559) (346 53 42 38) (801 278 897 913 923) (320) (320) (326) (74 90 37 70 299) (283) (59 42 53 96 316) (373) (298 53 74) (37 933) (299 64 86 48) (310) (70 53 304) (310) (321 279 316) (346) (315 315 315) (353) (320 176 272) (293 70) (310))) :lvel (quote ((63 52 53 67) (68) (46) (52) (44 43 55 38) (36 53 53 55) (27) (32) (40 66 32 28) (34) (39) (63 38 43 24) (27) (31) (42 32 52 42 41) (42) (42 41 34 37 97) (50) (42) (30) (51 53 47 59 43) (40) (28) (36) (44 69 55 60) (44) (13) (44) (39) (44 34 53 34) (44 63 69 52 52) (22 67) (63 52 53 67) (68) (46) (52) (44 43 55 38) (36 53 53 55) (27) (32) (40 66 32 28) (34) (39) (63 38 43 24) (27) (31) (42 32 52 42 41) (42) (42 41 34 37 97) (50) (42) (30) (51 53 47 59 43) (40) (28) (36) (44 69 55 60) (44) (13) (44) (39) (44 34 53 34) (44 63 69 52 52) (22 67) (63 53 59 50) (16) (50 54 42 38 67) (50) (55 64 65 61 42) (55) (38 107) (48) (34 42 40 33 47) (46) (39) (50) (39 64 59 63 59) (50 59) (80 43) (59 56) (63 67 53 52) (68) (46) (52) (44 43 55 38) (36 53 53 55) (27) (32) (40 66 28 32) (34) (39) (38 63 43 24) (41 35 29 35 39) (28) (39) (40) (52 58 52 66 48) (29) (63 52 50 58 39) (38) (44 77 73) (63 52) (45 65 40 52) (48) (72 64 32) (32) (67 46 84) (46) (57 43 69) (44) (52 42 48) (51 77) (27))) :loffset (quote ((-256 0 0 0) (0) (0) (0) (-21 -10 -10 0) (-188 -7 -7 0) (0) (0) (-246 -17 0 0) (0) (0) (-38 -33 -17 0) (0) (0) (-182 -10 0 0 0) (0) (-250 -240 -235 -235 0) (0) (0) (0) (-70 -65 -65 -65 0) (0) (0) (0) (-235 0 0 0) (0) (0) (0) (0) (-10 -10 -10 0) (-213 -15 -15 -4 0) (-74 0) (-256 0 0 0) (0) (0) (0) (-21 -10 -10 0) (-188 -7 -7 0) (0) (0) (-246 -17 0 0) (0) (0) (-38 -33 -17 0) (0) (0) (-182 -10 0 0 0) (0) (-250 -240 -235 -235 0) (0) (0) (0) (-70 -65 -65 -65 0) (0) (0) (0) (-235 0 0 0) (0) (0) (0) (0) (-10 -10 -10 0) (-213 -15 -15 -4 0) (-74 0) (-225 -12 -12 0) (0) (0 0 0 0 0) (0) (-15 -11 -11 0 0) (0) (-203 0) (0) (-256 -11 -6 -6 0) (0) (0) (0) (-278 -6 -6 -6 0) (-203 0) (-230 0) (-262 0) (-245 -6 0 0) (0) (0) (0) (-21 -11 -11 0) (-175 -4 -4 0) (0) (0) (-251 -15 -5 0) (0) (0) (-32 -32 -15 0) (-53 -43 0 0 0) (0) (0) (0) (-10 -10 -10 -10 0) (0) (-10 -4 -4 -4 0) (0) (-230 -6 0) (-111 0) (-11 -11 0 0) (0) (-12 -12 0) (0) (-5 0 0) (0) (0 0 0) (0) (-15 -11 0) (-213 0) (0))) :lchan (quote ((4 4 4 4) (4) (4) (4) (4 4 4 4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4) (4) (4) (4) (4) (4 4 4 4) (4 4 4 4 4) (4 4) (4 4 4 4) (4) (4) (4) (4 4 4 4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4) (4) (4) (4) (4) (4 4 4 4) (4 4 4 4 4) (4 4) (4 4 4 4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4 4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4 4) (4 4) (4 4) (4 4 4 4) (4) (4) (4) (4 4 4 4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4 4 4) (4 4) (4 4 4 4) (4) (4 4 4) (4) (4 4 4) (4) (4 4 4) (4) (4 4 4) (4 4) (4))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 20) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-editor-box1 "CHORD-SEQ 3" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 6 53) (om-make-point 1650 164) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((7200 8400) (7900 7500) (7200 7400 7000) (6700 6500) (6300 6500 6300) (6200 6000) (7100 7300) (7400 7600) (7300 7400 7300) (7100 7000) (7200) (7300 7500) (7200 7300 7200) (7000 6900) (6300 6000 5700) (7500) (7400 7200) (6900 6800) (6600 6500) (6300 6200) (6000 5800) (5700 5900 5800) (6000 5800 5500) (5700 5800) (5700 5800 5700) (5500 5700) (6700) (6800 6900) (7400 7500) (7400) (7200) (6700 5800 7400 7500) (7400) (7200 7400) (7100 7300) (7400 7600) (7300 7400 7300) (7100 7000) (7200) (7300 7500) (7200 7300 7200) (7000 6900) (6300 6000 5700) (7500) (7400 7200) (6900 6800) (6600 6500) (6300 6200) (6000 5800) (5700 5900 5800) (6000 5800 5500) (5700 5800) (5700 5800 5700) (5500 5700) (6700) (6800 6900) (7200 6900 6300) (6000 6200 6300) (6500 6600 6800) (6900 7100 7200) (7400 7500) (7400) (7200 7000 7200) (7400 7000) (6900 6700) (6600 6900) (6700 6200) (6700) (7000 6700) (7400 7300) (7200 7400) (7200 7000) (7200 7000) (6900 7000) (6900 6700) (6900 6700) (6500 6700 6500) (6300 6200 6300) (6200 6100) (6200 6300) (6500 6700) (6900 7000) (7200 7400) (7500 7700) (7900 7700 7900) (8000) (8100) (7900 7500 7200) (6900 6800) (6600 6500 6300) (6200 6000) (5800 5700) (6500 6600 6800 7000))) :lonset (quote (-8 523 811 1130 1535 1812 2789 3100 3484 3766 4100 4420 4836 5133 5484 5819 6118 6421 6770 7084 7414 7769 8130 8420 8776 9094 10042 10351 10779 11076 11246 11773 12726 13033 13349 13660 14044 14326 14660 14980 15396 15693 16044 16379 16678 16981 17330 17644 17974 18329 18690 18980 19336 19654 20602 20911 21283 21619 21966 22291 22546 23268 23613 23922 24258 24576 24923 25614 25934 26231 26561 26886 27206 27520 27861 28147 28488 28925 29142 29463 29782 30147 30483 30801 31228 31451 31690 32403 33228 33478 33809 34138 34535 34670)) :ldur (quote ((410 451) (69 107) (149 58 123) (128 139) (133 47 80) (154 175) (170 116) (102 101) (112 64 84) (134 159) (134) (129 101) (128 112 85) (154 207) (75 59 48) (117) (123 112) (128 127) (171 123) (112 154) (159 154) (154 106 197) (107 128 90) (139 159) (123 133 127) (182 229) (111) (106 133) (155 175) (123) (207) (75 58 176 192) (123) (127 102) (170 116) (102 101) (112 64 84) (134 159) (134) (129 101) (128 112 85) (154 207) (75 59 48) (117) (123 112) (128 127) (171 123) (112 154) (159 154) (154 106 197) (107 128 90) (139 159) (123 133 127) (182 229) (111) (106 133) (139 64 123) (91 96 86) (106 117 106) (111 123 90) (122 697) (112) (123 159 119) (129 166) (176 143) (166 160) (164 170) (86) (208 43) (144 112) (149 112) (145 91) (159 123) (143 181) (145 106) (144 144) (117 112 90) (133 117 127) (149 117) (159 128) (153 153) (138 137) (111 122) (139 143) (123 69 100) (110) (596) (85 107 213) (91 85) (116 111 117) (144 101) (176 133) (101 116 139 121))) :lvel (quote ((48 71) (86 102) (81 42 102) (90 66) (82 60 63) (69 60) (106 97) (108 122) (93 60 49) (74 89) (104) (91 91) (97 71 58) (78 83) (65 55 46) (119) (73 78) (58 109) (59 76) (97 80) (74 90) (22 38 99) (61 62 74) (91 93) (73 53 44) (76 74) (117) (97 103) (107 108) (103) (59) (27 32 93 95) (109) (86 104) (106 97) (108 122) (93 60 49) (74 89) (104) (91 91) (97 71 58) (78 83) (65 55 46) (119) (73 78) (58 109) (59 76) (97 80) (74 90) (22 38 99) (61 62 74) (91 93) (73 53 44) (76 74) (117) (97 103) (85 75 90) (94 89 94) (84 102 104) (94 104 48) (106 111) (94) (97 107 115) (108 91) (82 79) (97 104) (80 76) (99) (94 79) (113 105) (95 108) (78 83) (103 84) (89 112) (63 93) (106 70) (84 65 82) (90 102 87) (69 79) (36 92) (87 98) (114 111) (104 102) (104 95) (99 32 104) (105) (99) (81 110 70) (93 92) (108 93 98) (63 73) (95 85) (103 99 85 100))) :loffset (quote ((-6 0) (-80 0) (-192 -159 0) (-165 0) (-223 -90 0) (-185 0) (-176 0) (-171 0) (-251 -119 0) (-198 0) (0) (-171 0) (-262 -103 0) (-186 0) (-21 -11 0) (0) (-133 0) (-165 0) (-182 0) (-170 0) (-165 0) (-154 -138 0) (-165 -84 0) (-166 0) (-218 -112 0) (-202 0) (0) (-156 0) (-209 0) (0) (0) (-304 -292 -282 0) (0) (-153 0) (-176 0) (-171 0) (-251 -119 0) (-198 0) (0) (-171 0) (-262 -103 0) (-186 0) (-21 -11 0) (0) (-133 0) (-165 0) (-182 0) (-170 0) (-165 0) (-154 -138 0) (-165 -84 0) (-166 0) (-218 -112 0) (-202 0) (0) (-156 0) (-228 -112 0) (-224 -107 0) (-234 -128 0) (-213 -86 0) (-127 0) (0) (-271 -186 0) (-165 0) (-193 0) (-186 0) (-191 0) (0) (-186 0) (-175 0) (-169 0) (-187 0) (-192 0) (-160 0) (-172 0) (-159 0) (-197 -96 0) (-288 -107 0) (-133 0) (-191 0) (-176 0) (-186 0) (-161 0) (-165 0) (-224 -192 0) (0) (0) (-144 -75 0) (-65 0) (-234 -149 0) (-181 0) (-187 0) (-314 -223 -113 0))) :lchan (quote ((1 1) (1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1) (1) (1) (1 1 1 1) (1) (1 1) (1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1) (1 1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1) (1 1 1) (1 1) (1) (1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1) (1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1 1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1) (1 1 1) (1) (1) (1 1 1) (1 1) (1 1 1) (1 1) (1 1) (1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0) (0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0) (0) (0) (0 0 0 0) (0) (0 0) (0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0) (0 0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0 0) (0 0) (0) (0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0) (0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0 0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0) (0 0 0) (0) (0) (0 0 0) (0 0) (0 0 0) (0 0) (0 0) (0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 47/100 nil 1000 0 (om-make-point 1006 480) (om-make-point 274 308) 0 1 (quote :normal) (quote t) nil)) t nil nil nil) (om-load-boxcomment "comment" (om-make-point 134 85) (quote "Evaluer avant de lancer l'improvisation") (make-array 0 :initial-contents (eval-my-list (quote nil))) (om-make-point 210 733) nil (om-make-color 0 0 0) (om-make-font "Verdana" 12 :family "Verdana" :style (quote (:plain)) :mode (quote nil))) (om-load-boxcall (quote abstraction) "lispfunction" (om-load-lisp-abspatch "lispfunction" 6.080103 ";;; Edit a valid LAMBDA EXPRESSION for \"lispfunction\"$;;; e.g. (lambda (arg1 arg2 ...) ( ... ))$$(lambda (lst)$  (setq *solo-chord* (car lst))$  (setq *accomp-chord* (cadr lst)))") (quote ((om-load-inputfun (quote input-funbox) "" "LST" nil))) (om-make-point 143 735) nil (list (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((3600 5800 6300 6700) (4800) (4200) (3600) (4100 6700 5700 6300) (4300 5700 6700 6300) (4400) (4500) (4600 5700 6200 6500) (4100) (3400) (5700 4600 6500 6200) (3900) (4100) (4300 6500 6200 5800 5500) (4400) (4500 6000 6700 6300 7200) (4600) (4800) (4900) (6000 7400 6600 7000 5000) (4500) (3800) (4400) (4300 6700 6000 6200) (5500) (5800) (5500) (4800) (7200 5000 6200 6700) (4300 6200 7400 6700 7200) (4300 4400) (3600 5800 6300 6700) (4800) (4200) (3600) (4100 6700 5700 6300) (4300 5700 6700 6300) (4400) (4500) (4600 5700 6200 6500) (4100) (3400) (5700 4600 6500 6200) (3900) (4100) (4300 6500 6200 5800 5500) (4400) (4500 6000 6700 6300 7200) (4600) (4800) (4900) (6000 7400 6600 7000 5000) (4500) (3800) (4400) (4300 6700 6000 6200) (5500) (5800) (5500) (4800) (7200 5000 6200 6700) (4300 6200 7400 6700 7200) (4300 4400) (4500 6300 6700 6000) (4500) (6000 3300 6700 6300 7200) (3300) (3200 7000 6600 7400 6000) (4400) (3900 6000) (4400) (3100 6900 5800 6000 6500) (4300) (3800) (4300) (3100 5800 6000 6900 6500) (4300 4300) (3700 3100) (3700 3500) (3600 6700 6300 5800) (4800) (4200) (3600) (4100 6700 5700 6300) (4300 5700 6700 6300) (4400) (4500) (4600 5700 6500 6200) (4100) (3400) (4600 5700 6500 6200) (5500 3900 5800 6200 6500) (4100) (4300) (3900) (6700 7200 6000 6300 3300) (3400) (6300 6000 6700 7200 3600) (3700) (3800 6000 7000) (6600 5000) (4500 6600 7000 6000) (3800) (6500 5900 4300) (5000) (5800 4200 6400) (4800) (6300 4100 5700) (4800) (5600 4000 6200) (4000 6100) (3900))) :lonset (quote (219 315 660 984 1288 1838 1980 2267 2876 2970 3290 3625 3933 4290 4796 4901 5493 5582 5956 6290 6580 6930 7260 7531 8139 8234 8564 8835 9208 9580 10103 10246 10779 10875 11220 11544 11848 12398 12540 12827 13436 13530 13850 14185 14493 14850 15356 15461 16053 16142 16516 16850 17140 17490 17820 18091 18699 18794 19124 19395 19768 20140 20663 20806 21307 21374 21780 22110 22398 22770 23303 23372 23985 24068 24415 24727 25289 25613 25970 26284 26625 26720 27060 27367 27698 28225 28380 28667 29264 29370 29700 30030 30360 30690 31020 31302 31670 32025 32344 32638 33199 33341 33649 33947 34305 34623 34974 35300 35624 35970 36311 36843 36895 37242)) :ldur (quote ((261 805 817 785) (357) (298) (326) (294 192 192 188) (320 33 37 31) (310) (311) (289 107 58 90) (320) (523) (58 353 48 37) (320) (320) (294 74 37 37 37) (310) (320 320 315 315 113) (342) (310) (278) (219 218 214 218 976) (336) (325) (316) (262 42 31 27) (368) (236) (395) (315) (43 288 43 37) (224 75 80 69 59) (43 272) (261 805 817 785) (357) (298) (326) (294 192 192 188) (320 33 37 31) (310) (311) (289 107 58 90) (320) (523) (58 353 48 37) (320) (320) (294 74 37 37 37) (310) (320 320 315 315 113) (342) (310) (278) (219 218 214 218 976) (336) (325) (316) (262 42 31 27) (368) (236) (395) (315) (43 288 43 37) (224 75 80 69 59) (43 272) (224 70 59 75) (401) (193 224 310 273 321) (342) (320 860 860 822 661) (342) (310 74) (321) (346 1168 1163 1163 1151) (321) (321) (369) (304 49 65 65 58) (38 139) (241 96) (246 95) (273 802 827 816) (368) (303) (326) (294 199 193 188) (331 32 32 28) (293) (294) (304 100 90 53) (310) (559) (346 53 42 38) (801 278 897 913 923) (320) (320) (326) (74 90 37 70 299) (283) (59 42 53 96 316) (373) (298 53 74) (37 933) (299 64 86 48) (310) (70 53 304) (310) (321 279 316) (346) (315 315 315) (353) (320 176 272) (293 70) (310))) :lvel (quote ((63 52 53 67) (68) (46) (52) (44 43 55 38) (36 53 53 55) (27) (32) (40 66 32 28) (34) (39) (63 38 43 24) (27) (31) (42 32 52 42 41) (42) (42 41 34 37 97) (50) (42) (30) (51 53 47 59 43) (40) (28) (36) (44 69 55 60) (44) (13) (44) (39) (44 34 53 34) (44 63 69 52 52) (22 67) (63 52 53 67) (68) (46) (52) (44 43 55 38) (36 53 53 55) (27) (32) (40 66 32 28) (34) (39) (63 38 43 24) (27) (31) (42 32 52 42 41) (42) (42 41 34 37 97) (50) (42) (30) (51 53 47 59 43) (40) (28) (36) (44 69 55 60) (44) (13) (44) (39) (44 34 53 34) (44 63 69 52 52) (22 67) (63 53 59 50) (16) (50 54 42 38 67) (50) (55 64 65 61 42) (55) (38 107) (48) (34 42 40 33 47) (46) (39) (50) (39 64 59 63 59) (50 59) (80 43) (59 56) (63 67 53 52) (68) (46) (52) (44 43 55 38) (36 53 53 55) (27) (32) (40 66 28 32) (34) (39) (38 63 43 24) (41 35 29 35 39) (28) (39) (40) (52 58 52 66 48) (29) (63 52 50 58 39) (38) (44 77 73) (63 52) (45 65 40 52) (48) (72 64 32) (32) (67 46 84) (46) (57 43 69) (44) (52 42 48) (51 77) (27))) :loffset (quote ((-256 0 0 0) (0) (0) (0) (-21 -10 -10 0) (-188 -7 -7 0) (0) (0) (-246 -17 0 0) (0) (0) (-38 -33 -17 0) (0) (0) (-182 -10 0 0 0) (0) (-250 -240 -235 -235 0) (0) (0) (0) (-70 -65 -65 -65 0) (0) (0) (0) (-235 0 0 0) (0) (0) (0) (0) (-10 -10 -10 0) (-213 -15 -15 -4 0) (-74 0) (-256 0 0 0) (0) (0) (0) (-21 -10 -10 0) (-188 -7 -7 0) (0) (0) (-246 -17 0 0) (0) (0) (-38 -33 -17 0) (0) (0) (-182 -10 0 0 0) (0) (-250 -240 -235 -235 0) (0) (0) (0) (-70 -65 -65 -65 0) (0) (0) (0) (-235 0 0 0) (0) (0) (0) (0) (-10 -10 -10 0) (-213 -15 -15 -4 0) (-74 0) (-225 -12 -12 0) (0) (0 0 0 0 0) (0) (-15 -11 -11 0 0) (0) (-203 0) (0) (-256 -11 -6 -6 0) (0) (0) (0) (-278 -6 -6 -6 0) (-203 0) (-230 0) (-262 0) (-245 -6 0 0) (0) (0) (0) (-21 -11 -11 0) (-175 -4 -4 0) (0) (0) (-251 -15 -5 0) (0) (0) (-32 -32 -15 0) (-53 -43 0 0 0) (0) (0) (0) (-10 -10 -10 -10 0) (0) (-10 -4 -4 -4 0) (0) (-230 -6 0) (-111 0) (-11 -11 0 0) (0) (-12 -12 0) (0) (-5 0 0) (0) (0 0 0) (0) (-15 -11 0) (-213 0) (0))) :lchan (quote ((4 4 4 4) (4) (4) (4) (4 4 4 4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4) (4) (4) (4) (4) (4 4 4 4) (4 4 4 4 4) (4 4) (4 4 4 4) (4) (4) (4) (4 4 4 4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4) (4) (4) (4) (4) (4 4 4 4) (4 4 4 4 4) (4 4) (4 4 4 4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4 4) (4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4 4) (4 4) (4 4) (4 4 4 4) (4) (4) (4) (4 4 4 4) (4 4 4 4) (4) (4) (4 4 4 4) (4) (4) (4 4 4 4) (4 4 4 4 4) (4) (4) (4) (4 4 4 4 4) (4) (4 4 4 4 4) (4) (4 4 4) (4 4) (4 4 4 4) (4) (4 4 4) (4) (4 4 4) (4) (4 4 4) (4) (4 4 4) (4 4) (4))) :legato 0)))) (load-port-info newobj (quote ((0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0) (0) (0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0 0) (0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0) (0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0 0) (0 0) (0 0) (0 0 0 0) (0) (0) (0) (0 0 0 0) (0 0 0 0) (0) (0) (0 0 0 0) (0) (0) (0 0 0 0) (0 0 0 0 0) (0) (0) (0) (0 0 0 0 0) (0) (0 0 0 0 0) (0) (0 0 0) (0 0) (0 0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0) (0 0 0) (0 0) (0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil) (om-load-boxcall (quote lispfun) "LIST" (quote list) (quote ((om-load-inputfun (quote input-funbox) "add-input" "add-input" nil) (om-load-inputfun (quote input-funbox) "add-input" "add-input" nil))) (om-make-point 168 655) nil nil nil nil 1))) (quote ((13 0 12 0 nil 0) (10 0 13 0 nil 0) (9 0 13 1 nil 0))) nil 6.080103))
